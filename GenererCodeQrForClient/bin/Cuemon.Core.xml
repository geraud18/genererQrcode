<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cuemon.Core</name>
    </assembly>
    <members>
        <member name="T:Cuemon.ActionFactory">
            <summary>
            Provides access to factory methods for creating <see cref="T:Cuemon.ActionFactory`1"/> instances that encapsulate a delegate with a variable amount of generic arguments.
            </summary>
        </member>
        <member name="M:Cuemon.ActionFactory.Create(System.Action)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/>.
            </summary>
            <param name="method">The delegate to invoke.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``1(System.Action{``0},``0)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and one generic argument.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and one generic argument.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and two generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and two generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and three generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and three generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and four generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and four generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and five generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and five generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and six generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and six generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and seven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and seven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and eight generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and eight generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and nine generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and nine generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and ten generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and ten generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and eleven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and eleven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and twelfth generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and twelfth generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and thirteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and thirteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and fourteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and fourteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and fifteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and fifteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Create``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Creates a new <see cref="T:Cuemon.ActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and sixteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.ActionFactory`1"/> object initialized with the specified <paramref name="method"/> and sixteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActionFactory.Invoke``1(System.Action{``0},``0)">
            <summary>
            Invokes the specified delegate <paramref name="method"/> with a n-<paramref name="tuple"/> argument.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="T:Cuemon.ActionFactory`1">
            <summary>
            Provides an easy way of invoking an <see cref="T:System.Action" /> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActionFactory`1.#ctor(System.Action{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActionFactory"/> class.
            </summary>
            <param name="method">The delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActionFactory`1.#ctor(System.Action{`0},`0,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActionFactory`1"/> class.
            </summary>
            <param name="method">The delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="originalDelegate">The original delegate wrapped by <paramref name="method"/>.</param>
        </member>
        <member name="P:Cuemon.ActionFactory`1.Method">
            <summary>
            Gets the delegate to invoke.
            </summary>
            <value>The delegate to invoke.</value>
        </member>
        <member name="M:Cuemon.ActionFactory`1.ExecuteMethod">
            <summary>
            Executes the delegate associated with this instance.
            </summary>
        </member>
        <member name="M:Cuemon.ActionFactory`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActionFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActionFactory`1"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Alphanumeric">
            <summary>
            Provides a set of alphanumeric constant and static fields that consists of both letters, numbers and other symbols (such as punctuation marks and mathematical symbols).
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Numbers">
            <summary>
            A representation of a numeric character set consisting of the numbers 0 to 9.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.UppercaseLetters">
            <summary>
            An uppercase representation of an alphabetic character set consisting of the letters A to Z.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Letters">
            <summary>
            A case sensitive representation of an alphabetic character set consisting of the letters Aa to Zz.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.LettersAndNumbers">
            <summary>
            A case sensitive representation of an alphanumeric character set consisting of the numbers 0 to 9 and the letters Aa to Zz.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.LowercaseLetters">
            <summary>
            A lowercase representation of an alphabetic character set consisting of the letters a to z.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.PunctuationMarks">
            <summary>
            A representation of the most common punctuation marks consisting of the characters !@#$%^&amp;*()_-+=[{]};:&lt;&gt;|.,/?`~\"'..
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.WhiteSpace">
            <summary>
            A representation of the most common whitespace characters.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Hexadecimal">
            <summary>
            A representation of a hexadecimal character set consisting of the numbers 0 to 9 and the letters A to F.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.NetworkPathReference">
            <summary>
            A network-path reference, eg. two forward slashes (//).
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.NewLine">
            <summary>
            Carriage-return/linefeed character combination.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Tab">
            <summary>
            Tab character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.TabChar">
            <summary>
            Tab character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Linefeed">
            <summary>
            Linefeed character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.LinefeedChar">
            <summary>
            Linefeed character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.CarriageReturn">
            <summary>
            Carriage-return character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.CarriageReturnChar">
            <summary>
            Carriage-return character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.Caret">
            <summary>
            Circumflex accent / Caret character.
            </summary>
        </member>
        <member name="F:Cuemon.Alphanumeric.CaretChar">
            <summary>
            Circumflex accent / Caret character.
            </summary>
        </member>
        <member name="T:Cuemon.AssignmentOperator">
            <summary>
            Defines the most common assignment operators for numeric operands.
            </summary>
            <remarks>
            For more information please refer to this Wikibooks article: http://en.wikibooks.org/wiki/C_Sharp_Programming/Operators.
            </remarks>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Assign">
            <summary>
            An assignment operation, such as (x = y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Addition">
            <summary>
            An addition compound assignment operation, such as (x += y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Subtraction">
            <summary>
            A subtraction compound assignment operation, such as (x -= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Multiplication">
            <summary>
            A multiplication compound assignment operation, such as (x *= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Division">
            <summary>
            An division compound assignment operation, such as (x /= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Remainder">
            <summary>
            An arithmetic remainder compound assignment operation, such as (x %= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.And">
            <summary>
            A bitwise or logical AND compound assignment operation, such as (x &amp;= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Or">
            <summary>
            A bitwise or logical OR compound assignment, such as (x |= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.ExclusiveOr">
            <summary>
            A bitwise or logical XOR compound assignment operation, such as (x ^= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.LeftShift">
            <summary>
            A bitwise left-shift compound assignment, such as (x &lt;&lt;= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.RightShift">
            <summary>
            A bitwise left-shift compound assignment, such as (x &gt;&gt;= y).
            </summary>
        </member>
        <member name="T:Cuemon.BinaryPrefix">
            <summary>
            Defines a binary unit prefix for multiples of measurement for data that refers strictly to powers of 2. This class cannot be inherited.
            </summary>
            <seealso cref="T:Cuemon.PrefixMultiple" />
        </member>
        <member name="P:Cuemon.BinaryPrefix.Kibi">
            <summary>
            Gets the binary-multiple prefix kibi (symbol 'Ki'), 2^10 = 1024.
            </summary>
            <value>The binary-multiple prefix kibi (symbol 'Ki').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Mebi">
            <summary>
            Gets the binary-multiple prefix mebi (symbol 'Mi'), 2^20 = 1048576.
            </summary>
            <value>The binary-multiple prefix mebi (symbol 'Mi').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Gibi">
            <summary>
            Gets the binary-multiple prefix gibi (symbol 'Gi'), 2^30 = 1073741824.
            </summary>
            <value>The binary-multiple prefix gibi (symbol 'Gi').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Tebi">
            <summary>
            Gets the binary-multiple prefix tebi (symbol 'Ti'), 2^40 = 1099511627776.
            </summary>
            <value>The binary-multiple prefix tebi (symbol 'Ti').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Pebi">
            <summary>
            Gets the binary-multiple prefix pebi (symbol 'Pi'), 2^50 = 1125899906842624.
            </summary>
            <value>The binary-multiple prefix pebi (symbol 'Pi').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Exbi">
            <summary>
            Gets the binary-multiple prefix exbi (symbol 'Ei'), 2^60 = 1152921504606846976.
            </summary>
            <value>The binary-multiple prefix exbi (symbol 'Ei').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Zebi">
            <summary>
            Gets the binary-multiple prefix zebi (symbol 'Zi'), 2^70 = 1180591620717411303424.
            </summary>
            <value>The binary-multiple prefix zebi (symbol 'Zi').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.Yobi">
            <summary>
            Gets the binary-multiple prefix yobi (symbol 'Yi'), 2^80 = 1208925819614629174706176.
            </summary>
            <value>The binary-multiple prefix yobi (symbol 'Yi').</value>
        </member>
        <member name="P:Cuemon.BinaryPrefix.BinaryPrefixes">
            <summary>
            Gets the complete sequence of multiples and submultiples binary prefixes as specified by Institute of Electrical and Electronics Engineers (IEEE).
            </summary>
            <value>The complete sequence of multiples and submultiples binary prefixes as specified by Institute of Electrical and Electronics Engineers (IEEE).</value>
        </member>
        <member name="M:Cuemon.BinaryPrefix.#ctor(System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.BinaryPrefix"/> struct.
            </summary>
            <param name="name">The name of the binary prefix.</param>
            <param name="symbol">The symbol of the the binary prefix.</param>
            <param name="exponent">The number that specifies a power.</param>
        </member>
        <member name="T:Cuemon.BitStorageCapacity">
            <summary>
            Represent a table of both binary and metric prefixes for a <see cref="T:Cuemon.BitUnit"/>. This class cannot be inherited from.
            </summary>
            <seealso cref="T:Cuemon.StorageCapacity" />
        </member>
        <member name="M:Cuemon.BitStorageCapacity.FromBytes(System.Double,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Creates a new instance of <see cref="T:Cuemon.BitStorageCapacity"/> initialized with <paramref name="bytes"/>.
            </summary>
            <param name="bytes">The <see cref="T:System.Double"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.BitStorageCapacity"/> that is initialized with <paramref name="bytes"/> * <see cref="F:Cuemon.ByteUnit.BitsPerByte"/> (ceiling).</returns>
        </member>
        <member name="M:Cuemon.BitStorageCapacity.FromBits(System.Double,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Creates a new instance of <see cref="T:Cuemon.BitStorageCapacity"/> initialized with <paramref name="bits"/>.
            </summary>
            <param name="bits">The <see cref="T:System.Double"/> to set the amount of bit for this table.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.BitStorageCapacity"/> that is equivalent to <paramref name="bits"/>.</returns>
        </member>
        <member name="M:Cuemon.BitStorageCapacity.#ctor(Cuemon.BitUnit,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.BitStorageCapacity"/> class.
            </summary>
            <param name="unit">The <see cref="T:Cuemon.BitUnit"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
        </member>
        <member name="T:Cuemon.BitUnit">
            <summary>
            Represents a unit of measurement for bits and is used with measurement of data.
            </summary>
            <seealso cref="T:Cuemon.PrefixUnit" />
            <seealso cref="T:Cuemon.ByteUnit"/>
            <seealso cref="T:Cuemon.BinaryPrefix"/>
        </member>
        <member name="F:Cuemon.BitUnit.Name">
            <summary>
            Defines the name of a bit unit.
            </summary>
        </member>
        <member name="F:Cuemon.BitUnit.Symbol">
            <summary>
            Defines the symbol of a bit unit.
            </summary>
        </member>
        <member name="M:Cuemon.BitUnit.op_Implicit(Cuemon.BitUnit)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Cuemon.BitUnit"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="unit">The <see cref="T:Cuemon.ByteUnit"/> to convert.</param>
            <returns>A <see cref="T:System.Double"/> that is equivalent to <paramref name="unit"/>.</returns>
        </member>
        <member name="M:Cuemon.BitUnit.#ctor(System.Double,Cuemon.IPrefixMultiple,System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.BitUnit"/> struct.
            </summary>
            <param name="value">The value of this unit expressed as bits.</param>
            <param name="prefix">The prefix to associate with this unit.</param>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value" /> is lower than 0 -or-
            <paramref name="prefix"/> is less than a metric-multiple <see cref="P:Cuemon.DecimalPrefix.Kilo"/>.
            </exception>
        </member>
        <member name="T:Cuemon.ByteStorageCapacity">
            <summary>
            Represent a table of both binary and metric prefixes for a <see cref="T:Cuemon.ByteUnit"/>. This class cannot be inherited from.
            </summary>
            <seealso cref="T:Cuemon.StorageCapacity" />
        </member>
        <member name="M:Cuemon.ByteStorageCapacity.FromBits(System.Double,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Creates a new instance of <see cref="T:Cuemon.ByteStorageCapacity"/> initialized with <paramref name="bits"/>.
            </summary>
            <param name="bits">The <see cref="T:System.Double"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.BitStorageCapacity"/> that is initialized with <paramref name="bits"/> / <see cref="F:Cuemon.ByteUnit.BitsPerByte"/>.</returns>
        </member>
        <member name="M:Cuemon.ByteStorageCapacity.FromBytes(System.Double,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Creates a new instance of <see cref="T:Cuemon.ByteStorageCapacity"/> initialized with <paramref name="bytes"/>.
            </summary>
            <param name="bytes">The <see cref="T:System.Double"/> to set the amount of byte for this table.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.BitStorageCapacity"/> that is equivalent to <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Cuemon.ByteStorageCapacity.#ctor(Cuemon.ByteUnit,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ByteStorageCapacity"/> class.
            </summary>
            <param name="unit">The <see cref="T:Cuemon.ByteUnit"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
        </member>
        <member name="T:Cuemon.ByteUnit">
            <summary>
            Represents a unit of measurement for bytes and is used with measurement of data.
            </summary>
            <seealso cref="T:Cuemon.PrefixUnit" />
            <seealso cref="T:Cuemon.BitUnit"/>
            <seealso cref="T:Cuemon.BinaryPrefix"/>
        </member>
        <member name="F:Cuemon.ByteUnit.BitsPerByte">
            <summary>
            Defines how many bits is needed for one byte.
            </summary>
        </member>
        <member name="F:Cuemon.ByteUnit.BitsPerNibble">
            <summary>
            Defines how many bits is needed for one nibble (one hexadecimal digit).
            </summary>
        </member>
        <member name="F:Cuemon.ByteUnit.Name">
            <summary>
            Defines the name of a byte unit.
            </summary>
        </member>
        <member name="F:Cuemon.ByteUnit.Symbol">
            <summary>
            Defines the symbol of a byte unit.
            </summary>
        </member>
        <member name="M:Cuemon.ByteUnit.op_Implicit(Cuemon.ByteUnit)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Cuemon.ByteUnit"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="unit">The <see cref="T:Cuemon.ByteUnit"/> to convert.</param>
            <returns>A <see cref="T:System.Double"/> that is equivalent to <paramref name="unit"/>.</returns>
        </member>
        <member name="M:Cuemon.ByteUnit.#ctor(System.Double,Cuemon.IPrefixMultiple,System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ByteUnit"/> struct.
            </summary>
            <param name="value">The value of this unit expressed as bytes.</param>
            <param name="prefix">The prefix to associate with this unit.</param>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value" /> is lower than 0 -or-
            <paramref name="prefix"/> is less than a metric-multiple <see cref="P:Cuemon.DecimalPrefix.Kilo"/>.
            </exception>
        </member>
        <member name="T:Cuemon.Calculator">
            <summary>
            Provides a set of static methods for generic arithmetic assignment operations.
            </summary>
        </member>
        <member name="M:Cuemon.Calculator.Add``1(``0,``0)">
            <summary>
            Performs a binary addition of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to add.</param>
            <param name="y">The second value to add.</param>
            <returns>The sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.And``1(``0,``0)">
            <summary>
            Performs a a bitwise logical conjunction (AND) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to AND.</param>
            <param name="y">The second value to AND.</param>
            <returns>The result of <paramref name="x"/> AND <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Assign``1(``0,``0)">
            <summary>
            Performs an assignment of the right-hand operand to the left-hand operand.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The left-hand operand.</param>
            <param name="y">The right-hand operand.</param>
            <returns>The value of <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Divide``1(``0,``0)">
            <summary>
            Performs a binary division of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The dividend.</param>
            <param name="y">The divisor.</param>
            <returns>The result of dividing <paramref name="x"/> by <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="y"/> is zero.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.ExclusiveOr``1(``0,``0)">
            <summary>
            Performs a bitwise exclusive or (XOR) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to XOR.</param>
            <param name="y">The second value to XOR.</param>
            <returns>The result of <paramref name="x"/> XOR <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.LeftShift``1(``0,``0)">
            <summary>
            Performs an arithmetic left shift (&lt;&lt;) operation.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The bit pattern to be shifted.</param>
            <param name="y">The number of bits to shift the bit pattern.</param>
            <returns>The result of shifting the bit pattern.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Multiply``1(``0,``0)">
            <summary>
            Performs a binary multiplication of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The multiplicand.</param>
            <param name="y">The multiplier.</param>
            <returns>The result of multiplying <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Or``1(``0,``0)">
            <summary>
            Performs a bitwise logical disjunction (OR) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to OR.</param>
            <param name="y">The second value to OR.</param>
            <returns>The result of <paramref name="x"/> OR <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Remainder``1(``0,``0)">
            <summary>
            Performs a binary division of the two specified values and computes the remainder hereof.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The dividend.</param>
            <param name="y">The divisor.</param>
            <returns>The remainder after dividing <paramref name="x"/> by <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="y"/> is zero.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.RightShift``1(``0,``0)">
            <summary>
            Performs an arithmetic right shift (&gt;&gt;) operation.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The bit pattern to be shifted.</param>
            <param name="y">The number of bits to shift the bit pattern.</param>
            <returns>The result of shifting the bit pattern.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Subtract``1(``0,``0)">
            <summary>
            Performs a binary subtraction of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The minuend.</param>
            <param name="y">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="y"/> from <paramref name="x"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.Calculate``1(``0,Cuemon.AssignmentOperator,``0)">
            <summary>
            Performs a calculation following the <paramref name="assignment"/> of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The value to calculate with <paramref name="y"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the assignment operator of <paramref name="x"/> and <paramref name="y"/>.</param>
            <param name="y">The value to calculate with <paramref name="x"/>.</param>
            <returns>The result of the <paramref name="assignment"/> for <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Calculator.ValidAsNumericOperand``1">
            <summary>
            Validates if the specified <typeparamref name="T"/> is within the allowed range of numeric operands.
            </summary>
            <typeparam name="T">The type of the value for an operand operation.</typeparam>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="T:Cuemon.CasingMethod">
            <summary>
            Specifies ways that a string must be converted in terms of casing.
            </summary>
        </member>
        <member name="F:Cuemon.CasingMethod.Default">
            <summary>
            Indicates default behavior which is leaving the casing unaltered, hence allowing mixed casing.
            </summary>
        </member>
        <member name="F:Cuemon.CasingMethod.LowerCase">
            <summary>
            Indicates that all characters will be converted to lowercase.
            </summary>
        </member>
        <member name="F:Cuemon.CasingMethod.UpperCase">
            <summary>
            Indicates that all characters will be converted to UPPERCASE.
            </summary>
        </member>
        <member name="F:Cuemon.CasingMethod.TitleCase">
            <summary>
            Indicates that characters will be converted to Title Case.
            </summary>
        </member>
        <member name="T:Cuemon.Collections.DataPairCollection">
            <summary>
            Provides a collection of <see cref="T:Cuemon.DataPair"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.DataPairCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.DataPairCollection"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.DataPairCollection.Add``1(System.String,``0)">
            <summary>
            Adds a new <see cref="T:Cuemon.DataPair`1"/> to the end of this <see cref="T:Cuemon.Collections.DataPairCollection"/>.
            </summary>
            <typeparam name="T">The type of the data being added to this instance.</typeparam>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
        </member>
        <member name="M:Cuemon.Collections.DataPairCollection.Add``1(System.String,``0,System.Type)">
            <summary>
            Adds a new <see cref="T:Cuemon.DataPair`1"/> to the end of this <see cref="T:Cuemon.Collections.DataPairCollection"/>.
            </summary>
            <typeparam name="T">The type of the data being added to this instance.</typeparam>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
            <param name="typeOf">The type of the data pair.</param>
        </member>
        <member name="T:Cuemon.Collections.DataPairDictionary">
            <summary>
            Provides a collection of <see cref="T:Cuemon.DataPair"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.DataPairDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.DataPairDictionary"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.DataPairDictionary.Add``1(System.String,``0)">
            <summary>
            Adds a new <see cref="T:Cuemon.DataPair`1"/> to the end of this <see cref="T:Cuemon.Collections.DataPairDictionary"/>.
            </summary>
            <typeparam name="T">The type of the data being added to this instance.</typeparam>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
        </member>
        <member name="M:Cuemon.Collections.DataPairDictionary.Add``1(System.String,``0,System.Type)">
            <summary>
            Adds a new <see cref="T:Cuemon.DataPair`1"/> to the end of this <see cref="T:Cuemon.Collections.DataPairDictionary"/>.
            </summary>
            <typeparam name="T">The type of the data being added to this instance.</typeparam>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
            <param name="typeOf">The type of the data pair.</param>
        </member>
        <member name="T:Cuemon.Collections.Generic.Arguments">
            <summary>
            Provides a set of static methods for both typing (no conversion) and converting a variable number of arguments into its equivalent <see cref="T:object[]"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:T[]"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.Concat``1(``0[],``0[])">
            <summary>
            Concatenates two arrays.
            </summary>
            <typeparam name="T">The type of the elements of the input arrays.</typeparam>
            <param name="args1">The first array to concatenate.</param>
            <param name="args2">The array to concatenate to the first array.</param>
            <returns>An <see cref="T:T[]"/> that contains the concatenated elements of the two input arrays.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.ToArrayOf``1(``0[])">
            <summary>
            Returns the input typed as <see cref="T:T[]"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="args"/>.</typeparam>
            <param name="args">The <see cref="T:T[]"/> to type as <see cref="T:T[]"/>.</param>
            <returns>The input <paramref name="args"/> typed as <see cref="T:T[]"/>.</returns>
            <remarks>The <see cref="M:Cuemon.Collections.Generic.Arguments.ToArrayOf``1(``0[])"/> method has no effect other than to change the compile-time type of <paramref name="args"/> from <see cref="T:T[]"/> to <see cref="T:T[]"/>.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.ToArray(System.Object[])">
            <summary>
            Returns the input typed as <see cref="T:object[]"/>.
            </summary>
            <param name="args">The <see cref="T:object[]"/> to type as <see cref="T:object[]"/>.</param>
            <returns>The input <paramref name="args"/> typed as <see cref="T:object[]"/>.</returns>
            <remarks>The <see cref="M:Cuemon.Collections.Generic.Arguments.ToArray(System.Object[])"/> method has no effect other than to change the compile-time type of <paramref name="args"/> from <see cref="T:object[]"/> to <see cref="T:object[]"/>.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.ToEnumerableOf``1(``0[])">
            <summary>
            Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="args"/>.</typeparam>
            <param name="args">The <see cref="T:T[]"/> to type as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The input <paramref name="args"/> typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <remarks>The <see cref="M:Cuemon.Collections.Generic.Arguments.ToEnumerableOf``1(``0[])"/> method has no effect other than to change the compile-time type of <paramref name="args"/> from <see cref="T:T[]"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.ToEnumerable(System.Object[])">
            <summary>
            Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="args">The <see cref="T:object[]"/> to type as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The input <paramref name="args"/> typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <remarks>The <see cref="M:Cuemon.Collections.Generic.Arguments.ToEnumerable(System.Object[])"/> method has no effect other than to change the compile-time type of <paramref name="args"/> from <see cref="T:object[]"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.Arguments.Yield``1(``0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified <paramref name="arg"/> as the only element.
            </summary>
            <typeparam name="T">The type of the element of <paramref name="arg"/>.</typeparam>
            <param name="arg">The <typeparamref name="T"/> to type as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified <paramref name="arg"/> as the only element.</returns>
            <remarks>The <see cref="M:Cuemon.Collections.Generic.Arguments.Yield``1(``0)"/> method has no effect other than to change the compile-time type of <paramref name="arg"/> from <typeparamref name="T"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</remarks>
        </member>
        <member name="T:Cuemon.Collections.Generic.ConditionalCollection`1">
            <summary>
            Provides the abstract base class for a generic, conditional collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Collections.Generic.ConditionalCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.
            </summary>
            <value>The number of elements actually contained in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1"/>.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.ConditionalCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Add(`0,System.Action)">
            <summary>
            Adds an item to the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
            <param name="validator">The delegate that validates the <paramref name="item"/> being added to the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
            <returns><c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />; otherwise, <c>false</c>. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Remove(`0,System.Func{`0,System.Boolean},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes all occurrences of a specific object from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" /> that match the conditions defined by the specified <paramref name="predicate"/> and <paramref name="comparer"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
            <param name="predicate">The function delegate that will iterate and match the specified <paramref name="item"/> from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing the specified <paramref name="item"/> with an element from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />; otherwise, <c>false</c>. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
            <returns><c>true</c> if <paramref name="item" /> is found in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" /> contains a specific value by using a specified <paramref name="comparer"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing the specified <paramref name="item"/> with an element from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1"/>.</param>
            <returns><c>true</c> if <paramref name="item" /> is found in the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Cuemon.Collections.Generic.ConditionalCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ConditionalCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.DynamicComparer">
            <summary>
            Provides a factory based way to create and wrap an <see cref="T:System.Collections.Generic.IComparer`1"/> implementation.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.DynamicComparer.Create``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Creates a dynamic instance of an <see cref="T:System.Collections.Generic.IComparer`1"/> implementation wrapping <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> through <paramref name="comparer"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="comparer">The function delegate that performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</param>
            <returns>A dynamic instance of <see cref="T:System.Collections.Generic.IComparer`1"/> that serves as a sort order comparer for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.DynamicEqualityComparer">
            <summary>
            Provides a factory based way to create and wrap an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.DynamicEqualityComparer.Create``1(System.Func{``0,System.Int32},System.Func{``0,``0,System.Boolean})">
            <summary>
            Creates a dynamic instance of an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation wrapping <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> through <paramref name="hashCalculator"/> and <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>. through <paramref name="equalityComparer"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="hashCalculator">The function delegate that calculates a hash code of the specified object and is invoked first.</param>
            <param name="equalityComparer">The function delegate that determines whether the specified objects are equal. This delegate is invoked second if qualified.</param>
            <returns>A dynamic instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for type <typeparamref name="T"/>.</returns>
            <remarks>The function delegate, <paramref name="hashCalculator"/> (<see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>), is evaluated with a conditional-AND before the second function delegate, <paramref name="equalityComparer"/> (<see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>), is ivoked.</remarks>
        </member>
        <member name="T:Cuemon.Collections.Generic.EnumerableSizeComparer`1">
            <summary>
            Provides <see cref="T:System.Collections.Generic.IEnumerable`1"/> size comparison.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> type to compare.</typeparam>
        </member>
        <member name="P:Cuemon.Collections.Generic.EnumerableSizeComparer`1.Default">
            <summary>
            Returns a default comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableSizeComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y.
            </returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.EnumReadOnlyDictionary`1">
            <summary>
            Represents a read-only collection of key/value pairs that provides information about the specified <typeparamref name="TEnum"/>.
            Implements the <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <seealso cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumReadOnlyDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.EnumReadOnlyDictionary`1"/> class.
            </summary>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="TEnum"/> does not represents an enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="TEnum"/> is a type from an assembly loaded in a reflection-only context.
            </exception>
        </member>
        <member name="T:Cuemon.Collections.Generic.PaginationEnumerable`1">
            <summary>
            Represents a generic and read-only pagination sequence.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:Cuemon.Collections.Generic.PaginationEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{System.Int32},System.Action{Cuemon.Collections.Generic.PaginationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.PaginationEnumerable`1"/> class.
            </summary>
            <param name="source">The sequence to turn into a page.</param>
            <param name="totalElementCounter">The total element counter.</param>
            <param name="setup">The <see cref="T:Cuemon.Collections.Generic.PaginationOptions"/> which may be configured.</param>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.PageSource">
            <summary>
            Gets the page source of this instance.
            </summary>
            <value>The page source of this instance.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.PageCount">
            <summary>
            Gets the total amount of pages for the elements in this sequence.
            </summary>
            <value>The total amount of pages for the elements in this sequence.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.TotalElementCount">
            <summary>
            Gets the total number of elements in the sequence before paging is applied.
            </summary>
            <value>The total number of elements in the sequence before paging is applied.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.HasNextPage">
            <summary>
            Gets a value indicating whether this instance has a next paged data sequence.
            </summary>
            <value><c>true</c> if this instance has a next paged data sequence; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.HasPreviousPage">
            <summary>
            Gets a value indicating whether this instance has a previous paged data sequence.
            </summary>
            <value><c>true</c> if this instance has a previous paged data sequence; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.FirstPage">
            <summary>
            Gets a value indicating whether this instance is on the first paged data sequence.
            </summary>
            <value><c>true</c> if this instance is on the first paged data sequence; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationEnumerable`1.LastPage">
            <summary>
            Gets a value indicating whether this instance is on the last paged data sequence.
            </summary>
            <value><c>true</c> if this instance is on the last paged data sequence; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Collections.Generic.PaginationEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.PaginationList`1">
            <summary>
            Represents an eagerly materialized generic and read-only pagination list.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
        </member>
        <member name="M:Cuemon.Collections.Generic.PaginationList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{System.Int32},System.Action{Cuemon.Collections.Generic.PaginationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.PaginationList`1"/> class.
            </summary>
            <param name="source">The sequence to turn into a page.</param>
            <param name="totalElementCounter">The total element counter.</param>
            <param name="setup">The <see cref="T:Cuemon.Collections.Generic.PaginationOptions"/> which may be configured.</param>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationList`1.Count">
            <summary>
            Gets the number of elements on the current page.
            </summary>
            <value>The number of elements on the current page.</value>
        </member>
        <member name="T:Cuemon.Collections.Generic.PaginationOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Collections.Generic.PaginationEnumerable`1"/> and <see cref="T:Cuemon.Collections.Generic.PaginationList`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.PaginationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.PaginationOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Collections.Generic.PaginationOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Collections.Generic.PaginationOptions.PageNumber"/></term>
                    <description>1</description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Collections.Generic.PaginationOptions.PageSize"/></term>
                    <description>25</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationOptions.PageSize">
            <summary>
            Gets or sets the number of elements to display on a page.
            </summary>
            <value>The number of elements to display on a page.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PaginationOptions.PageNumber">
            <summary>
            Gets or sets the one-based number of the page to iterate.
            </summary>
            <value>The one-based number of the page to iterate.</value>
        </member>
        <member name="T:Cuemon.Collections.Generic.PartitionerCollection`1">
            <summary>
            Represents a generic and read-only collection that is iterated in partitions.
            Implements the <see cref="T:Cuemon.Collections.Generic.PartitionerEnumerable`1" />
            Implements the <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <seealso cref="T:Cuemon.Collections.Generic.PartitionerEnumerable`1" />
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
        </member>
        <member name="M:Cuemon.Collections.Generic.PartitionerCollection`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.PartitionerCollection`1"/> class.
            </summary>
            <param name="source">The sequence to iterate in partitions.</param>
            <param name="partitionSize">The size of the partitions.</param>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerCollection`1.Count">
            <summary>
            Gets the total number of elements in the sequence before partitioning is applied.
            </summary>
            <value>The total number of elements in the sequence before partitioning is applied.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerCollection`1.Remaining">
            <summary>
            Gets the number of elements remaining in the partitioned sequence.
            </summary>
            <value>The number of elements remaining in the partitioned sequence.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerCollection`1.PartitionsCount">
            <summary>
            Gets the total amount of partitions for the elements in this sequence.
            </summary>
            <returns>The total amount of partitions for the elements in this sequence.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.PartitionerEnumerable`1">
            <summary>
            Exposes the enumerator, which supports iteration in partitions over a collection of a specified type.
            Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:Cuemon.Collections.Generic.PartitionerEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.PartitionerEnumerable`1"/> class.
            </summary>
            <param name="source">The sequence to iterate in partitions.</param>
            <param name="partitionSize">The size of the partitions.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="partitionSize" /> is lower than 0.
            </exception>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerEnumerable`1.Origin">
            <summary>
            Gets the sequence that this instance was constructed with.
            </summary>
            <value>The sequence that this instance was constructed with.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerEnumerable`1.PartitionSize">
            <summary>
            Gets the number of elements per partition.
            </summary>
            <value>The number of elements per partition.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerEnumerable`1.IteratedCount">
            <summary>
            Gets the number of times the this instance was iterated.
            </summary>
            <value>The number of times the this instance was iterated.</value>
        </member>
        <member name="P:Cuemon.Collections.Generic.PartitionerEnumerable`1.HasPartitions">
            <summary>
            Gets a value indicating whether this instance has partitions remaining to be iterated.
            </summary>
            <value><c>true</c> if this instance has partitions remaining to be iterated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Collections.Generic.PartitionerEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the partition of the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the partition of the collection.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.ReferenceComparer`1">
            <summary>
            Provides object hierarchy comparison.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReferenceComparer`1.Default">
            <summary>
            Returns a default comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReferenceComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y.
            </returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.CollectionDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/> interface tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Collections.Generic.CollectionDecoratorExtensions.AddRange``1(Cuemon.IDecorator{System.Collections.Generic.ICollection{``0}},``0[])">
            <summary>
            Adds the elements of the specified <paramref name="source"/> to the enclosed <see cref="T:System.Collections.Generic.ICollection`1"/> of the <paramref name="decorator"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{ICollection{T}}"/> to extend.</param>
            <param name="source">The sequence of elements that should be added to the enclosed <see cref="T:System.Collections.Generic.ICollection`1"/> of the <paramref name="decorator"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.CollectionDecoratorExtensions.AddRange``1(Cuemon.IDecorator{System.Collections.Generic.ICollection{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified <paramref name="source"/> to the enclosed <see cref="T:System.Collections.Generic.ICollection`1"/> of the <paramref name="decorator"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{ICollection{T}}"/> to extend.</param>
            <param name="source">The sequence of elements that should be added to the enclosed <see cref="T:System.Collections.Generic.ICollection`1"/> of the <paramref name="decorator"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Collections.Generic.DictionaryDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.GetValueOrDefault``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/> or <c>default</c> when the key does not exists in the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the value to get.</param>
            <returns>Either the value associated with the specified <paramref name="key"/> or <c>default(<typeparamref name="TValue"/>)</c> when the key does not exists.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="key"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.GetValueOrDefault``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0,System.Func{``1})">
            <summary>
            Gets the value associated with the specified <paramref name="key"/> or a default value through <paramref name="defaultProvider"/> when the key does not exists in the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultProvider">The function delegate that will provide a default value when the <paramref name="key"/> does not exists in the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.</param>
            <returns>Either the value associated with the specified <paramref name="key"/> or a default value through <paramref name="defaultProvider"/> when the key does not exists.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="key"/> cannot be null -or-
            <paramref name="defaultProvider"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.TryGetValueOrFallback``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0,System.Func{System.Collections.Generic.IEnumerable{``0},``0},``1@)">
            <summary>
            Gets the <paramref name="value"/> associated with the specified <paramref name="key"/> from the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the value to get.</param>
            <param name="fallbackKeySelector">The function delegate that will, as a fallback, resolve an alternate key from the specified <paramref name="key"/>.</param>
            <param name="value">When this method returns, contains the value associated with the specified <paramref name="key"/> or the alternate key resolved from <paramref name="fallbackKeySelector"/>, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/> contains an element with the specified <paramref name="key"/> or the alternate key resolved from <paramref name="fallbackKeySelector"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.ToEnumerable``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}})">
            <summary>
            Returns the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/> typed as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> sequence.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> equivalent sequence of the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.TryAdd``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0,``1,System.Func{System.Collections.Generic.IDictionary{``0,``1},System.Boolean})">
            <summary>
            Attempts to add the specified <paramref name="key"/> and <paramref name="value"/> to the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <param name="condition">The function delegate that specifies the condition for adding the element.</param>
            <returns><c>true</c> if the key/value pair was added to the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/> successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="key"/> cannot be null -or-
            <paramref name="condition"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.TryAdd``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Attempts to add the specified <paramref name="key"/> and <paramref name="value"/> to the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns><c>true</c> if the key/value pair was added to the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/> successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="key"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.AddOrUpdate``2(Cuemon.IDecorator{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Attempts to add or update an existing element with the provided <paramref name="key"/> to the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/> with the specified <paramref name="value"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="value">The value of the element to add or update.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="key"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryDecoratorExtensions.GetDepthIndex(Cuemon.IDecorator{System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}}},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the level of nesting of the enclosed <see cref="T:System.Collections.Generic.IDictionary`2"/> of the <paramref name="decorator"/>.
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="readerDepth">The value that provides the depth of the embedded reader.</param>
            <param name="index">The index to associate with a <paramref name="nesting"/>.</param>
            <param name="nesting">The level of nesting.</param>
            <returns>The index at the specified <paramref name="nesting"/>.</returns>
        </member>
        <member name="T:Cuemon.Collections.Specialized.DictionaryDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Collections.Specialized.DictionaryDecoratorExtensions.ToNameValueCollection(Cuemon.IDecorator{System.Collections.Generic.IDictionary{System.String,System.String[]}},System.Action{Cuemon.DelimitedStringOptions{System.String}})">
            <summary>
            Creates a <see cref="T:System.Collections.Specialized.NameValueCollection"/> from the enclosed <see cref="T:IDictionary{string,string[]}"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:DelimitedStringOptions{string}"/> which may be configured.</param>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that is equivalent to the enclosed <see cref="T:IDictionary{string,string[]}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Condition">
            <summary>
            Provide ways to verify conditions a generic way for countless scenarios using true/false propositions.
            </summary>
        </member>
        <member name="P:Cuemon.Condition.Query">
            <summary>
            Gets the singleton instance of the Condition functionality allowing for extensions methods like: <c>Condition.Query.IsTrue()</c>.
            </summary>
            <value>The singleton instance of the Condition functionality.</value>
        </member>
        <member name="M:Cuemon.Condition.IsEnum``1(System.String,System.Action{Cuemon.Text.EnumStringOptions})">
            <summary>
            Determines whether the specified <paramref name="value"/> is valid by attempting to construct an enumeration of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the enumeration to validate.</typeparam>
            <param name="value">The <see cref="T:System.String"/> containing the name or value used to attempt to construct an <see cref="T:System.Enum"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EnumStringOptions"/> which may be configured.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a valid enumeration; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsProtocolRelativeUrl(System.String,System.Action{Cuemon.Text.ProtocolRelativeUriStringOptions})">
            <summary>
            Determines whether the specified <paramref name="value"/> is valid by attempting to construct a URI.
            </summary>
            <param name="value">The <see cref="T:System.String"/> used to attempt to construct a <see cref="T:System.Uri"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.ProtocolRelativeUriStringOptions"/> which may be configured.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a protocol relative URI; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsUri(System.String,System.Action{Cuemon.Text.UriStringOptions})">
            <summary>
            Determines whether the specified <paramref name="value"/> is valid by attempting to construct a URI.
            </summary>
            <param name="value">The <see cref="T:System.String"/> used to attempt to construct a <see cref="T:System.Uri"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.UriStringOptions"/> which may be configured.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a valid URI; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.HasConsecutiveCharacters(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> contains at least one of the succession <paramref name="characters"/> of <paramref name="length"/>.
            </summary>
            <param name="value">The value to test for consecutive characters.</param>
            <param name="characters">The character to locate with the specified <paramref name="length"/>.</param>
            <param name="length">The number of characters in succession.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> contains at least one of the succession <paramref name="characters"/> of <paramref name="length"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.HasConsecutiveCharacters(System.String,System.Char,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> contains a succession <paramref name="character"/> of <paramref name="length"/>.
            </summary>
            <param name="value">The value to test for consecutive characters.</param>
            <param name="character">The characters to locate with the specified <paramref name="length"/>.</param>
            <param name="length">The number of characters in succession.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> contains a succession <paramref name="character"/> of <paramref name="length"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsBase64(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> matches a base-64 structure.
            </summary>
            <param name="value">The value to test for a Base64 structure.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> matches a base-64 structure; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsBinaryDigits(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> consists only of binary digits.
            </summary>
            <param name="value">The string to verify consist only of binary digits.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> consists only of binary digits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsEmailAddress(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> has a valid format of an email address.
            </summary>
            <param name="value">The string to verify has a valid format of an email address.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> has a valid format of an email address; otherwise, <c>false</c>.</returns>
            <remarks>
            In my search for the most comprehensive and up-to-date regular expression for email address validation, this was the article I choose to implement: http://blog.trojanhunter.com/2012/09/26/the-best-regex-to-validate-an-email-address/.
            </remarks>
        </member>
        <member name="M:Cuemon.Condition.IsGuid(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> has a valid format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The string to verify has a valid format of a <see cref="T:System.Guid"/>.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> has a format of a <see cref="T:System.Guid"/>; otherwise, <c>false</c>.</returns>
            <remarks>
            This implementation only evaluates for GUID formats of: <see cref="F:Cuemon.GuidFormats.D"/> | <see cref="F:Cuemon.GuidFormats.B"/> | <see cref="F:Cuemon.GuidFormats.P"/>, eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses.<br/>
            The reason not to include <see cref="F:Cuemon.GuidFormats.N"/>, eg. 32 digits is the possible unintended GUID result of a MD5 string representation.
            </remarks>
        </member>
        <member name="M:Cuemon.Condition.IsGuid(System.String,Cuemon.GuidFormats)">
            <summary>
            Determines whether the specified <paramref name="value"/> has a valid format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The string to verify has a valid format of a <see cref="T:System.Guid"/>.</param>
            <param name="format">A bitmask comprised of one or more <see cref="T:Cuemon.GuidFormats"/> that specify how the GUID parsing is conducted.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> has a format of a <see cref="T:System.Guid"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsNumeric(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Determines whether the specified value can be evaluated as a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns><c>true</c> if the specified value can be evaluated as a number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsDefault``1(``0)">
            <summary>
            Determines whether the specified <paramref name="value"/> has its initial default value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The object to verify has its initial default value.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> has its initial default value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsNotDefault``1(``0)">
            <summary>
            Determines whether the specified <paramref name="value"/> does not have its initial default value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The object to verify does not have its initial default value.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> does not have its initial default value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.AreEqual``1(``0,``0)">
            <summary>
            Determines whether the two specified <paramref name="x"/> and <paramref name="y"/> are equal by using the default equality operator from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> are equal to <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the two specified <paramref name="x"/> and <paramref name="y"/> are equal by using the equality operator.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <returns><c>true</c> if <paramref name="x"/> are equal to <paramref name="y"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Condition.AreNotEqual``1(``0,``0)">
            <summary>
            Determines whether the two specified <paramref name="x"/> and <paramref name="y"/> are different by using the default equality operator from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> are different from <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the two specified <paramref name="x"/> and <paramref name="y"/> are different by using the equality operator.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <returns><c>true</c> if <paramref name="x"/> are different from <paramref name="y"/>; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Condition.AreSame``1(``0,``0)">
            <summary>
            Determines whether the two specified <paramref name="x"/> object are of the same instance as the <paramref name="y"/> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> object are of the same instance as the <paramref name="y"/> object; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.AreNotSame``1(``0,``0)">
            <summary>
            Determines whether the two specified <paramref name="x"/> object are not of the same instance as the <paramref name="y"/> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> object are not of the same instance as the <paramref name="y"/> object; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsEmpty(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> is empty ("").
            </summary>
            <param name="value">The string to verify is empty.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> consist only of white-space characters.
            </summary>
            <param name="value">The string to verify consist only of white-space characters.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> consist only of white-space characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsTrue(System.Boolean)">
            <summary>
            Determines whether the specified <paramref name="value"/> is <c>true</c>.
            </summary>
            <param name="value">The value to verify is <c>true</c>.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsTrue(System.Boolean,System.Action)">
            <summary>
            Invokes the delegate <paramref name="expression"/> when value of <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="condition">When <c>true</c>, the <paramref name="expression"/> delegate is invoked.</param>
            <param name="expression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
        </member>
        <member name="M:Cuemon.Condition.IsFalse(System.Boolean)">
            <summary>
            Determines whether the specified <paramref name="value"/> is <c>false</c>.
            </summary>
            <param name="value">The value to verify is <c>false</c>.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is <c>false</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsFalse(System.Boolean,System.Action)">
            <summary>
            Invokes the delegate <paramref name="expression"/> when value of <paramref name="condition"/> is <c>false</c>.
            </summary>
            <param name="condition">When <c>false</c>, the <paramref name="expression"/> delegate is invoked.</param>
            <param name="expression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
        </member>
        <member name="M:Cuemon.Condition.IsHex(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> is hexadecimal.
            </summary>
            <param name="value">The string to verify is hexadecimal.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is hexadecimal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsHex(System.Char)">
            <summary>
            Determines whether the specified <paramref name="value"/> is hexadecimal.
            </summary>
            <param name="value">The character to verify is hexadecimal.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is hexadecimal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsNull``1(``0)">
            <summary>
            Determines whether the specified <paramref name="value"/> is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The object to verify is null.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsNotNull``1(``0)">
            <summary>
            Determines whether the specified <paramref name="value"/> is not null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The object to verify is not null.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is not null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsGreaterThan``1(``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> is greater than <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsLowerThan``1(``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is lower than <paramref name="y"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> is lower than <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsGreaterThanOrEqual``1(``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is greater than or equal to <paramref name="y"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> is greater than or equal to <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsLowerThanOrEqual``1(``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is lower than or equal to <paramref name="y"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="x"/> is lower than or equal to <paramref name="y"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsWithinRange``1(``0,``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is within range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The object to compare.</param>
            <param name="min">The minimum value of <paramref name="x"/>.</param>
            <param name="max">The maximum value of <paramref name="x"/>.</param>
            <returns><c>true</c> if <paramref name="x"/> is within range of <paramref name="min"/> and <paramref name="max"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsNotWithinRange``1(``0,``0,``0)">
            <summary>
            Determines whether the specified <paramref name="x"/> is outside the range of <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The object to compare.</param>
            <param name="min">The minimum value of <paramref name="x"/>.</param>
            <param name="max">The maximum value of <paramref name="x"/>.</param>
            <returns><c>true</c> if <paramref name="x"/> is outside the range of <paramref name="min"/> and <paramref name="max"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsPrime(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is a prime number.
            </summary>
            <param name="value">The positive integer to determine whether is a prime number.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a prime number; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> has a value smaller than 0.
            </exception>
        </member>
        <member name="M:Cuemon.Condition.IsEven(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is an even number.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is an even number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is an odd number.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is an odd number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsCountableSequence(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Determines whether the specified <paramref name="source"/> is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence).
            </summary>
            <param name="source">The value to test for a sequence of countable characters.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsCountableSequence(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Determines whether the specified <paramref name="source"/> is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence).
            </summary>
            <param name="source">The value to test for a sequence of countable characters.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> is a sequence of countable integrals (hence, integrals being either incremented or decremented with the same cardinality through out the sequence); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.IsCountableSequence(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence).
            </summary>
            <param name="value">The value to test for a sequence of countable characters.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a sequence of countable characters (hence, characters being either incremented or decremented with the same cardinality through out the sequence); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``1(System.Boolean,System.Func{``0},System.Func{``0})">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``2(System.Boolean,System.Func{``0,``1},System.Func{``0,``1},``0)">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg">The parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``3(System.Boolean,System.Func{``0,``1,``2},System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``4(System.Boolean,System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``5(System.Boolean,System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg4">The fourth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.TernaryIf``6(System.Boolean,System.Func{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Returns one of two values depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked and becomes the result; when <c>false</c>, the <paramref name="secondExpression"/> is invoked and becomes the result.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg4">The fourth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg5">The fifth parameter of the function delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <returns>The result of either function delegate <paramref name="firstExpression"/> or function delegate <paramref name="secondExpression"/>.</returns>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop(System.Boolean,System.Action,System.Action)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
        </member>
        <member name="M:Cuemon.Condition.FlipFlopAsync(System.Boolean,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The function delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop``1(System.Boolean,System.Action{``0},System.Action{``0},``0)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg">The parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop``2(System.Boolean,System.Action{``0,``1},System.Action{``0,``1},``0,``1)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop``3(System.Boolean,System.Action{``0,``1,``2},System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop``4(System.Boolean,System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg4">The fourth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
        </member>
        <member name="M:Cuemon.Condition.FlipFlop``5(System.Boolean,System.Action{``0,``1,``2,``3,``4},System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Invokes one of two expressions depending on the value of <paramref name="condition"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</typeparam>
            <param name="condition">When <c>true</c>, the <paramref name="firstExpression"/> is invoked; when <c>false</c>, the <paramref name="secondExpression"/> is invoked.</param>
            <param name="firstExpression">The delegate that is invoked when <paramref name="condition"/> is <c>true</c>.</param>
            <param name="secondExpression">The delegate that is invoked when <paramref name="condition"/> is <c>false</c>.</param>
            <param name="arg1">The first parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg2">The second parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg3">The third parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg4">The fourth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
            <param name="arg5">The fifth parameter of the delegates <paramref name="firstExpression"/> and <paramref name="secondExpression"/>.</param>
        </member>
        <member name="T:Cuemon.Configuration.Configurable`1">
            <summary>
            Provides a generic way to support the options pattern on a class level.
            </summary>
            <typeparam name="TOptions">The type of the configured options.</typeparam>
            <seealso cref="T:Cuemon.Configuration.IConfigurable`1" />
        </member>
        <member name="M:Cuemon.Configuration.Configurable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Configuration.Configurable`1"/> class.
            </summary>
            <param name="options">The configured options of this instance.</param>
        </member>
        <member name="P:Cuemon.Configuration.Configurable`1.Options">
            <summary>
            Gets the configured options of this instance.
            </summary>
            <value>The configured options of this instance.</value>
        </member>
        <member name="T:Cuemon.Configuration.IConfigurable`1">
            <summary>
            Provides a generic way to support the options pattern on a class level.
            </summary>
            <typeparam name="TOptions">The type of the configured options.</typeparam>
        </member>
        <member name="P:Cuemon.Configuration.IConfigurable`1.Options">
            <summary>
            Gets the configured options of this instance.
            </summary>
            <value>The configured options of this instance.</value>
        </member>
        <member name="T:Cuemon.Convertible">
            <summary>
            Provides a set of static methods, suitable for verifying integrity of data, that convert <see cref="T:System.IConvertible"/> implementations to and from a sequence of bytes.
            </summary>
        </member>
        <member name="F:Cuemon.Convertible.NullValue">
            <summary>
            A representation for a null value when converting to a <see cref="T:byte[]"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Convertible.RegisterConvertible``1(System.Func{``0,System.Byte[]})">
            <summary>
            Registers the specified <see cref="T:System.IConvertible"/> implementation of <typeparamref name="T"/> to make it globally known.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.IConvertible"/> implementation to use.</typeparam>
            <param name="converter">The function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its equivalent <see cref="T:byte[]"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="converter"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Convertible.ReverseBits8(System.Byte)">
            <summary>
            Reverse the bits of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The unsigned 8-bit integer to reverse bits on.</param>
            <returns>A <see cref="T:System.Byte"/> with the bits reversed.</returns>
        </member>
        <member name="M:Cuemon.Convertible.ReverseBits16(System.UInt16)">
            <summary>
            Reverse the bits of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The unsigned 16-bit integer to reverse bits on.</param>
            <returns>A <see cref="T:System.UInt16"/> with the bits reversed.</returns>
        </member>
        <member name="M:Cuemon.Convertible.ReverseBits32(System.UInt32)">
            <summary>
            Reverse the bits of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The unsigned 32-bit integer to reverse bits on.</param>
            <returns>A <see cref="T:System.UInt32"/> with the bits reversed.</returns>
        </member>
        <member name="M:Cuemon.Convertible.ReverseBits64(System.UInt64)">
            <summary>
            Reverse the bits of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The unsigned 64-bit integer to reverse bits on.</param>
            <returns>A <see cref="T:System.UInt64"/> with the bits reversed.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.IConvertible,System.Action{Cuemon.ConvertibleOptions})">
            <summary>
            Returns the specified <see cref="T:System.IConvertible"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.IConvertible"/> implementation to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="input"/> is an unknown implementation of <see cref="T:System.IConvertible"/>; please use RegisterConvertible to make a custom implementation globally known -or- use setup to add a custom implementation using ConvertibleOptions.Converters..Add.
            </exception>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Collections.Generic.IEnumerable{System.IConvertible},System.Action{Cuemon.ConvertibleOptions})">
            <summary>
            Returns the specified sequence of <see cref="T:System.IConvertible"/> as an aggregated <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions"/> which may be configured.</param>
            <returns>An aggregated <see cref="T:byte[]"/> that is otherwise equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Boolean,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Boolean"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Boolean"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Byte,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Byte"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Byte"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Char,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Char"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Char"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.DateTime)">
            <summary>
            Returns the specified <see cref="T:System.DateTime"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.DBNull)">
            <summary>
            Returns the specified <see cref="T:System.DBNull"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.DBNull"/> to convert.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Decimal)">
            <summary>
            Returns the specified <see cref="T:System.Decimal"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Decimal"/> to convert.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Double,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Double"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Double"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Int16,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Int16"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int16"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Int32,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Int32"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int32"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Int64,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Int64"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int64"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.SByte,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.SByte"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.SByte"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Single,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Single"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Single"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.UInt16,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.UInt16"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt16"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.UInt32,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.UInt32"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt32"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.UInt64,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.UInt64"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt64"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.String,System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Returns the specified <see cref="T:System.String"/> as its equivalent <see cref="T:byte[]"/> representation.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="P:Cuemon.Text.EncodingOptions.Preamble"/>.
            </exception>
            <remarks><see cref="T:Cuemon.Text.IEncodingOptions"/> will be initialized with <see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/> and <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.</remarks>
        </member>
        <member name="M:Cuemon.Convertible.GetBytes(System.Enum,System.Action{Cuemon.EndianOptions})">
            <summary>
            Returns the specified <see cref="T:System.Enum"/> as a <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:System.Enum"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that is equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Convertible.ToString(System.Byte[],System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Returns the specified <see cref="T:byte[]"/> as its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> that is equivalent to <paramref name="input"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="P:Cuemon.Text.EncodingOptions.Preamble"/>.
            </exception>
            <remarks><see cref="T:Cuemon.Text.IEncodingOptions"/> will be initialized with <see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/> and <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.</remarks>
        </member>
        <member name="M:Cuemon.Convertible.ReverseEndianness(System.Byte[],System.Action{Cuemon.EndianOptions})">
            <summary>
            Reverse the endianness of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to reverse.</param>
            <param name="setup">The <see cref="T:Cuemon.EndianOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> that, depending on the <paramref name="setup"/>, is either equal or a reversed value of <paramref name="input"/>.</returns>
        </member>
        <member name="T:Cuemon.ConvertibleConverterDictionary">
            <summary>
            Represents a collection of function delegates that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent.
            </summary>
        </member>
        <member name="M:Cuemon.ConvertibleConverterDictionary.Add``1(System.Func{``0,System.Byte[]})">
            <summary>
            Adds the function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent to the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type that implements <see cref="T:System.IConvertible"/>.</typeparam>
            <param name="converter">The function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent.</param>
            <returns>An <see cref="T:Cuemon.ConvertibleConverterDictionary"/> that can be used to further configure other converters.</returns>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> does not implement <see cref="T:System.IConvertible"/>.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertibleConverterDictionary.Add(System.Type,System.Func{System.IConvertible,System.Byte[]})">
            <summary>
            Adds the function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent to the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type that implements <see cref="T:System.IConvertible"/>.</param>
            <param name="converter">The function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent.</param>
            <returns>An <see cref="T:Cuemon.ConvertibleConverterDictionary"/> that can be used to further configure other converters.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="type"/> does not implement <see cref="T:System.IConvertible"/>.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertibleConverterDictionary.ContainsKey(System.Type)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns><c>true</c> if the dictionary contains an element that has the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.ConvertibleConverterDictionary.TryGetValue(System.Type,System.Func{System.IConvertible,System.Byte[]}@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the dictionary contains an element that has the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.ConvertibleConverterDictionary.Item(System.Type)">
            <summary>
            Gets the function delegate that converts an <see cref="T:System.IConvertible"/> implementation to its <see cref="T:byte[]"/> equivalent from the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type that implements <see cref="T:System.IConvertible"/>.</param>
            <returns>The function delegate associated with the specified <paramref name="type"/>; null if no association exists.</returns>
        </member>
        <member name="P:Cuemon.ConvertibleConverterDictionary.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the dictionary.
            </summary>
            <value>An enumerable collection that contains the keys in the dictionary.</value>
        </member>
        <member name="P:Cuemon.ConvertibleConverterDictionary.Values">
            <summary>
            Gets an enumerable collection that contains the values in the dictionary.
            </summary>
            <value>An enumerable collection that contains the values in the dictionary.</value>
        </member>
        <member name="P:Cuemon.ConvertibleConverterDictionary.Count">
            <summary>
            Gets the number of converters contained in this instance.
            </summary>
            <value>The number of converters contained in this instance.</value>
        </member>
        <member name="M:Cuemon.ConvertibleConverterDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Cuemon.ConvertibleOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Convertible"/>.
            </summary>
            <seealso cref="T:Cuemon.EndianOptions"/>
        </member>
        <member name="M:Cuemon.ConvertibleOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ConvertibleOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.ConvertibleOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.ConvertibleOptions.Converters"/></term>
                    <description><see cref="T:Cuemon.ConvertibleConverterDictionary"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.ConvertibleOptions.Converters">
            <summary>
            Gets the converters associated with this instance.
            </summary>
            <value>The converters associated with this instance.</value>
        </member>
        <member name="T:Cuemon.DataPair">
            <summary>
            Represents a generic way to provide information about arbitrary data.
            </summary>
        </member>
        <member name="M:Cuemon.DataPair.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DataPair"/> class.
            </summary>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
            <param name="typeOf">The type of the data pair.</param>
        </member>
        <member name="P:Cuemon.DataPair.Name">
            <summary>
            Gets the name of the data pair.
            </summary>
            <value>The name of the data pair.</value>
        </member>
        <member name="P:Cuemon.DataPair.Value">
            <summary>
            Gets the value of the data pair.
            </summary>
            <value>The value of the data pair.</value>
        </member>
        <member name="P:Cuemon.DataPair.HasValue">
            <summary>
            Gets a value indicating whether <see cref="P:Cuemon.DataPair.Value"/> is not null.
            </summary>
            <value><c>true</c> if <see cref="P:Cuemon.DataPair.Value"/> is not null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DataPair.Type">
            <summary>
            Gets the type of the data pair value.
            </summary>
            <value>The type of the data pair value.</value>
        </member>
        <member name="M:Cuemon.DataPair.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.DataPair`1">
            <summary>
            Represents a generic way to provide information about arbitrary data.
            </summary>
            <typeparam name="T">The type of the data value being represented by this instance.</typeparam>
        </member>
        <member name="M:Cuemon.DataPair`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DataPair" /> class.
            </summary>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
        </member>
        <member name="M:Cuemon.DataPair`1.#ctor(System.String,`0,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DataPair" /> class.
            </summary>
            <param name="name">The name of the data pair.</param>
            <param name="value">The value of the data pair.</param>
            <param name="typeOf">The type of the data pair.</param>
        </member>
        <member name="T:Cuemon.DateSpan">
            <summary>
            Represents a <see cref="T:System.DateTime"/> interval between two <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure with a default <see cref="T:System.DateTime"/> value set to <see cref="P:System.DateTime.Today"/>.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure with a default <see cref="F:Cuemon.DateSpan._calendar"/> value from the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> class.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="end">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime,System.DateTime,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="end">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="calendar">The <see cref="T:System.Globalization.Calendar"/> that applies to this <see cref="T:Cuemon.DateSpan"/>.</param>
        </member>
        <member name="M:Cuemon.DateSpan.GetWeeks">
            <summary>
            Calculates the number of weeks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>Calculates the number of weeks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="M:Cuemon.DateSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cuemon.DateSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.DateSpan.Equals(Cuemon.DateSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.DateSpan.op_Equality(Cuemon.DateSpan,Cuemon.DateSpan)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are equal.
            </summary>
            <param name="dateSpan1">The first date interval to compare.</param>
            <param name="dateSpan2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="dateSpan1"/> and <paramref name="dateSpan2"/> are equal; otherwise, false. </returns>
        </member>
        <member name="M:Cuemon.DateSpan.op_Inequality(Cuemon.DateSpan,Cuemon.DateSpan)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are not equal.
            </summary>
            <param name="dateSpan1">The first date interval to compare.</param>
            <param name="dateSpan2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="dateSpan1"/> and <paramref name="dateSpan2"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <see cref="P:System.DateTime.Today"/> for the last part of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="end">A string that specifies the ending date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <paramref name="end"/> of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="end">A string that specifies the ending date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> to resolve a <see cref="F:Cuemon.DateSpan._calendar"/> object from.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <paramref name="end"/> of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.ToString">
            <summary>
            Converts the value of the current <see cref="T:Cuemon.DateSpan"/> object to its equivalent string representation.
            </summary>
            <returns>
            The <see cref="T:System.String"/> representation of the current <see cref="T:Cuemon.DateSpan"/> value. 
            </returns>
            <remarks>The returned string has the following format: y*:MM:dd:hh:mm:ss.f*, where y* is the actual calculated years and f* is the actual calculated milliseconds.</remarks>
        </member>
        <member name="P:Cuemon.DateSpan.Days">
            <summary>
            Gets the number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalDays">
            <summary>
            Gets the total number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Hours">
            <summary>
            Gets the number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalHours">
            <summary>
            Gets the total number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Milliseconds">
            <summary>
            Gets the number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMilliseconds">
            <summary>
            Gets the total number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Minutes">
            <summary>
            Gets the number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMinutes">
            <summary>
            Gets the total number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Months">
            <summary>
            Gets the number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMonths">
            <summary>
            Gets the total number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Seconds">
            <summary>
            Gets the number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalSeconds">
            <summary>
            Gets the total number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Ticks">
            <summary>
            Gets the number of ticks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of ticks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Years">
            <summary>
            Gets the number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalYears">
            <summary>
            Gets the total number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="T:Cuemon.DateTimeFormatPattern">
            <summary>
            Defines the default pattern to use when formatting date- and time values.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortDate">
            <summary>
            Displays a date using the short-date format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongDate">
            <summary>
            Displays a date using the long-date format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortTime">
            <summary>
            Displays a time using the short-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongTime">
            <summary>
            Displays a time using the long-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortDateTime">
            <summary>
            Displays a date using the short-date format in conjunction with the short-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongDateTime">
            <summary>
            Displays a date using the long-date format in conjunction with the long-time format.
            </summary>
        </member>
        <member name="T:Cuemon.DateTimeRange">
            <summary>
            Represents a period of time between two <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Cuemon.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateTimeRange"/> struct.
            </summary>
            <param name="start">The start date of a time range.</param>
            <param name="end">The end date of a time range.</param>
        </member>
        <member name="M:Cuemon.DateTimeRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.DayPart">
            <summary>
            Represents a part of a day.
            The built-in parts of day supports a roughly way to determine whether it is; <see cref="P:Cuemon.DayPart.Night"/>, <see cref="P:Cuemon.DayPart.Morning"/>, <see cref="P:Cuemon.DayPart.Forenoon"/>, <see cref="P:Cuemon.DayPart.Afternoon"/> or <see cref="P:Cuemon.DayPart.Evening"/>.
            Keep in mind that there is no exact science for day parts; it is as much a cultural as it is a personal preference.
            </summary>
        </member>
        <member name="P:Cuemon.DayPart.Night">
            <summary>
            Gets the day part of a 24-hour period that approximates to Night.
            </summary>
            <value>The range of a 24-hour period that approximates to Night.</value>
        </member>
        <member name="P:Cuemon.DayPart.Morning">
            <summary>
            Gets the day part of a 24-hour period that approximates to Morning.
            </summary>
            <value>The range of a 24-hour period that approximates to Morning.</value>
        </member>
        <member name="P:Cuemon.DayPart.Forenoon">
            <summary>
            Gets the day part of a 24-hour period that approximates to Forenoon.
            </summary>
            <value>The range of a 24-hour period that approximates to Forenoon.</value>
        </member>
        <member name="P:Cuemon.DayPart.Afternoon">
            <summary>
            Gets the day part of a 24-hour period that approximates to Afternoon.
            </summary>
            <value>The range of a 24-hour period that approximates to Afternoon.</value>
        </member>
        <member name="P:Cuemon.DayPart.Evening">
            <summary>
            Gets the day part of a 24-hour period that approximates to Evening.
            </summary>
            <value>The range of a 24-hour period that approximates to Evening.</value>
        </member>
        <member name="P:Cuemon.DayPart.All">
            <summary>
            Gets the day parts of a 24-hour range of period.
            </summary>
            <value>The day parts of a 24-hour range of period.</value>
        </member>
        <member name="M:Cuemon.DayPart.#ctor(System.String,Cuemon.TimeRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DayPart"/> class.
            </summary>
            <param name="name">The name of the part of a day.</param>
            <param name="range">The time range to cover.</param>
        </member>
        <member name="P:Cuemon.DayPart.Name">
            <summary>
            Gets the name of a <see cref="T:Cuemon.DayPart"/>.
            </summary>
            <value>The name of a <see cref="T:Cuemon.DayPart"/>.</value>
        </member>
        <member name="P:Cuemon.DayPart.Range">
            <summary>
            Gets the approximate range that this <see cref="T:Cuemon.DayPart"/> represents.
            </summary>
            <value>The approximate range that this <see cref="T:Cuemon.DayPart"/> represents.</value>
        </member>
        <member name="M:Cuemon.DayPart.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.DecimalPrefix">
            <summary>
            Defines a decimal (metric) unit prefix for multiples and submultiples of measurement that refers strictly to powers of 10. This class cannot be inherited.
            </summary>
            <seealso cref="T:Cuemon.PrefixMultiple" />
        </member>
        <member name="P:Cuemon.DecimalPrefix.Yocto">
            <summary>
            Gets the decimal-submultiple prefix yocto (symbol 'y'), 10^-24 = 0.000000000000000000000001.
            </summary>
            <value>The decimal-submultiple prefix yocto (symbol 'y').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Zepto">
            <summary>
            Gets the decimal-submultiple prefix zepto (symbol 'z'), 10^-21 = 0.000000000000000000001.
            </summary>
            <value>The decimal-submultiple prefix zepto (symbol 'z').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Atto">
            <summary>
            Gets the decimal-submultiple prefix atto (symbol 'a'), 10^-18 = 0.000000000000000001.
            </summary>
            <value>The decimal-submultiple prefix atto (symbol 'a').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Femto">
            <summary>
            Gets the decimal-submultiple prefix femto (symbol 'f'), 10^-15 = 0.000000000000001.
            </summary>
            <value>The decimal-submultiple prefix femto (symbol 'f').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Pico">
            <summary>
            Gets the decimal-submultiple prefix pico (symbol 'f'), 10^-12 = 0.000000000001.
            </summary>
            <value>The decimal-submultiple prefix pico (symbol 'f').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Nano">
            <summary>
            Gets the decimal-submultiple prefix nano (symbol 'n'), 10^-9 = 0.000000001.
            </summary>
            <value>The decimal-submultiple prefix nano (symbol 'n').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Micro">
            <summary>
            Gets the decimal-submultiple prefix micro (symbol 'μ'), 10^-6 = 0.000001.
            </summary>
            <value>The decimal-submultiple prefix micro (symbol 'μ').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Milli">
            <summary>
            Gets the decimal-submultiple prefix milli (symbol 'μ'), 10^-3 = 0.001.
            </summary>
            <value>The decimal-submultiple prefix milli (symbol 'μ').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Centi">
            <summary>
            Gets the decimal-submultiple prefix centi (symbol 'c'), 10^-2 = 0.01.
            </summary>
            <value>The decimal-submultiple prefix centi (symbol 'c').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Deci">
            <summary>
            Gets the decimal-submultiple prefix deci (symbol 'd'), 10^-1 = 0.1.
            </summary>
            <value>The decimal-submultiple prefix deci (symbol 'd').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Deca">
            <summary>
            Gets the decimal-multiple prefix deca (symbol 'da'), 10^1 = 10.
            </summary>
            <value>The decimal-multiple prefix deca (symbol 'da').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Hecto">
            <summary>
            Gets the decimal-multiple prefix hecto (symbol 'h'), 10^2 = 100.
            </summary>
            <value>The decimal-multiple prefix hecto (symbol 'h').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Kilo">
            <summary>
            Gets the decimal-multiple prefix kilo (symbol 'k'), 10^3 = 1000.
            </summary>
            <value>The decimal-multiple prefix kilo (symbol 'k').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Mega">
            <summary>
            Gets the decimal-multiple prefix mega (symbol 'M'), 10^6 = 1000000.
            </summary>
            <value>The decimal-multiple prefix mega (symbol 'M').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Giga">
            <summary>
            Gets the decimal-multiple prefix giga (symbol 'G'), 10^9 = 1000000000.
            </summary>
            <value>The decimal-multiple prefix giga (symbol 'G').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Tera">
            <summary>
            Gets the decimal-multiple prefix tera (symbol 'T'), 10^12 = 1000000000000.
            </summary>
            <value>The decimal-multiple prefix tera (symbol 'T').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Peta">
            <summary>
            Gets the decimal-multiple prefix peta (symbol 'P'), 10^15 = 1000000000000000.
            </summary>
            <value>The decimal-multiple prefix peta (symbol 'P').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Exa">
            <summary>
            Gets the decimal-multiple prefix exa (symbol 'E'), 10^18 = 1000000000000000000.
            </summary>
            <value>The decimal-multiple prefix exa (symbol 'E').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Zetta">
            <summary>
            Gets the decimal-multiple prefix zetta (symbol 'Z'), 10^21 = 1000000000000000000000.
            </summary>
            <value>The decimal-multiple prefix zetta (symbol 'Z').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.Yotta">
            <summary>
            Gets the decimal-multiple prefix yotta (symbol 'Y'), 10^24 = 1000000000000000000000000.
            </summary>
            <value>The decimal-multiple prefix yotta (symbol 'Y').</value>
        </member>
        <member name="P:Cuemon.DecimalPrefix.MetricPrefixes">
            <summary>
            Gets the complete sequence of multiples and submultiples metric prefixes as specified by International System of Units (SI).
            </summary>
            <value>The complete sequence of multiples and submultiples metric prefixes as specified by International System of Units (SI).</value>
        </member>
        <member name="M:Cuemon.DecimalPrefix.#ctor(System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DecimalPrefix"/> struct.
            </summary>
            <param name="name">The name of the decimal prefix.</param>
            <param name="symbol">The symbol of the the decimal prefix.</param>
            <param name="exponent">The number that specifies a power.</param>
        </member>
        <member name="T:Cuemon.Decorator">
            <summary>
            Provides a way to dynamically enclose/wrap an object to support the decorator pattern.
            </summary>
        </member>
        <member name="M:Cuemon.Decorator.Enclose``1(``0,System.Boolean)">
            <summary>
            Encloses the specified <paramref name="inner"/> so that it can be extended without violating SRP.
            </summary>
            <typeparam name="T">The type of the <paramref name="inner"/> to decorate.</typeparam>
            <param name="inner">The type to decorate.</param>
            <param name="throwIfNull"><c>true</c> to throw an <see cref="T:System.ArgumentNullException"/> when <paramref name="inner"/> is null; <c>false</c> to allow <paramref name="inner"/> to be null. Default is <c>true</c>.</param>
            <returns>An instance of <see cref="T:Cuemon.Decorator`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inner"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Decorator.Syntactic``1">
            <summary>
            Syntactic sugar for the rare cases where retrieving properties exposed as methods is a necessity.
            </summary>
            <typeparam name="T">The type to decorate.</typeparam>
            <returns>An instance of <see cref="T:Cuemon.Decorator`1"/> where the <see cref="P:Cuemon.Decorator`1.Inner"/> defaults to <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Cuemon.Decorator`1">
            <summary>
            Provides a generic way to implement the decorator pattern.
            Implements the <see cref="T:Cuemon.IDecorator`1" />
            </summary>
            <typeparam name="T">The type of the inner decorated object.</typeparam>
            <seealso cref="T:Cuemon.IDecorator`1" />
        </member>
        <member name="M:Cuemon.Decorator`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Decorator`1"/> class.
            </summary>
            <param name="inner">The type to decorate.</param>
            <param name="throwIfNull"><c>true</c> to throw an <see cref="T:System.ArgumentNullException"/> when <paramref name="inner"/> is null; <c>false</c> to allow <paramref name="inner"/> to be null..</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inner"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.Decorator`1.Inner">
            <summary>
            Gets the inner object of this decorator.
            </summary>
            <value>The inner object of this decorator.</value>
        </member>
        <member name="T:Cuemon.DelimitedString">
            <summary>
            Provides a set of static methods to convert a sequence into a delimited string and break a delimited string into substrings.
            </summary>
        </member>
        <member name="M:Cuemon.DelimitedString.Create``1(System.Collections.Generic.IEnumerable{``0},System.Action{Cuemon.DelimitedStringOptions{``0}})">
            <summary>
            Creates a delimited string representation from the specified <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.DelimitedStringOptions`1"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> of delimited values that is a result of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.DelimitedString.Split(System.String,System.Action{Cuemon.DelimitedStringOptions})">
            <summary>
            Returns a <see cref="T:string[]"/> that contain the substrings of <paramref name="value"/> delimited by a <see cref="P:Cuemon.DelimitedStringOptions.Delimiter"/> that may be quoted by <see cref="P:Cuemon.DelimitedStringOptions.Qualifier"/>.
            </summary>
            <param name="value">The value containing substrings and delimiters.</param>
            <param name="setup">The <see cref="T:Cuemon.DelimitedStringOptions"/> which may be configured.</param>
            <returns>A <see cref="T:string[]"/> that contain the substrings of <paramref name="value"/> delimited by a <see cref="P:Cuemon.DelimitedStringOptions.Delimiter"/> and optionally surrounded within <see cref="P:Cuemon.DelimitedStringOptions.Qualifier"/>.</returns>
            <remarks>
            This method was inspired by two articles on StackOverflow @ http://stackoverflow.com/questions/2807536/split-string-in-c-sharp, https://stackoverflow.com/questions/3776458/split-a-comma-separated-string-with-both-quoted-and-unquoted-strings and https://stackoverflow.com/questions/6542996/how-to-split-csv-whose-columns-may-contain.
            The default implementation conforms with the RFC-4180 standard.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            An error occurred while splitting <paramref name="value"/> into substrings separated by <see cref="P:Cuemon.DelimitedStringOptions.Delimiter"/> and quoted with <see cref="P:Cuemon.DelimitedStringOptions.Qualifier"/>.
            This is typically related to data corruption, eg. a field has not been properly closed with the <see cref="P:Cuemon.DelimitedStringOptions.Qualifier"/> specified.
            </exception>
        </member>
        <member name="T:Cuemon.DelimitedStringOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.DelimitedString.Split(System.String,System.Action{Cuemon.DelimitedStringOptions})"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DelimitedStringOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DelimitedStringOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.DelimitedStringOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.DelimitedStringOptions.Delimiter"/></term>
                    <description>,</description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.DelimitedStringOptions.Qualifier"/></term>
                    <description>"</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.DelimitedStringOptions.Delimiter">
            <summary>
            Gets or sets the delimiter that separates the fields. Default is comma (,).
            </summary>
            <value>The delimiter that separates the fields.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="P:Cuemon.DelimitedStringOptions.Qualifier">
            <summary>
            Gets or sets the qualifier placed around each field to signify that it is the same field. Default is quotation mark (").
            </summary>
            <value>The qualifier placed around each field to signify that it is the same field.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="T:Cuemon.DelimitedStringOptions`1">
            <summary>
            Configuration options for <see cref="T:Cuemon.DelimitedString" />.
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
        </member>
        <member name="M:Cuemon.DelimitedStringOptions`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DelimitedStringOptions`1"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.DelimitedStringOptions`1"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.DelimitedStringOptions`1.Delimiter"/></term>
                    <description><c>,</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.DelimitedStringOptions`1.StringConverter"/></term>
                    <description><c>o => o.ToString()</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.DelimitedStringOptions`1.StringConverter">
            <summary>
            Gets or sets the function delegate that converts <typeparamref name="T"/> to a string representation.
            </summary>
            <value>The function delegate that converts <typeparamref name="T"/> to a string representation.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.DelimitedStringOptions`1.Delimiter">
            <summary>
            Gets or sets the delimiter specification.
            </summary>
            <value>The delimiter specification.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="T:Cuemon.Disposable">
            <summary>
            Provides a mechanism for releasing both managed and unmanaged resources with focus on the former.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Cuemon.Disposable.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Disposable"/> object is disposed.
            </summary>
            <value><c>true</c> if this <see cref="T:Cuemon.Disposable"/> object is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Disposable.OnDisposeManagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose"/> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)"/> having <c>disposing</c> set to <c>true</c> and <see cref="P:Cuemon.Disposable.Disposed"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Cuemon.Disposable.OnDisposeUnmanagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose"/> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)"/> and <see cref="P:Cuemon.Disposable.Disposed"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Cuemon.Disposable.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Cuemon.Disposable"/> object.
            </summary>
        </member>
        <member name="M:Cuemon.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Cuemon.Disposable"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cuemon.DisposableOptions">
            <summary>
            Configuration options for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DisposableOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DisposableOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.DisposableOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.DisposableOptions.LeaveOpen"/></term>
                    <description><c>false</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.DisposableOptions.LeaveOpen">
            <summary>
            Gets or sets a value indicating whether a disposable object should bypass the mechanism for releasing unmanaged resources. Default is <c>false</c>.
            </summary>
            <value><c>true</c> if a disposable object should bypass the mechanism for releasing unmanaged resources; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.Endianness">
            <summary>
            Defines the order in which a sequence of bytes are represented.
            </summary>
        </member>
        <member name="F:Cuemon.Endianness.BigEndian">
            <summary>
            The big endian format means that data is stored big end first. Many hash standards is represented this way.
            </summary>
        </member>
        <member name="F:Cuemon.Endianness.LittleEndian">
            <summary>
            The little endian format means that data is stored little end first. Most modern OS and hardware uses this.
            </summary>
        </member>
        <member name="T:Cuemon.EndianOptions">
            <summary>
            Configuration options for <see cref="T:System.BitConverter"/>.
            </summary>
        </member>
        <member name="M:Cuemon.EndianOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EndianOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.EndianOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.EndianOptions.ByteOrder"/></term>
                    <description><code>BitConverter.IsLittleEndian ? Endianness.LittleEndian : Endianness.BigEndian;</code></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.EndianOptions.ByteOrder">
            <summary>
            Gets or sets the endian byte order enumeration.
            </summary>
            <value>The byte order enumeration.</value>
        </member>
        <member name="T:Cuemon.Eradicate">
            <summary>
            Provides a set of static methods for eradicating different types of values or sequences of values.
            </summary>
            <seealso cref="T:Cuemon.Generate"/>
        </member>
        <member name="M:Cuemon.Eradicate.TrailingZeros(System.Byte[])">
            <summary>
            Eradicates trailing zero information (if any) from the specified set of <paramref name="bytes"/>.
            </summary>
            <param name="bytes">The <see cref="T:byte[]"/> to process.</param>
            <returns>A <see cref="T:byte[]"/> without trailing zeros.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bytes" /> must have a length larger than 1.
            </exception>
        </member>
        <member name="T:Cuemon.ExceptionCondition`1">
            <summary>
            Provides a fluent and generic way to setup a condition for raising an <see cref="T:System.Exception" />.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ExceptionCondition`1.IsTrue(System.Func{System.Boolean})">
            <summary>
            Indicates that the specified function delegate <paramref name="condition"/> must evaluate <c>true</c>.
            </summary>
            <param name="condition">The function delegate that determines if an <see cref="T:System.Exception"/> is thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionHandler`1"/> with the specified <paramref name="condition"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionCondition`1.IsTrue``1(Cuemon.TesterFunc{``0,System.Boolean})">
            <summary>
            Indicates that the specified function delegate <paramref name="condition"/> must evaluate <c>true</c>.
            </summary>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <param name="condition">The function delegate that determines if an <see cref="T:System.Exception"/> is thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionHandler`1"/> with the specified <paramref name="condition"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionCondition`1.IsFalse(System.Func{System.Boolean})">
            <summary>
            Indicates that the specified function delegate <paramref name="condition"/> must evaluate <c>false</c>.
            </summary>
            <param name="condition">The function delegate that determines if an <see cref="T:System.Exception"/> is thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionHandler`1"/> with the specified <paramref name="condition"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionCondition`1.IsFalse``1(Cuemon.TesterFunc{``0,System.Boolean})">
            <summary>
            Indicates that the specified function delegate <paramref name="condition"/> must evaluate <c>false</c>.
            </summary>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <param name="condition">The function delegate that determines if an <see cref="T:System.Exception"/> is thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionHandler`1"/> with the specified <paramref name="condition"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.ExceptionHandler`1">
            <summary>
            Provides a generic way to handle an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ExceptionHandler`1.Create(System.Func{`0})">
            <summary>
            Specifies the function delegate that determines the <see cref="T:System.Exception"/> to be thrown.
            </summary>
            <param name="handler">The function delegate that determines the <see cref="T:System.Exception"/> to be thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionInvoker`1"/> with the specified <paramref name="handler"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.ExceptionHandler`2">
            <summary>
            Provides a generic way to handle an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of a <see cref="T:Cuemon.TesterFunc`2"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ExceptionHandler`2.Create(System.Func{`1,`0})">
            <summary>
            Specifies the function delegate that determines the <see cref="T:System.Exception"/> to be thrown.
            </summary>
            <param name="handler">The function delegate that determines the <see cref="T:System.Exception"/> to be thrown.</param>
            <returns>An <see cref="T:Cuemon.ExceptionInvoker`1"/> with the specified <paramref name="handler"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.ExceptionInvoker`1">
            <summary>
            Provides a generic way to throw an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ExceptionInvoker`1.TryThrow">
            <summary>
            Determines whether an <see cref="T:System.Exception"/> of type <typeparamref name="TException"/> should be thrown.
            </summary>
        </member>
        <member name="T:Cuemon.ExceptionInvoker`2">
            <summary>
            Provides a generic way to throw an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of a <see cref="T:Cuemon.TesterFunc`2"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ExceptionInvoker`2.TryThrow">
            <summary>
            Determines whether an <see cref="T:System.Exception"/> of type <typeparamref name="TException"/> should be thrown.
            </summary>
        </member>
        <member name="T:Cuemon.ExceptionInsights">
            <summary>
            Provides a set of static methods for embedding environment specific insights to an exception.
            </summary>
        </member>
        <member name="F:Cuemon.ExceptionInsights.Key">
            <summary>
            The <see cref="F:Cuemon.ExceptionInsights.Key"/> used when applying insights to the <see cref="P:System.Exception.Data"/> dictionary.
            </summary>
        </member>
        <member name="M:Cuemon.ExceptionInsights.Embed``1(``0,System.Object[],Cuemon.SystemSnapshots)">
            <summary>
            Enriches and embed insights about an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="exception"/>.</typeparam>
            <param name="exception">The exception to enrich.</param>
            <param name="runtimeParameters">The runtime parameters of the method that threw the <paramref name="exception"/>.</param>
            <param name="snapshots">A bitwise combination of the enumeration values that specify which areas of a system to capture.</param>
            <returns>The provided <paramref name="exception"/> enriched with an embedded entry of insights.</returns>
        </member>
        <member name="M:Cuemon.ExceptionInsights.Embed``1(``0,System.Reflection.MethodBase,System.Object[],Cuemon.SystemSnapshots)">
            <summary>
            Enriches and embed insights about an <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="exception"/>.</typeparam>
            <param name="exception">The exception to enrich.</param>
            <param name="thrower">The method that threw the <paramref name="exception"/>.</param>
            <param name="runtimeParameters">The runtime parameters of the <paramref name="thrower"/>.</param>
            <param name="snapshots">A bitwise combination of the enumeration values that specify which areas of a system to capture.</param>
            <returns>The provided <paramref name="exception"/> enriched with an embedded entry of insights.</returns>
        </member>
        <member name="T:Cuemon.ByteArrayDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:byte[]"/> tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.ByteArrayDecoratorExtensions.ToEncodedString(Cuemon.IDecorator{System.Byte[]},System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Converts the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{byte[]}"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> that is equivalent to the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/>.</returns>
            <remarks><see cref="T:Cuemon.Text.EncodingOptions"/> will be initialized with <see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/> and <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.</remarks>
        </member>
        <member name="M:Cuemon.ByteArrayDecoratorExtensions.ToStream(Cuemon.IDecorator{System.Byte[]})">
            <summary>
            Converts the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:System.IO.Stream"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{byte[]}"/> to extend.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that is equivalent to the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.ByteArrayDecoratorExtensions.ToStreamAsync(Cuemon.IDecorator{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Converts the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:System.IO.Stream"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{byte[]}"/> to extend.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:System.IO.Stream"/> that is equivalent to the enclosed <see cref="T:byte[]"/> of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.CharDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Char"/> struct tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.CharDecoratorExtensions.ToEnumerable(Cuemon.IDecorator{System.Collections.Generic.IEnumerable{System.Char}})">
            <summary>
            Converts the enclosed <see cref="T:IEnumerable{char}"/> of the <paramref name="decorator"/> to its equivalent <see cref="T:IEnumerable{string}"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>An <see cref="T:IEnumerable{string}"/> equivalent to the enclosed <see cref="T:IEnumerable{char}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.CharDecoratorExtensions.ToStringEquivalent(Cuemon.IDecorator{System.Collections.Generic.IEnumerable{System.Char}})">
            <summary>
            Converts the enclosed <see cref="T:IEnumerable{char}"/> of the <paramref name="decorator"/> to its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:System.String"/> equivalent to the enclosed <see cref="T:IEnumerable{char}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.DateTimeDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.DateTime"/> struct tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="F:Cuemon.DateTimeDecoratorExtensions.UnixEpoch">
            <summary>
            A <see cref="T:System.DateTime"/> initialized to midnight, January 1st, 1970 in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="M:Cuemon.DateTimeDecoratorExtensions.GetUnixEpoch(Cuemon.IDecorator{System.DateTime})">
            <summary>
            Gets a <see cref="T:System.DateTime"/> initialized to midnight, January 1st, 1970 in Coordinated Universal Time (UTC).
            </summary>
            <param name="_">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A a <see cref="T:System.DateTime"/> initialized to midnight, January 1st, 1970 in Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="M:Cuemon.DateTimeDecoratorExtensions.ToUnixEpochTime(Cuemon.IDecorator{System.DateTime})">
            <summary>
            Converts the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/> to an equivalent UNIX Epoch time representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:System.Double"/> value that is equivalent to the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/>.</returns>
            <remarks>This implementation converts the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/> to an UTC representation ONLY if the <see cref="P:System.DateTime.Kind"/> equals <see cref="F:System.DateTimeKind.Local"/>.</remarks>
        </member>
        <member name="M:Cuemon.DateTimeDecoratorExtensions.ToUtcKind(Cuemon.IDecorator{System.DateTime})">
            <summary>
            Converts the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/> to a Coordinated Universal Time (UTC) representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A new <see cref="T:System.DateTime"/> value initialized to <see cref="F:System.DateTimeKind.Utc"/> that has the same number of ticks as the object represented by the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.DateTimeDecoratorExtensions.ToLocalKind(Cuemon.IDecorator{System.DateTime})">
            <summary>
            Converts the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/> to a local time representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A new <see cref="T:System.DateTime"/> value initialized to <see cref="F:System.DateTimeKind.Local"/> that has the same number of ticks as the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.DateTimeDecoratorExtensions.ToDefaultKind(Cuemon.IDecorator{System.DateTime})">
            <summary>
            Converts the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/> to a representation that is not specified as either local time or UTC.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A new <see cref="T:System.DateTime"/> value initialized to <see cref="F:System.DateTimeKind.Unspecified"/> that has the same number of ticks as the enclosed <see cref="T:System.DateTime"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.DoubleDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Double"/> struct tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.DoubleDecoratorExtensions.ToTimeSpan(Cuemon.IDecorator{System.Double},Cuemon.TimeUnit)">
            <summary>
            Converts the enclosed <see cref="T:System.Double"/> of the <paramref name="decorator"/> to its equivalent <see cref="T:System.TimeSpan"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="unitOfTime">One of the enumeration values that specifies the outcome of the conversion.</param>
            <returns>A <see cref="T:System.TimeSpan"/> that corresponds to the enclosed <see cref="T:System.Double"/> of the <paramref name="decorator"/> and <paramref name="unitOfTime"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.OverflowException">
            The enclosed <see cref="T:System.Double"/> of the <paramref name="decorator"/> paired with <paramref name="unitOfTime"/> is outside its valid range.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="unitOfTime"/> was outside its valid range.
            </exception>
        </member>
        <member name="T:Cuemon.ExceptionDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Exception"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.ExceptionDecoratorExtensions.Flatten(Cuemon.IDecorator{System.Exception})">
            <summary>
            Flattens any inner exceptions from the enclosed <see cref="T:System.Exception"/> of the <paramref name="decorator"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of exceptions.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence if no inner exception(s) was specified; otherwise any inner exception(s) chained to the enclosed <see cref="T:System.Exception"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <remarks>
            If any inner exceptions are referenced, this method will iterative flatten them all from the enclosed <see cref="T:System.Exception"/> of the <paramref name="decorator"/>.<br/>
            Should the enclosed <see cref="T:System.Exception"/> of the <paramref name="decorator"/> be of <see cref="T:System.AggregateException"/>, the return sequence of this method will be equal to the result of the InnerExceptions property after a call to <see cref="M:System.AggregateException.Flatten"/>.
            </remarks>
        </member>
        <member name="T:Cuemon.HierarchyDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:Cuemon.IHierarchy`1"/> interface tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseConvertibleFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.IConvertible"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.IConvertible"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseTimeSpanFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.TimeSpan"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseUriFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.Uri"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.Uri"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseDateTimeFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.DateTime"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseGuidFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.Guid"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.Guid"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseStringFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.String"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.String"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseDecimalFormatter(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}})">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <returns>A <see cref="T:System.Decimal"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseCollection(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}},System.Type)">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <param name="valueType">The type of the objects in the collection.</param>
            <returns>A <see cref="T:System.Collections.ICollection"/> of <paramref name="valueType"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.UseDictionary(Cuemon.IDecorator{Cuemon.IHierarchy{Cuemon.DataPair}},System.Type[])">
            <summary>
            A formatter implementation that resolves a <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{DataPair}}"/> to extend.</param>
            <param name="valueTypes">The value types that forms a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <returns>A <see cref="T:System.Collections.IDictionary"/> with <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <paramref name="valueTypes"/> from the enclosed <see cref="T:IHierarchy{DataPair}"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FindFirstInstance``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Returns the first node instance that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="P:Cuemon.IWrapper`1.Instance"/>  that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FindSingleInstance``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Returns the only node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node instance is found; this method throws an exception if more than one node is found.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="P:Cuemon.IWrapper`1.Instance"/> node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node instance is found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FindInstance``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Retrieves all node instances that match the conditions defined by the function delegate <paramref name="match"/>.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all node instances that match the conditions defined by the specified predicate, if found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FindFirst``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Returns the first node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FindSingle``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Returns the only node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found; this method throws an exception if more than one node is found.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node that match the conditions defined by the function delegate <paramref name="match"/>, or a default value if no node is found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.Find``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Retrieves all nodes that match the conditions defined by the function delegate <paramref name="match"/>.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all nodes that match the conditions defined by the specified predicate, if found.</returns>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.Replace``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Action{Cuemon.IHierarchy{``0},``0})">
            <summary>
            Replace the instance of the <paramref name="decorator"/> with a <paramref name="replacer"/> delegate.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="replacer">The delegate that will replace the wrapped instance of the <paramref name="decorator"/>.</param>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.ReplaceAll``1(Cuemon.IDecorator{System.Collections.Generic.IEnumerable{Cuemon.IHierarchy{``0}}},System.Action{Cuemon.IHierarchy{``0},``0})">
            <summary>
            Replace all instances of the <paramref name="decorator"/> with a <paramref name="replacer"/> delegate.
            </summary>
            <typeparam name="T">The type of the instance that these nodes represents.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IEnumerable{IHierarchy{T}}}"/> to extend.</param>
            <param name="replacer">The delegate that will replace all wrapped instances of the <paramref name="decorator"/>.</param>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.Root``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}})">
            <summary>
            Returns the root node of the specified <paramref name="decorator"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node that represents the root of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.AncestorsAndSelf``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}})">
            <summary>
            Gets all ancestors (parent, grandparent, etc.) and self of the specified <paramref name="decorator"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to ancestors and self of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.DescendantsAndSelf``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}})">
            <summary>
            Gets all descendants (children, grandchildren, etc.) anf self of the current <paramref name="decorator"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the descendants and self of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.SiblingsAndSelf``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}})">
            <summary>
            Gets all siblings and self after the current <paramref name="decorator"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the siblings and self of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.SiblingsAndSelfAt``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Int32)">
            <summary>
            Gets all siblings and self after the current <paramref name="decorator"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="depth">The depth in the hierarchical structure from where to locate the siblings and self nodes.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the siblings and self of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="depth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.NodeAt``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}},System.Int32)">
            <summary>
            Returns the node at the specified index of a hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <param name="index">The zero-based index at which a node should be retrieved in the hierarchical structure.</param>
            <returns>The node at the specified <paramref name="index"/> in the hierarchical structure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero - or - <paramref name="index"/> exceeded the count of nodes in the hierarchical structure.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyDecoratorExtensions.FlattenAll``1(Cuemon.IDecorator{Cuemon.IHierarchy{``0}})">
            <summary>
            Flattens the entirety of a hierarchical structure representation into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of nodes.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="decorator"/> in the hierarchical structure.</typeparam>
            <param name="decorator">The <see cref="T:IDecorator{IHierarchy{T}}"/> to extend.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of <see cref="T:Cuemon.IHierarchy`1"/> all nodes represented by the hierarchical structure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.IntegerDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/> and <see cref="T:System.Int64"/> structs tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.IntegerDecoratorExtensions.Max(Cuemon.IDecorator{System.Int32},System.Int32)">
            <summary>
            Returns the larger of two 32-bit signed integers.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="minimum">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter the enclosed <see cref="T:System.Int32"/> of the specified <paramref name="decorator"/> or <paramref name="minimum"/>, whichever is larger.</returns>
        </member>
        <member name="T:Cuemon.IO.StreamDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IO.Stream"/> class tailored to adhere the decorator pattern.
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.IO.StreamDecoratorExtensions.CopyStream(Cuemon.IDecorator{System.IO.Stream},System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Reads the bytes from the enclosed <see cref="T:System.IO.Stream"/> of the specified <paramref name="decorator"/> and writes them to the <paramref name="destination"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="destination">The <see cref="T:System.IO.Stream"/> to which the contents of the current stream will be copied.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 81920.</param>
            <param name="changePosition">if <c>true</c>, the enclosed <see cref="T:System.IO.Stream"/> of the specified <paramref name="decorator"/> will temporarily have its position changed to 0; otherwise the position is left untouched.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.IO.StreamDecoratorExtensions.InvokeToByteArray(Cuemon.IDecorator{System.IO.Stream},System.Int32,System.Boolean)">
            <summary>
            Converts the enclosed <see cref="T:System.IO.Stream"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:byte[]"/> representation. Not intended to be used directly from your code.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 81920.</param>
            <param name="leaveOpen">if <c>true</c>, the <see cref="T:System.IO.Stream"/> object is being left open; otherwise it is being closed and disposed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.ObjectDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Object"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.ObjectDecoratorExtensions.ChangeTypeOrDefault``1(Cuemon.IDecorator{System.Object},``0,System.Action{Cuemon.ObjectFormattingOptions})">
            <summary>
            Returns an <see cref="T:System.Object"/> of the specified <typeparamref name="T"/> whose value is equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/>.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="fallbackResult">The value to return when a conversion is not possible. Default is <c>default</c> of <typeparamref name="T"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.ObjectFormattingOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Object"/> of type <typeparamref name="T"/> equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/> when a conversion is possible; otherwise <paramref name="fallbackResult"/> is returned.</returns>
            <remarks>This method first checks if the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/> is compatible with <typeparamref name="T"/>; if incompatible the method continues with <see cref="M:Cuemon.ObjectDecoratorExtensions.ChangeType``1(Cuemon.IDecorator{System.Object},System.Action{Cuemon.ObjectFormattingOptions})"/> for the operation.</remarks>
        </member>
        <member name="M:Cuemon.ObjectDecoratorExtensions.ChangeType``1(Cuemon.IDecorator{System.Object},System.Action{Cuemon.ObjectFormattingOptions})">
            <summary>
            Returns an <see cref="T:System.Object"/> of the specified <typeparamref name="T"/> whose value is equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/>.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.ObjectFormattingOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Object"/> of type <typeparamref name="T"/> equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.AggregateException">
            The enclosed <see cref="T:System.Object"/> of <paramref name="decorator"/> could not be converted.
            </exception>
            <remarks>What differs from the <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> is, that this converter supports generics and enums. Fallback uses <see cref="T:System.ComponentModel.TypeDescriptor"/> and checks if the underlying <see cref="T:System.IFormatProvider"/> of <see cref="P:Cuemon.ObjectFormattingOptions.FormatProvider"/> is a <see cref="T:System.Globalization.CultureInfo"/>, then this will be used in the conversion together with <see cref="P:Cuemon.ObjectFormattingOptions.DescriptorContext"/>.</remarks>
            <seealso cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>
            <seealso cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/>
        </member>
        <member name="M:Cuemon.ObjectDecoratorExtensions.ChangeType(Cuemon.IDecorator{System.Object},System.Type,System.Action{Cuemon.ObjectFormattingOptions})">
            <summary>
            Returns an <see cref="T:System.Object"/> of a specified <paramref name="targetType"/> whose value is equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="targetType">The type of the object to return.</param>
            <param name="setup">The <see cref="T:Cuemon.ObjectFormattingOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Object"/> of type <paramref name="targetType"/> equivalent to the enclosed <see cref="T:System.Object"/> of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.AggregateException">
            The enclosed <see cref="T:System.Object"/> of <paramref name="decorator"/> could not be converted.
            </exception>
            <remarks>What differs from the <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> is, that this converter supports generics and enums. Fallback uses <see cref="T:System.ComponentModel.TypeDescriptor"/> and checks if the underlying <see cref="T:System.IFormatProvider"/> of <see cref="P:Cuemon.ObjectFormattingOptions.FormatProvider"/> is a <see cref="T:System.Globalization.CultureInfo"/>, then this will be used in the conversion together with <see cref="P:Cuemon.ObjectFormattingOptions.DescriptorContext"/>.</remarks>
            <seealso cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>
            <seealso cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/>
        </member>
        <member name="M:Cuemon.ObjectDecoratorExtensions.Adjust``1(Cuemon.IDecorator{``0},System.Func{``0,``0})">
            <summary>
            Adjust the enclosed <typeparamref name="T"/> of the <paramref name="decorator"/> with the function delegate <paramref name="tweaker"/>.
            </summary>
            <typeparam name="T">The type of the value to adjust.</typeparam>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="tweaker">The function delegate that will adjust the enclosed <typeparamref name="T"/> of the <paramref name="decorator"/>.</param>
            <returns>The enclosed <typeparamref name="T"/> of the <paramref name="decorator"/> in its original or adjusted form.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.PrefixMultipleDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:Cuemon.IPrefixMultiple"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.PrefixMultipleDecoratorExtensions.ApplyPrefix(Cuemon.IDecorator{Cuemon.IPrefixMultiple},Cuemon.IPrefixUnit,System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Converts the enclosed <see cref="T:Cuemon.IPrefixMultiple"/> of the <paramref name="decorator"/> to an <see cref="T:Cuemon.IPrefixUnit"/> implementation equivalent.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="unit">The unit of measurement that is used as a standard for measurement of the same kind of quantity.</param>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions"/> which may be configured.</param>
            <returns>An <see cref="T:Cuemon.IPrefixUnit"/> implementation.</returns>
        </member>
        <member name="T:Cuemon.Reflection.AssemblyDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.Assembly"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.IsDebugBuild(Cuemon.IDecorator{System.Reflection.Assembly})">
            <summary>
            Determines whether the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/> is a debug build.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/> is a debug build; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.GetTypes(Cuemon.IDecorator{System.Reflection.Assembly},System.String,System.Type)">
            <summary>
            Gets the types contained within the underlying <see cref="T:System.Reflection.Assembly"/> of this instance.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="namespaceFilter">The filter to limit the types by namespace.</param>
            <param name="typeFilter">The filter to limit the types by a specific type.</param>
            <returns>A sequence of <see cref="T:System.Type"/> elements, matching the applied filters, from the underlying <see cref="T:System.Reflection.Assembly"/> of this instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.GetAssemblyVersion(Cuemon.IDecorator{System.Reflection.Assembly})">
            <summary>
            Returns a <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the <see cref="T:System.Reflection.AssemblyVersionAttribute"/> of the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.GetFileVersion(Cuemon.IDecorator{System.Reflection.Assembly})">
            <summary>
            Returns a <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> of the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the file version of the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>; null if no <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> could be retrieved.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.GetProductVersion(Cuemon.IDecorator{System.Reflection.Assembly})">
            <summary>
            Returns a <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> of the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A <see cref="T:Cuemon.Reflection.VersionResult"/> that represents the product version of the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>; null if no <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> could be retrieved.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.AssemblyDecoratorExtensions.GetManifestResources(Cuemon.IDecorator{System.Reflection.Assembly},System.String,Cuemon.Reflection.ManifestResourceMatch)">
            <summary>
            Loads the embedded resources from the underlying <see cref="T:System.Reflection.Assembly"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="name">The case-sensitive name of the resource being requested.</param>
            <param name="match">The ruleset that defines the match to apply.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> that contains the result of <paramref name="match"/>.</returns>
            <remarks>The result returned can have null values if no resources were specified during compilation or if the resource is not visible to the caller.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="name"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be empty or consist only of white-space characters.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="match"/> was not in the range of valid values.
            </exception>
            <seealso cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)"/>
            <seealso cref="M:System.Reflection.Assembly.GetManifestResourceNames"/>
        </member>
        <member name="T:Cuemon.Reflection.MemberInfoDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.MemberInfo"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Reflection.MemberInfoDecoratorExtensions.HasAttribute(Cuemon.IDecorator{System.Reflection.MemberInfo},System.Type[])">
            <summary>
            Determines whether the underlying <see cref="T:System.Reflection.MemberInfo"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="attributeTypes"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="attributeTypes">The attribute types to be matched against.</param>
            <returns>
            	<c>true</c> if the underlying <see cref="T:System.Reflection.MemberInfo"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="attributeTypes"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="attributeTypes"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Reflection.MethodInfoDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.MethodInfo"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Reflection.MethodInfoDecoratorExtensions.IsOverridden(Cuemon.IDecorator{System.Reflection.MethodInfo})">
            <summary>
            Determines whether the underlying <see cref="T:System.Reflection.MethodInfo"/> of the <paramref name="decorator"/> has been overridden.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Reflection.MethodInfo"/> of the <paramref name="decorator"/> has been overridden; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Reflection.PropertyInfoDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.PropertyInfo"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.Reflection.PropertyInfoDecoratorExtensions.IsOverridden(Cuemon.IDecorator{System.Reflection.PropertyInfo})">
            <summary>
            Determines whether the underlying <see cref="T:System.Reflection.PropertyInfo"/> of the <paramref name="decorator"/> has been overridden.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Reflection.PropertyInfo"/> of the <paramref name="decorator"/> has been overridden; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.PropertyInfoDecoratorExtensions.IsAutoProperty(Cuemon.IDecorator{System.Reflection.PropertyInfo})">
            <summary>
            Determines whether the underlying <see cref="T:System.Reflection.PropertyInfo"/> of the <paramref name="decorator"/> is considered an automatic property implementation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Reflection.PropertyInfo"/> of the <paramref name="decorator"/> is considered an automatic property implementation; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Reflection.ActivatorFactory">
            <summary>
            Provides access to factory methods for creating instances of the specified generic type parameter.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``1(System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance"/> using the parameterless constructor.
            </summary>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``2(``0,System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance" /> using a constructor of one parameters.
            </summary>
            <typeparam name="T">The type of the parameter of the constructor.</typeparam>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="arg">The parameter of the constructor.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``3(``0,``1,System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance" /> using a constructor of two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter of the constructor.</typeparam>
            <typeparam name="T2">The type of the second parameter of the constructor.</typeparam>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="arg1">The first parameter of the constructor.</param>
            <param name="arg2">The second parameter of the constructor.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``4(``0,``1,``2,System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance" /> using a constructor of three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter of the constructor.</typeparam>
            <typeparam name="T2">The type of the second parameter of the constructor.</typeparam>
            <typeparam name="T3">The type of the third parameter of the constructor.</typeparam>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="arg1">The first parameter of the constructor.</param>
            <param name="arg2">The second parameter of the constructor.</param>
            <param name="arg3">The third parameter of the constructor.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``5(``0,``1,``2,``3,System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance" /> using a constructor of four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter of the constructor.</typeparam>
            <typeparam name="T2">The type of the second parameter of the constructor.</typeparam>
            <typeparam name="T3">The type of the third parameter of the constructor.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the constructor.</typeparam>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="arg1">The first parameter of the constructor.</param>
            <param name="arg2">The second parameter of the constructor.</param>
            <param name="arg3">The third parameter of the constructor.</param>
            <param name="arg4">The fourth parameter of the constructor.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="M:Cuemon.Reflection.ActivatorFactory.CreateInstance``6(``0,``1,``2,``3,``4,System.Action{Cuemon.Reflection.ActivatorOptions})">
            <summary>
            Creates an instance of <typeparamref name="TInstance" /> using a constructor of five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter of the constructor.</typeparam>
            <typeparam name="T2">The type of the second parameter of the constructor.</typeparam>
            <typeparam name="T3">The type of the third parameter of the constructor.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the constructor.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the constructor.</typeparam>
            <typeparam name="TInstance">The type to create.</typeparam>
            <param name="arg1">The first parameter of the constructor.</param>
            <param name="arg2">The second parameter of the constructor.</param>
            <param name="arg3">The third parameter of the constructor.</param>
            <param name="arg4">The fourth parameter of the constructor.</param>
            <param name="arg5">The fifth parameter of the constructor.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ActivatorOptions" /> which may be configured.</param>
            <returns>A reference to the newly created object.</returns>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
        </member>
        <member name="T:Cuemon.Reflection.ActivatorOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Reflection.ActivatorFactory"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.ActivatorOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.ActivatorOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Reflection.ActivatorOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Reflection.ActivatorOptions.Flags"/></term>
                    <description><c>BindingFlags.Instance | BindingFlags.Public</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Reflection.ActivatorOptions.Binder"/></term>
                    <description><see cref="P:System.Type.DefaultBinder"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Reflection.ActivatorOptions.Flags">
            <summary>
            Gets the binding constraint used for discovering a suitable constructor.
            </summary>
            <value>The binding constraint used for discovering a suitable constructor.</value>
        </member>
        <member name="P:Cuemon.Reflection.ActivatorOptions.Binder">
            <summary>
            Gets or sets the binder that uses <see cref="P:Cuemon.Reflection.ActivatorOptions.Flags"/> and the specified arguments to seek and identify the type constructor.
            </summary>
            <value>The binder that uses <see cref="P:Cuemon.Reflection.ActivatorOptions.Flags"/> and the specified arguments to seek and identify the type constructor.</value>
        </member>
        <member name="T:Cuemon.Reflection.ManifestResourceMatch">
            <summary>
            Specifies the way of finding and returning an embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ManifestResourceMatch.Name">
            <summary>
            Specifies an exact match on the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ManifestResourceMatch.ContainsName">
            <summary>
            Specifies a partial match on the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ManifestResourceMatch.Extension">
            <summary>
            Specifies an exact match on the file extension contained within the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ManifestResourceMatch.ContainsExtension">
            <summary>
            Specifies a partial match on the file extension contained within the file name of the embedded resource.
            </summary>
        </member>
        <member name="T:Cuemon.Reflection.MemberReflection">
            <summary>
            Provides a robust way specifying binding constraints for reflection based member searching.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.MemberReflection.Everything">
            <summary>
            Defines a binding constraint that allows searching all members of a given type.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.MemberReflection.op_Implicit(Cuemon.Reflection.MemberReflection)~System.Reflection.BindingFlags">
            <summary>
            Performs an implicit conversion from <see cref="T:Cuemon.Reflection.MemberReflection"/> to <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
            <param name="mr">The <see cref="T:Cuemon.Reflection.MemberReflection"/> to convert.</param>
            <returns>A <see cref="T:System.Reflection.BindingFlags"/> that is equivalent to <paramref name="mr"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MemberReflection.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MemberReflection"/> class.
            </summary>
            <param name="excludePrivate">if set to <c>true</c> non-public members are excluded from the binding constraint.</param>
            <param name="excludeStatic">if set to <c>true</c> static members are excluded from the binding constraint.</param>
            <param name="excludeInheritancePath">if set to <c>true</c> derived members of a type's inheritance path are excluded from the binding constraint.</param>
            <param name="excludePublic">if set to <c>true</c> public members are excluded from the binding constraint.</param>
        </member>
        <member name="M:Cuemon.Reflection.MemberReflection.#ctor(System.Action{Cuemon.Reflection.MemberReflectionOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MemberReflection"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Reflection.MemberReflectionOptions"/> which need to be configured.</param>
        </member>
        <member name="P:Cuemon.Reflection.MemberReflection.Flags">
            <summary>
            Gets the binding constraint of this instance.
            </summary>
            <value>The binding constraint of this instance.</value>
        </member>
        <member name="T:Cuemon.Reflection.MemberReflectionOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Reflection.MemberReflection"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.MemberReflectionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MemberReflectionOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Reflection.MemberReflectionOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Reflection.MemberReflectionOptions.ExcludeInheritancePath"/></term>
                    <description><c>false</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Reflection.MemberReflectionOptions.ExcludePrivate"/></term>
                    <description><c>false</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Reflection.MemberReflectionOptions.ExcludeStatic"/></term>
                    <description><c>false</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Reflection.MemberReflectionOptions.ExcludePublic"/></term>
                    <description><c>false</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Reflection.MemberReflectionOptions.ExcludeStatic">
            <summary>
            Gets or sets a value indicating whether static members are excluded from the binding constraint.
            </summary>
            <value><c>true</c> if static members are excluded from the binding constraint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MemberReflectionOptions.ExcludePrivate">
            <summary>
            Gets or sets a value indicating whether non-public members are excluded from the binding constraint.
            </summary>
            <value><c>true</c> if non-public members are excluded from the binding constraint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MemberReflectionOptions.ExcludeInheritancePath">
            <summary>
            Gets or sets a value indicating whether derived members of a type's inheritance path are excluded from the binding constraint.
            </summary>
            <value><c>true</c> if derived members of a type's inheritance path are excluded from the binding constraint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MemberReflectionOptions.ExcludePublic">
            <summary>
            Gets or sets a value indicating whether public members are excluded from the binding constraint.
            </summary>
            <value><c>true</c> if public members are excluded from the binding constraint; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.Reflection.MethodBaseOptions">
            <summary>
            Configuration options for <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.MethodBaseOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodBaseOptions"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Reflection.MethodBaseOptions.Flags">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.BindingFlags"/> that specifies how the member search is conducted.
            </summary>
            <value>The <see cref="T:System.Reflection.BindingFlags"/> that specifies how the member search is conducted.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodBaseOptions.Types">
            <summary>
            Gets or sets the types representing the number, order, and type of the parameters for the member to resolve.
            </summary>
            <value>The types representing the number, order, and type of the parameters for the member to resolve.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodBaseOptions.Comparison">
            <summary>
            Gets or sets the <see cref="T:System.StringComparison"/> rules to use when resolving a member name.
            </summary>
            <value>The <see cref="T:System.StringComparison"/> rules to use when resolving a member name.</value>
        </member>
        <member name="T:Cuemon.Reflection.MethodDescriptor">
            <summary>
            Provides information about a method, such as its name, parameters and whether its a property or method.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodDescriptor" /> class.
            </summary>
            <param name="method">The method to extract a signature for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.#ctor(System.Type,System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodDescriptor" /> class.
            </summary>
            <param name="caller">The class on which the <paramref name="method"/> resides.</param>
            <param name="method">The method to extract a signature for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.Caller">
            <summary>
            Gets the <see cref="T:System.Type"/> of the class where the <see cref="P:Cuemon.Reflection.MethodDescriptor.Method"/> is located.
            </summary>
            <value>The <see cref="T:System.Type"/> of the class where the <see cref="P:Cuemon.Reflection.MethodDescriptor.Method"/> is located.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.Method">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodBase"/> of this instance.
            </summary>
            <value>The <see cref="T:System.Reflection.MethodBase"/> of this instance.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.Parameters">
            <summary>
            Gets the parameter of the method.
            </summary>
            <value>A sequence of type <see cref="T:Cuemon.Reflection.ParameterSignature"/> containing information that matches the signature of the method.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.HasParameters">
            <summary>
            Gets a value indicating whether the method has parameters.
            </summary>
            <value><c>true</c> if the method has parameters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.IsProperty">
            <summary>
            Gets a value indicating whether the method is a property.
            </summary>
            <value><c>true</c> if the method is a property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodDescriptor.RuntimeArguments">
            <summary>
            Gets the runtime arguments, if any, that was associated with this instance.
            </summary>
            <value>The runtime arguments, if any, that was associated with this instance.</value>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.AppendRuntimeArguments(System.Object[])">
            <summary>
            Associates the specified <paramref name="arguments"/> to this instance.
            </summary>
            <param name="arguments">The runtime arguments to associate with this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.Create(System.Reflection.MethodBase)">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodDescriptor"/> object and automatically determines the type of the signature (be that method or property).
            </summary>
            <param name="method">The method to extract a signature for.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodDescriptor"/> object.</returns>
            <remarks>Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.MergeParameters(System.Object[])">
            <summary>
            Merges the <see cref="P:Cuemon.Reflection.MethodDescriptor.Parameters"/> signature of this instance with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <see cref="P:Cuemon.Reflection.MethodDescriptor.Parameters"/> signature of this instance and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.MergeParameters(Cuemon.Reflection.MethodDescriptor,System.Object[])">
            <summary>
            Merges the <paramref name="method"/> parameter signature with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="method">The method holding the parameter signature to merge with the runtime parameter values.</param>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <paramref name="method"/> parameter signature and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.MergeParameters(System.Collections.Generic.IEnumerable{Cuemon.Reflection.ParameterSignature},System.Object[])">
            <summary>
            Merges the <paramref name="parameters"/> signature with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="parameters">The parameter signature to merge with the runtime parameter values.</param>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <paramref name="parameters"/> signature and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the method signature.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the method signature.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodDescriptor.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the method signature.
            </summary>
            <param name="fullName">Specify <c>true</c> to use the fully qualified name of the <see cref="P:Cuemon.Reflection.MethodDescriptor.Caller"/>; otherwise, <c>false</c> for the simple name.</param>
            <returns>A <see cref="T:System.String" /> that represents the method signature.</returns>
            <remarks>
            The returned string has the following format: <br/>
            Method without parameters: [<see cref="P:Cuemon.Reflection.MethodDescriptor.Caller"/>].[<see cref="P:Cuemon.Reflection.MethodDescriptor.MethodName"/>]()<br/>
            Method with at least one or more parameter: [<see cref="P:Cuemon.Reflection.MethodDescriptor.Caller"/>].[<see cref="P:Cuemon.Reflection.MethodDescriptor.MethodName"/>]([<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterType"/>] [<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterName"/>])<br/><br/>
            Property: [<see cref="P:Cuemon.Reflection.MethodDescriptor.Caller"/>].[<see cref="P:Cuemon.Reflection.MethodDescriptor.MethodName"/>]<br/>
            Property with at least one indexer: [<see cref="P:Cuemon.Reflection.MethodDescriptor.Caller"/>].[<see cref="P:Cuemon.Reflection.MethodDescriptor.MethodName"/>][[<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterType"/>] [<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterName"/>]]
            </remarks>
        </member>
        <member name="T:Cuemon.Reflection.ObjectHierarchyOptions">
            <summary>
            Specifies options that is related to <see cref="T:Cuemon.Hierarchy"/> and <see cref="T:Cuemon.Runtime.Serialization.HierarchySerializer"/> operations.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.ObjectHierarchyOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.ObjectHierarchyOptions"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth to safely traverse an object hierarchy. Default is 10.
            </summary>
            <value>The maximum depth to safely traverse an object hierarchy.</value>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.MaxCircularCalls">
            <summary>
            Gets or sets the maximum amount of times an object is allowed to make circular calls. Default is 2.
            </summary>
            <value>The maximum amount of times an object is allowed to make circular calls.</value>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.SkipPropertyType">
            <summary>
            Gets or sets the function delegate that is invoked just before public properties is being iterated and whose return <see cref="T:System.Type"/> determine if the properties should be skipped or not.
            </summary>
            <value>A <see cref="T:System.Func`1"/> that determines if a given property <see cref="T:System.Type"/> should be skipped or not.</value>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.SkipProperty">
            <summary>
            Gets or sets the function delegate that is invoked every time a public property is iterated and whose <see cref="T:System.Reflection.PropertyInfo"/> determine if that property should be skipped or not.
            </summary>
            <value>A <see cref="T:System.Func`1"/> that determines if a given <see cref="T:System.Reflection.PropertyInfo"/> should be skipped or not.</value>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.HasCircularReference">
            <summary>
            Gets or sets the function delegate that is invoked when a property has a value and whose return value suggest a circular reference.
            </summary>
            <value>A <see cref="T:System.Func`1"/> that determines if an object is suggesting a circular reference.</value>
        </member>
        <member name="P:Cuemon.Reflection.ObjectHierarchyOptions.ValueResolver">
            <summary>
            Gets or sets the function delegate that is invoked when a property can be read and is of same type as the underlying <see cref="T:System.Type"/> of the source object.
            </summary>
            <value>A function delegate that is invoked when a property can be read and is of same type as the underlying <see cref="T:System.Type"/> of the source object.</value>
        </member>
        <member name="T:Cuemon.Reflection.ParameterSignature">
            <summary>
            Represent the signature of a parameter to a method, property or similar.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.ParameterSignature" /> class.
            </summary>
            <param name="parameterType">The type of the parameter.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameterType"/> is null or <br/>
            <paramref name="parameterName"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Reflection.ParameterSignature.ParameterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the parameter.
            </summary>
            <value>The <see cref="T:System.Type"/> of the parameter.</value>
        </member>
        <member name="P:Cuemon.Reflection.ParameterSignature.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.Parse(System.Reflection.MethodBase)">
            <summary>
            Extracts and converts the <see cref="T:System.Reflection.ParameterInfo"/> sequence to its <see cref="T:System.Collections.Generic.IEnumerable`1"/> equivalent from <see cref="M:System.Reflection.MethodBase.GetParameters"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/> to extract parameter information from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is equivalent to the <see cref="T:System.Reflection.ParameterInfo"/> sequence in <see cref="M:System.Reflection.MethodBase.GetParameters"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.Parse(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Converts the specified <see cref="T:System.Reflection.ParameterInfo" /> sequence to its <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent.
            </summary>
            <param name="parameters">A sequence of <see cref="T:System.Reflection.ParameterInfo"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that is equivalent to the <see cref="T:System.Reflection.ParameterInfo" /> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameters" /> is null.
            </exception>
        </member>
        <member name="T:Cuemon.Reflection.TypeNameOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.TypeDecoratorExtensions.ToFriendlyName(Cuemon.IDecorator{System.Type},System.Action{Cuemon.Reflection.TypeNameOptions})" />.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.TypeNameOptions.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Cuemon.Reflection.TypeNameOptions"/> class.
             </summary>
             <remarks>
             The following table shows the initial property values for an instance of <see cref="T:Cuemon.Reflection.TypeNameOptions"/>.
             <list type="table">
                 <listheader>
                     <term>Property</term>
                     <description>Initial Value</description>
                 </listheader>
                 <item>
                     <term><see cref="P:Cuemon.Reflection.TypeNameOptions.ExcludeGenericArguments"/></term>
                     <description><c>false</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.Reflection.TypeNameOptions.FullName"/></term>
                     <description><c>false</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.FormattingOptions`1.FormatProvider"/></term>
                     <description><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.Reflection.TypeNameOptions.FriendlyNameStringConverter"/></term>
                     <description><code>(type, provider, fullname) =>
            {
                var typeName = fullname ? type.FullName.ToString(provider) : type.Name.ToString(provider);
                var indexOfGraveAccent = typeName.IndexOf('`');
                return indexOfGraveAccent >= 0 ? typeName.Remove(indexOfGraveAccent) : typeName;
            };</code></description>
                 </item>
             </list>
             </remarks>
        </member>
        <member name="P:Cuemon.Reflection.TypeNameOptions.ExcludeGenericArguments">
            <summary>
            Gets or sets a value indicating whether to exclude generic arguments from a <see cref="T:System.Type"/>.
            </summary>
            <value><c>true</c> to exclude generic arguments from a <see cref="T:System.Type"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.TypeNameOptions.FullName">
            <summary>
            Gets or sets a value indicating whether to use the fully qualified name of a <see cref="T:System.Type"/>.
            </summary>
            <value><c>true</c> to use the fully qualified name of a <see cref="T:System.Type"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.TypeNameOptions.FriendlyNameStringConverter">
            <summary>
            Gets or sets the function delegate that convert a <see cref="T:System.Type"/> object into a human-readable string.
            </summary>
            <value>The function delegate that convert a <see cref="T:System.Type"/> object into a human-readable string.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Reflection.VersionResult">
            <summary>
            Represents different representations of a version scheme in a consistent way.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.VersionResult"/> class.
            </summary>
            <param name="alphanumericVersion">The <see cref="T:System.String"/> that represents a potential alphanumeric version.</param>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.VersionResult"/> class.
            </summary>
            <param name="version">The <see cref="T:System.Version"/> that represents a numerical version {major.minor.build.revision}.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="version"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.Reflection.VersionResult.AlphanumericVersion">
            <summary>
            Gets the alphanumeric version assigned to this instance.
            </summary>
            <value>The alphanumeric version assigned to this instance.</value>
        </member>
        <member name="P:Cuemon.Reflection.VersionResult.HasAlphanumericVersion">
            <summary>
            Gets a value indicating whether this instance has alphanumeric version assigned.
            </summary>
            <value><c>true</c> if this instance has alphanumeric version assigned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.VersionResult.Value">
            <summary>
            Gets the value of the version passed to this object.
            </summary>
            <value>The value of the version passed to this object.</value>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.IsSemanticVersion(System.String)">
            <summary>
            Determines whether this instance represents a semantic version.
            </summary>
            <param name="alphanumericVersion">The <see cref="T:System.String"/> that represents a potential alphanumeric version.</param>
            <returns><c>true</c> if this instance represents a semantic version; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.IsSemanticVersion">
            <summary>
            Determines whether this instance represents a semantic version.
            </summary>
            <returns><c>true</c> if this instance represents a semantic version; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.ToVersion">
            <summary>
            Converts this instance to an equivalent <see cref="T:System.Version"/> object.
            </summary>
            <returns>An equivalent <see cref="T:System.Version"/> object of this instance.</returns>
        </member>
        <member name="M:Cuemon.Reflection.VersionResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.StringDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.String"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToCasing(Cuemon.IDecorator{System.String},Cuemon.CasingMethod)">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to either lowercase, UPPERCASE, Title Case or unaltered.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="method">The method to use in the conversion.</param>
            <returns>A <see cref="T:System.String"/> that corresponds to the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> with the applied conversion <paramref name="method"/>.</returns>
            <remarks>Uses <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> for the conversion.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToCasing(Cuemon.IDecorator{System.String},Cuemon.CasingMethod,System.Globalization.CultureInfo)">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to either lowercase, UPPERCASE, Title Case or unaltered using the specified <paramref name="culture"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="method">The method to use in the conversion.</param>
            <param name="culture">The culture rules to apply the conversion.</param>
            <returns>A <see cref="T:System.String"/> that corresponds to the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> with the applied conversion <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="culture"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToByteArray(Cuemon.IDecorator{System.String},System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:byte[]"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:byte[]"/> containing the result of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="P:Cuemon.Text.EncodingOptions.Preamble"/>.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToEncodedString(Cuemon.IDecorator{System.String},System.Action{Cuemon.Text.FallbackEncodingOptions})">
            <summary>
            Encodes all the characters in the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to its encoded <see cref="T:System.String"/> variant.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.FallbackEncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> variant of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> that is encoded with <see cref="P:Cuemon.Text.FallbackEncodingOptions.TargetEncoding"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <remarks>The inspiration for this method was retrieved @ SO: https://stackoverflow.com/a/135473/175073.</remarks>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToAsciiEncodedString(Cuemon.IDecorator{System.String},System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Encodes all the characters in the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to its ASCII encoded variant.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> variant of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> that is ASCII encoded.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToStream(Cuemon.IDecorator{System.String},System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.IO.Stream"/> containing the result of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>.</returns>
            <remarks><see cref="T:Cuemon.Text.IEncodingOptions"/> will be initialized with <see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/> and <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="P:Cuemon.Text.EncodingOptions.Preamble"/>.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToStreamAsync(Cuemon.IDecorator{System.String},System.Action{Cuemon.Text.AsyncEncodingOptions})">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.AsyncEncodingOptions"/> which may be configured.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:System.IO.Stream"/> containing the result of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>.</returns>
            <remarks><see cref="T:Cuemon.Text.IEncodingOptions"/> will be initialized with <see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/> and <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="P:Cuemon.Text.EncodingOptions.Preamble"/>.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.ToUri(Cuemon.IDecorator{System.String},System.UriKind)">
            <summary>
            Converts the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> to its equivalent <see cref="T:System.Uri"/> representation.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="uriKind">Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate.</param>
            <returns>A <see cref="T:System.Uri"/> that corresponds to the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> and <paramref name="uriKind"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.StartsWith(Cuemon.IDecorator{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> matches at least one string in the specified sequence of <paramref name="strings"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="strings">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.StartsWith(Cuemon.IDecorator{System.String},System.StringComparison,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> matches at least one string in the specified sequence of <paramref name="strings"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="strings">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.StartsWith(Cuemon.IDecorator{System.String},System.String[])">
            <summary>
            Determines whether the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> matches at least one string in the specified sequence of <paramref name="strings"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="strings">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/>; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringDecoratorExtensions.StartsWith(Cuemon.IDecorator{System.String},System.StringComparison,System.String[])">
            <summary>
            Determines whether the beginning of the enclosed <see cref="T:System.String"/> of the specified <paramref name="decorator"/> matches at least one string in the specified sequence of <paramref name="strings"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="strings">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of this string; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="T:Cuemon.TypeDecoratorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Type"/> class tailored to adhere the decorator pattern.
            </summary>
            <seealso cref="T:Cuemon.IDecorator`1"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.GetRuntimePropertiesExceptOf``1(Cuemon.IDecorator{System.Type})">
            <summary>
            Retrieves a collection that represents all the properties defined on the enclosed <see cref="T:System.Type"/> of the <paramref name="decorator"/> except those defined on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to exclude properties on the enclosed <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</typeparam>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>A collection of properties for the enclosed <see cref="T:System.Type"/> of the <paramref name="decorator"/> except those defined on <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasTypes(Cuemon.IDecorator{System.Type},System.Type[])">
            <summary>
            Determines whether the enclosed <see cref="T:System.Type"/> of the <paramref name="decorator"/> contains one or more of the specified <paramref name="types"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="types">The types to be matched against.</param>
            <returns><c>true</c> if the enclosed <see cref="T:System.Type"/> of the <paramref name="decorator"/> contains one or more of the specified <paramref name="types"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="types"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasAttribute(Cuemon.IDecorator{System.Type},System.Type[])">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="attributeTypes"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="attributeTypes">The attribute types to be matched against.</param>
            <returns>
            	<c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="attributeTypes"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="attributeTypes"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasInterface(Cuemon.IDecorator{System.Type},System.Type[])">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="interfaceTypes"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="interfaceTypes">The interface types to be matched against.</param>
            <returns>
            	<c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements one or more of the specified <paramref name="interfaceTypes"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="interfaceTypes"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasKeyValuePairImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasEqualityComparerImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IEqualityComparer"/> or <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IEqualityComparer"/> or <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasComparableImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.IComparable"/> or <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.IComparable"/> or <see cref="T:System.IComparable`1"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasComparerImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IComparer"/> or <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IComparer"/> or <see cref="T:System.Collections.Generic.IComparer`1"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasEnumerableImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasDictionaryImplementation(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IDictionary"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> implements either <see cref="T:System.Collections.IDictionary"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.IsNullable(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> is a nullable <see cref="T:System.ValueType"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>
              <c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> is nullable; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasAnonymousCharacteristics(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> suggest an anonymous implementation (be that in a form of a type, delegate or lambda expression).
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> suggest an anonymous implementation; otherwise, <c>false</c>.</returns>
            <remarks>If you can avoid it, don't use this method. It is - to say the least - fragile.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasDefaultConstructor(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> has a default constructor.
            </summary>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> has a default constructor; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.GetInheritedTypes(Cuemon.IDecorator{System.Type})">
            <summary>
            Gets a collection (inherited-to-self) of inherited / ancestor types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the inherited types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.GetDerivedTypes(Cuemon.IDecorator{System.Type},System.Reflection.Assembly[])">
            <summary>
            Gets a collection (self-to-derived) of derived / descendant types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="assemblies">The assemblies to include in the search of derived types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the derived types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.GetHierarchyTypes(Cuemon.IDecorator{System.Type},System.Reflection.Assembly[])">
            <summary>
            Gets a collection (inherited-to-self-to-derived) of inherited / ancestor and derived / descendant types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="assemblies">The assemblies to include in the search of derived types.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a sorted (base-to-derived) collection of inherited and derived types from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.GetDefaultValue(Cuemon.IDecorator{System.Type})">
            <summary>
            Gets the default value from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <returns>The default value from the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</returns>
            <remarks>Usage is primarily intended for <c>struct</c>.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.IsComplex(Cuemon.IDecorator{System.Type})">
            <summary>
            Determines whether the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> is considered complex in its nature.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <returns><c>true</c> if the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/> is considered complex in its nature; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.ToFriendlyName(Cuemon.IDecorator{System.Type},System.Action{Cuemon.Reflection.TypeNameOptions})">
            <summary>
            Returns a human-readable <see cref="T:System.String"/> that represents the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.TypeNameOptions"/> which may be configured.</param>
            <returns>A human readable <see cref="T:System.String"/> that represents the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.HasCircularReference(Cuemon.IDecorator{System.Type},System.Object,System.Int32,System.Func{System.Object,System.Reflection.PropertyInfo,System.Object})">
            <summary>
            Determines whether the specified <paramref name="source"/> (which type must be the same as the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>) has a circular reference.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="source">The source to check for circular reference.</param>
            <param name="maxDepth">The maximum depth to traverse of <paramref name="source"/>.</param>
            <param name="valueResolver">The function delegate that is invoked when a property can be read and is of same type as the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> has a circular reference; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source"/> has a different type than the underlying type of <paramref name="decorator"/>.
            </exception>
        </member>
        <member name="M:Cuemon.TypeDecoratorExtensions.MatchMember(Cuemon.IDecorator{System.Type},System.String,System.Action{Cuemon.Reflection.MethodBaseOptions})">
            <summary>
            Conduct a search for <paramref name="memberName"/> using the specified <paramref name="setup"/> on the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.
            </summary>
            <param name="decorator">The <see cref="T:Cuemon.IDecorator`1"/> to extend.</param>
            <param name="memberName">The name of the member on the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.MethodBaseOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Reflection.MethodBase"/> object representing the method that matches the specified requirements, if found on the underlying <see cref="T:System.Type"/> of the <paramref name="decorator"/>; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="decorator"/> cannot be null -or-
            <paramref name="memberName"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="memberName"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="T:Cuemon.FinalizeDisposable">
            <summary>
            Provides a mechanism for releasing both managed and unmanaged resources with focus on the latter.
            Implements the <see cref="T:Cuemon.Disposable" />
            </summary>
            <seealso cref="T:Cuemon.Disposable" />
        </member>
        <member name="M:Cuemon.FinalizeDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.FinalizeDisposable"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.FinalizeDisposable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Cuemon.FinalizeDisposable"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.FinalizeDisposable.OnDisposeManagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> having <c>disposing</c> set to <c>true</c> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Cuemon.FinalizeDisposable.OnDisposeUnmanagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
        <member name="T:Cuemon.FormattingOptions`1">
            <summary>
            Configuration options for <see cref="T:System.IFormatProvider"/>.
            </summary>
        </member>
        <member name="M:Cuemon.FormattingOptions`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.FormattingOptions`1"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.FormattingOptions`1.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:System.IFormatProvider"/> that provides a mechanism for retrieving an object to control formatting.
            </summary>
            <value>The <see cref="T:System.IFormatProvider"/> that provides a mechanism for retrieving an object to control formatting.</value>
        </member>
        <member name="T:Cuemon.FuncFactory">
            <summary>
            Provides access to factory methods for creating <see cref="T:Cuemon.FuncFactory`2"/> instances that encapsulate a function delegate with a variable amount of generic arguments.
            </summary>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``1(System.Func{``0})">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/>.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``2(System.Func{``0,``1},``0)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and one generic argument.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg">The parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and one generic argument.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and two generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and two generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and three generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and three generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and four generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and four generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and five generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and five generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and six generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and six generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and seven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and seven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and eight generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and eight generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and nine generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and nine generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and ten generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and ten generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and eleven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and eleven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and twelfth generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and twelfth generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and thirteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and thirteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and fourteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and fourteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and fifteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and fifteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Create``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Creates a new <see cref="T:Cuemon.FuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and sixteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.FuncFactory`2"/> object initialized with the specified <paramref name="method"/> and sixteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory.Invoke``2(System.Func{``0,``1},``0)">
            <summary>
            Invokes the specified delegate <paramref name="method" /> with a n-<paramref name="tuple" /> argument.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method" />.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method" />.</param>
            <returns>The result of the the function delegate <paramref name="method"/>.</returns>
        </member>
        <member name="T:Cuemon.FuncFactory`2">
            <summary>
            Provides an easy way of invoking an <see cref="T:System.Func`1" /> function delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.FuncFactory`2.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.FuncFactory`2.#ctor(System.Func{`0,`1},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.FuncFactory`2"/> class.
            </summary>
            <param name="method">The function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.FuncFactory`2.#ctor(System.Func{`0,`1},`0,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.FuncFactory`2"/> class.
            </summary>
            <param name="method">The function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="originalDelegate">The original delegate wrapped by <paramref name="method"/>.</param>
        </member>
        <member name="P:Cuemon.FuncFactory`2.Method">
            <summary>
            Gets the function delegate to invoke.
            </summary>
            <value>The function delegate to invoke.</value>
        </member>
        <member name="M:Cuemon.FuncFactory`2.ExecuteMethod">
            <summary>
            Executes the function delegate associated with this instance.
            </summary>
            <returns>The result of the the function delegate associated with this instance.</returns>
        </member>
        <member name="M:Cuemon.FuncFactory`2.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.FuncFactory`2"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.FuncFactory`2"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Generate">
            <summary>
            Provides a set of static methods for generating different types of values or sequences of values.
            </summary>
            <seealso cref="T:Cuemon.Eradicate"/>
        </member>
        <member name="M:Cuemon.Generate.ObjectPortrayal(System.Object,System.Action{Cuemon.ObjectPortrayalOptions})">
            <summary>
            Generates a portrayal of the specified <paramref name="instance"/> that might contain information about the instance state.
            </summary>
            <param name="instance">The instance of an <see cref="T:System.Object"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.ObjectPortrayalOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.String"/> that represents the specified <paramref name="instance"/>.</returns>
            <remarks>
            When determining the representation of the specified <paramref name="instance"/>, these default rules applies:
            1: if the <see cref="M:System.Object.ToString"/> method has been overridden, any further processing is skipped (the assumption is, that a custom representation is already in place)
            2: any public properties having index parameters is skipped
            3: any public properties is appended to the result if <see cref="M:System.Object.ToString"/> has not been overridden
            Note: do not call this method from an overridden ToString(..) method without setting <see cref="P:Cuemon.ObjectPortrayalOptions.BypassOverrideCheck"/> to <c>true</c>; otherwise a <see cref="T:System.StackOverflowException"/> will occur.
            </remarks>
        </member>
        <member name="M:Cuemon.Generate.RangeOf``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Generates a sequence of <typeparamref name="T"/> within a specified range.
            </summary>
            <typeparam name="T">The type of the elements to return.</typeparam>
            <param name="count">The number of <typeparamref name="T"/> to generate.</param>
            <param name="generator">The function delegate that will resolve the instance of <typeparamref name="T"/>; the parameter passed to the delegate represents the index (zero-based) of the element to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of <typeparamref name="T"/> elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:Cuemon.Generate.RandomNumber(System.Int32)">
            <summary>
            Generates a random integer that is within a specified range.
            </summary>
            <param name="maximumExclusive">The exclusive upper bound of the random number returned. <paramref name="maximumExclusive"/> must be greater than or equal to 0.</param>
            <returns>
            A 32-bit signed integer greater than or equal to 0 and less than <paramref name="maximumExclusive"/>; that is, the range of return values includes 0 but not <paramref name="maximumExclusive"/>.
            If 0 equals <paramref name="maximumExclusive"/>, 0 is returned.
            </returns>
        </member>
        <member name="M:Cuemon.Generate.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates a random integer that is within a specified range.
            </summary>
            <param name="minimumInclusive">The inclusive lower bound of the random number returned.</param>
            <param name="maximumExclusive">The exclusive upper bound of the random number returned. <paramref name="maximumExclusive"/> must be greater than or equal to <paramref name="minimumInclusive"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minimumInclusive"/> and less than <paramref name="maximumExclusive"/>; that is, the range of return values includes <paramref name="minimumInclusive"/> but not <paramref name="maximumExclusive"/>.
            If <paramref name="minimumInclusive"/> equals <paramref name="maximumExclusive"/>, <paramref name="minimumInclusive"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minimumInclusive" /> is greater than <paramref name="maximumExclusive"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Generate.FixedString(System.Char,System.Int32)">
            <summary>
            Generates a string from the specified Unicode character repeated until the specified length.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="count">The number of times <paramref name="c"/> occurs.</param>
            <returns>A <see cref="T:System.String"/> filled with the specified <paramref name="c"/> until the specified <paramref name="count"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Generate.RandomString(System.Int32)">
            <summary>
            Generates a random string with the specified length using values of <see cref="F:Cuemon.Alphanumeric.LettersAndNumbers"/>.
            </summary>
            <param name="length">The length of the random string to generate.</param>
            <returns>A random string from the values of <see cref="F:Cuemon.Alphanumeric.LettersAndNumbers"/>.</returns>
        </member>
        <member name="M:Cuemon.Generate.RandomString(System.Int32,System.String[])">
            <summary>
            Generates a random string with the specified length from the provided values.
            </summary>
            <param name="length">The length of the random string to generate.</param>
            <param name="values">The values to use in the randomization process.</param>
            <returns>A random string from the values provided.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="values"/> contains no elements.
            </exception>
        </member>
        <member name="M:Cuemon.Generate.HashCode32(System.IConvertible[])">
            <summary>
            Computes a suitable hash code from the variable number of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A variable number of objects implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 32-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
        </member>
        <member name="M:Cuemon.Generate.HashCode32(System.Collections.Generic.IEnumerable{System.IConvertible})">
            <summary>
            Computes a suitable hash code from the specified sequence of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A sequence of objects implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 32-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
        </member>
        <member name="M:Cuemon.Generate.HashCode64(System.IConvertible[])">
            <summary>
            Computes a suitable hash code from the variable number of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A variable number of objects implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 64-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
        </member>
        <member name="M:Cuemon.Generate.HashCode64(System.Collections.Generic.IEnumerable{System.IConvertible})">
            <summary>
            Computes a suitable hash code from the specified sequence of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A sequence of objects implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 64-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
        </member>
        <member name="T:Cuemon.Globalization.ResourceAttribute">
            <summary>
            Provides a generic way to support localization on attribute decorated methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Cuemon.Globalization.ResourceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Globalization.ResourceAttribute"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.ResourceAttribute.ResourceType">
            <summary>
            Gets or sets the type that contains the resources for looking up localized strings.
            </summary>
            <value>The type that contains the resources for looking up localized strings.</value>
        </member>
        <member name="M:Cuemon.Globalization.ResourceAttribute.GetString(System.String)">
            <summary>
            Returns the value of the specified string resource.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <returns>The value of the resource localized for the callers current UI culture, or <c>null</c> if <paramref name="name"/> cannot be found on the <see cref="P:Cuemon.Globalization.ResourceAttribute.ResourceType"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            You must specify a <see cref="P:Cuemon.Globalization.ResourceAttribute.ResourceType"/> to perform the actual lookup of localized strings.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="P:Cuemon.Globalization.ResourceAttribute.ResourceType"/> does not contain a resource with the specified <paramref name="name"/>.
            </exception>
        </member>
        <member name="T:Cuemon.Globalization.World">
            <summary>
            This static class is designed to make <see cref="N:System.Globalization"/> operations easier to work with.
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.World.Regions">
            <summary>
            Gets the by .NET specific regions of the world.
            </summary>
            <value>The .NET specific regions of the world.</value>
        </member>
        <member name="M:Cuemon.Globalization.World.GetCultures(System.Globalization.RegionInfo)">
            <summary>
            Resolves a sequence of related <see cref="T:System.Globalization.CultureInfo"/> objects for the specified <paramref name="region"/>.
            </summary>
            <param name="region">The region to resolve a sequence of <see cref="T:System.Globalization.CultureInfo"/> objects from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of <see cref="T:System.Globalization.CultureInfo"/> objects.</returns>
        </member>
        <member name="T:Cuemon.GuidFormats">
            <summary>
            Specifies allowed GUID formats in parsing related methods.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.N">
            <summary>
            Specified the number format (N) which consist of 32 digits, eg. 12345678123412341234123456789abc.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.D">
            <summary>
            Specified the digit format (D) which consist of 32 digits separated by hyphens, eg. 12345678-1234-1234-1234-123456789abc.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.B">
            <summary>
            Specified the brace format (B) which consist of 32 digits separated by hyphens, enclosed in brackets, eg. {12345678-1234-1234-1234-123456789abc}.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.P">
            <summary>
            Specified the parenthesis format (P) which consist of 32 digits separated by hyphens, enclosed in parentheses, eg. (12345678-1234-1234-1234-123456789abc).
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.X">
            <summary>
            Specified four hexadecimal values enclosed in braces (X) where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.Any">
            <summary>
            Specified any of the supported GUID formats (N,D,B,P,X).
            </summary>
        </member>
        <member name="T:Cuemon.Hierarchy`1">
            <summary>
            Represents a way to expose a node of a hierarchical structure, including the node object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object represented in the hierarchical structure.</typeparam>
        </member>
        <member name="M:Cuemon.Hierarchy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Hierarchy`1" /> class.
            </summary>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Depth">
            <summary>
            Gets the current depth of the node in the hierarchical structure.
            </summary>
            <value>The current depth of the in the hierarchical structure.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Index">
            <summary>
            Gets the zero-based index of the current node that this hierarchical structure represents.
            </summary>
            <value>The zero-based index of the current node that this hierarchical structure represents.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.HasParent">
            <summary>
            Gets a value indicating whether this instance has a parent.
            </summary>
            <value><c>true</c> if this instance has a parent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.HasChildren">
            <summary>
            Gets a value indicating whether this instance has any children.
            </summary>
            <value><c>true</c> if this instance has any children; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
            <value>The node at the specified index.</value>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Replace(`0)">
            <summary>
            Allows for the instance on the current node to be replaced with a new <paramref name="instance" />.
            </summary>
            <param name="instance">The new instance to replace the original with.</param>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Replace(`0,System.Type)">
            <summary>
            Allows for the instance on the current node to be replaced with a new <paramref name="instance" />.
            </summary>
            <param name="instance">The new instance to replace the original with.</param>
            <param name="instanceType">The type of the new instance.</param>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Type)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="instanceType">The type of <paramref name="instance"/>.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="instanceType">The type of <paramref name="instance"/>.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetPath">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <returns>A <see cref="T:System.String" /> that identifies the hierarchical path relative to the current node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetPath(System.Func{Cuemon.IHierarchy{`0},System.String})">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <param name="pathResolver">The function delegate path resolver.</param>
            <returns>A <see cref="T:System.String" /> that identifies the hierarchical path relative to the current node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetChildren">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetParent">
            <summary>
            Gets the parent node of the current node in the hierarchical structure.
            </summary>
            <returns>The parent node of the current node in the hierarchical structure.</returns>
        </member>
        <member name="T:Cuemon.Hierarchy">
            <summary>
            Provides a set of static methods for hierarchy releated operations.
            </summary>
        </member>
        <member name="M:Cuemon.Hierarchy.Find``1(Cuemon.IHierarchy{``0},System.Func{Cuemon.IHierarchy{``0},System.Boolean})">
            <summary>
            Retrieves all nodes that match the conditions defined by the function delegate <paramref name="match"/>.
            </summary>
            <typeparam name="T">The type of the instance that this node represents.</typeparam>
            <param name="hierarchy">The <see cref="T:Cuemon.IHierarchy`1"/> implementation to perform the operation upon.</param>
            <param name="match">The function delegate that defines the conditions of the nodes to search for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all nodes that match the conditions defined by the specified predicate, if found.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy.GetObjectHierarchy(System.Object,System.Action{Cuemon.Reflection.ObjectHierarchyOptions})">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ObjectHierarchyOptions"/> which need to be configured.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.WhileSourceTraversalIsNotNull``1(``0,System.Func{``0,``0})">
            <summary>
            Invokes the specified <paramref name="traversal"/> path of <paramref name="source"/> until obstructed by a null value.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/>.</typeparam>
            <param name="source">The source to travel until the <paramref name="traversal"/> path is obstructed by a null value.</param>
            <param name="traversal">The function delegate that is invoked until the traveled path is obstructed by a null value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the traveled path of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> -or- <paramref name="traversal"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.WhileSourceTraversalHasElements``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Invokes the specified <paramref name="traversal"/> path of <paramref name="source"/> until obstructed by an empty sequence.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/>.</typeparam>
            <param name="source">The source to travel until the <paramref name="traversal"/> path is obstructed by an empty sequence.</param>
            <param name="traversal">The function delegate that is invoked until the traveled path is obstructed by an empty sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the traveled path of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> -or- <paramref name="traversal"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.HorizontalDirection">
            <summary>
            Specifies a set of values defining a horizontal direction.
            </summary>
        </member>
        <member name="F:Cuemon.HorizontalDirection.Left">
            <summary>
            Indicates a vertical direction of Left.
            </summary>
        </member>
        <member name="F:Cuemon.HorizontalDirection.Right">
            <summary>
            Indicates a vertical direction of Right.
            </summary>
        </member>
        <member name="T:Cuemon.IData">
            <summary>
            Provides a way to supply information about the class implementing this interface.
            </summary>
        </member>
        <member name="P:Cuemon.IData.Data">
            <summary>
            Gets a collection of key/value pairs that provide information about this class.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface and contains a collection of key/value pairs.</value>
        </member>
        <member name="T:Cuemon.IDecorator`1">
            <summary>
            Defines a decorator that exposes the inner decorated type.
            </summary>
            <typeparam name="T">The type of the inner decorated object. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived.</typeparam>
            <seealso cref="T:Cuemon.Decorator"/>
            <seealso cref="T:Cuemon.Decorator`1"/>
        </member>
        <member name="P:Cuemon.IDecorator`1.Inner">
            <summary>
            Gets the inner object of this decorator.
            </summary>
            <value>The inner object of this decorator.</value>
        </member>
        <member name="T:Cuemon.IHierarchy`1">
            <summary>
            Provides a generic way to expose a node of a hierarchical structure, including the node object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the node represented in the hierarchical structure.</typeparam>
        </member>
        <member name="P:Cuemon.IHierarchy`1.HasParent">
            <summary>
            Indicates whether the current node has a parent node.
            </summary>
            <value><c>true</c> if the current node has a parent node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.HasChildren">
            <summary>
            Indicates whether the current node has any child nodes.
            </summary>
            <value><c>true</c> if the current node has any child nodes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Depth">
            <summary>
            Gets the current depth of the node in the hierarchical structure.
            </summary>
            <value>The current depth of the node in the hierarchical structure.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Index">
            <summary>
            Gets the zero-based index of the current node that this hierarchical structure represents.
            </summary>
            <value>The zero-based index of the current node that this hierarchical structure represents.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
            <value>The node at the specified index.</value>
        </member>
        <member name="M:Cuemon.IHierarchy`1.Add(`0)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.Add(`0,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.Replace(`0)">
            <summary>
            Allows for the instance on the current node to be replaced with a new <paramref name="instance"/>.
            </summary>
            <param name="instance">The new instance to replace the original with.</param>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetParent">
            <summary>
            Gets the parent node of the current node in the hierarchical structure.
            </summary>
            <returns>The parent node of the current node in the hierarchical structure.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetPath">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <returns>A <see cref="T:System.String"/> that identifies the hierarchical path relative to the current node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetPath(System.Func{Cuemon.IHierarchy{`0},System.String})">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <param name="pathResolver">The function delegate that resolves the hierarchical path of the node in the hierarchical structure.</param>
            <returns>A <see cref="T:System.String" /> that identifies the hierarchical path relative to the current node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetChildren">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.</returns>
        </member>
        <member name="T:Cuemon.IndexMapping">
            <summary>
            Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.IndexMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Mapping" /> class.
            </summary>
            <param name="source">The name of the source column/field/item within the data source.</param>
            <param name="destination">The name of the destination column/field/item within the data destination.</param>
        </member>
        <member name="M:Cuemon.IndexMapping.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IndexMapping"/> class.
            </summary>
            <param name="source">The name of the source column/field/item within the data source.</param>
            <param name="destinationIndex">The ordinal position of the destination column/field/item within the data destination.</param>
        </member>
        <member name="M:Cuemon.IndexMapping.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IndexMapping"/> class.
            </summary>
            <param name="sourceIndex">The ordinal position of the source column/field/item within the data source.</param>
            <param name="destination">The name of the destination column/field/item within the data destination.</param>
        </member>
        <member name="M:Cuemon.IndexMapping.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IndexMapping"/> class.
            </summary>
            <param name="sourceIndex">The ordinal position of the source column/field/item within the data source.</param>
            <param name="destinationIndex">The ordinal position of the destination column/field/item within the data destination.</param>
        </member>
        <member name="P:Cuemon.IndexMapping.SourceIndex">
            <summary>
            Gets the ordinal position of the column/field/item within the data source.
            </summary>
            <value>The integer value of the column/field/item within the data source.</value>
        </member>
        <member name="P:Cuemon.IndexMapping.DestinationIndex">
            <summary>
            Gets the ordinal position of the column/field/item within the data destination.
            </summary>
            <value>The integer value of the column/field/item within the data destination.</value>
        </member>
        <member name="T:Cuemon.Initializer">
            <summary>
            Provides a generic way to wrap and initialize a class for countless scenarios.
            </summary>
        </member>
        <member name="M:Cuemon.Initializer.Create``1(``0)">
            <summary>
            Creates a new instance of the <see cref="T:Cuemon.InitializerBuilder`1"/> wrapping the specified <paramref name="instance"/>.
            </summary>
            <typeparam name="T">The type of object to wrap.</typeparam>
            <param name="instance">The instance to initialize within a protective wrapping.</param>
            <returns>A new instance of <see cref="T:Cuemon.InitializerBuilder`1"/> with the specified <paramref name="instance"/> wrapped.</returns>
        </member>
        <member name="T:Cuemon.InitializerBuilder`1">
            <summary>
            Supports the <see cref="T:Cuemon.Initializer"/> for building custom initializers.
            </summary>
            <typeparam name="T">The type of object to wrap.</typeparam>
        </member>
        <member name="M:Cuemon.InitializerBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.InitializerBuilder`1"/> class.
            </summary>
            <param name="instance">The instance to initialize within a protective wrapping.</param>
        </member>
        <member name="P:Cuemon.InitializerBuilder`1.Instance">
            <summary>
            Gets the initialized instance.
            </summary>
            <value>The initialized instance.</value>
        </member>
        <member name="M:Cuemon.InitializerBuilder`1.IgnoreMissingMethod(System.Action{`0})">
            <summary>
            Ignores any <see cref="T:System.MissingMethodException"/> that might be thrown by instance <typeparamref name="T"/>.
            </summary>
            <param name="initializer">The delegate that will continue initializing instance <typeparamref name="T"/> while ignoring any <see cref="T:System.MissingMethodException"/>.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Cuemon.InitializerBuilder`1.IgnoreAny(System.Action{`0})">
            <summary>
            Ignores any exceptions that might be thrown by instance <typeparamref name="T"/>.
            </summary>
            <param name="initializer">The delegate that will continue initializing instance <typeparamref name="T"/> while ignoring any exceptions.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Cuemon.InitializerBuilder`1.Ignore(System.Action{`0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Ignores exceptions thrown by instance <typeparamref name="T"/> that is specified by the function delegate <paramref name="ignorer"/>.
            </summary>
            <param name="initializer">The delegate that will continue initializing instance <typeparamref name="T"/> while ignoring any exceptions specified by <paramref name="ignorer"/>.</param>
            <param name="ignorer">The function delegate that will parse thrown exceptions and ignore those specified.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="T:Cuemon.IPrefixMultiple">
            <summary>
            Defines a unit prefix that can can be expressed as a either a multiple or a submultiple of the unit of measurement.
            </summary>
            <seealso cref="T:Cuemon.BinaryPrefix"/>
            <seealso cref="T:Cuemon.DecimalPrefix"/>
        </member>
        <member name="P:Cuemon.IPrefixMultiple.Name">
            <summary>
            Gets the name of the unit prefix.
            </summary>
            <value>The name of the unit prefix.</value>
        </member>
        <member name="P:Cuemon.IPrefixMultiple.Symbol">
            <summary>
            Gets the symbol of the unit prefix.
            </summary>
            <value>The symbol of the unit prefix.</value>
        </member>
        <member name="P:Cuemon.IPrefixMultiple.Multiplier">
            <summary>
            Gets the unit prefix multiplier.
            </summary>
            <value>The unit prefix multiplier.</value>
        </member>
        <member name="M:Cuemon.IPrefixMultiple.ToPrefixValue(System.Double)">
            <summary>
            Converts the unit base <paramref name="value"/> to a unit prefix value.
            </summary>
            <param name="value">The value of the base unit.</param>
            <returns>A <see cref="T:System.Double"/> that represents a unit prefix value.</returns>
        </member>
        <member name="M:Cuemon.IPrefixMultiple.ToBaseValue(System.Double)">
            <summary>
            Converts the <paramref name="prefixValue"/> back to a unit base value.
            </summary>
            <param name="prefixValue">The value of the unit prefix.</param>
            <returns>A <see cref="T:System.Double"/> that represents a unit base value.</returns>
        </member>
        <member name="T:Cuemon.IUnit">
            <summary>
            Defines a unit of measurement that is used as a standard for measurement of the same kind of quantity.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:Cuemon.IUnit.UnitName">
            <summary>
            Gets the name of the base unit.
            </summary>
            <value>The name of the base unit.</value>
        </member>
        <member name="P:Cuemon.IUnit.UnitSymbol">
            <summary>
            Gets the symbol of the base unit.
            </summary>
            <value>The symbol of the base unit.</value>
        </member>
        <member name="P:Cuemon.IUnit.UnitValue">
            <summary>
            Gets the base value of the unit.
            </summary>
            <value>The base value of the unit.</value>
        </member>
        <member name="M:Cuemon.IUnit.ToString(System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions"/> which need to be configured.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.IPrefixUnit">
            <summary>
            Defines a unit of measurement that is used as a standard for measurement of the same kind of quantity.
            Any other quantity of that kind can be expressed as a multiple or fraction of the unit of measurement.
            Implements the <see cref="T:Cuemon.IUnit" />
            </summary>
            <seealso cref="T:Cuemon.IUnit" />
        </member>
        <member name="P:Cuemon.IPrefixUnit.Prefix">
            <summary>
            Gets the prefix that can be either a multiple or a submultiple to the base unit.
            </summary>
            <value>The prefix that can be either a multiple or a submultiple to the base unit.</value>
        </member>
        <member name="P:Cuemon.IPrefixUnit.PrefixValue">
            <summary>
            Gets the prefix value of the base unit.
            </summary>
            <value>The prefix value of the base unit.</value>
        </member>
        <member name="T:Cuemon.IWrapper`1">
            <summary>
            Provides a generic way to wrap an object instance of <typeparamref name="T"/> inside another object.
            </summary>
            <typeparam name="T">The type of the object instance to wrap inside another object.</typeparam>
        </member>
        <member name="P:Cuemon.IWrapper`1.Instance">
            <summary>
            Gets the instance of the <see cref="T:Cuemon.IWrapper`1"/> object.
            </summary>
            <value>The instance of the <see cref="T:Cuemon.IWrapper`1"/> object.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.InstanceType">
            <summary>
            Gets the type of the <see cref="P:Cuemon.IWrapper`1.Instance"/>.
            </summary>
            <value>The type of the <see cref="P:Cuemon.IWrapper`1.Instance"/>.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.MemberReference">
            <summary>
            Gets the member from where <see cref="P:Cuemon.IWrapper`1.Instance"/> was referenced.
            </summary>
            <value>The member from where <see cref="P:Cuemon.IWrapper`1.Instance"/> was referenced.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.HasMemberReference">
            <summary>
            Gets a value indicating whether this instance has a member reference.
            </summary>
            <value><c>true</c> if this instance has a member reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.IWrapper`1.InstanceAs``1">
            <summary>
            Returns a value that is equivalent to the instance of the node that this hierarchical structure represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <returns>A value that is equivalent to the instance of the node that this hierarchical structure represents.</returns>
        </member>
        <member name="M:Cuemon.IWrapper`1.InstanceAs``1(System.IFormatProvider)">
            <summary>
            Returns a value that is equivalent to the instance of the node that this hierarchical structure represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A value that is equivalent to the instance of the node that this hierarchical structure represents.</returns>
        </member>
        <member name="T:Cuemon.Mapping">
            <summary>
            Defines the mapping between a column/field/item in a data source and a column/field/item in the data destination.
            </summary>
        </member>
        <member name="M:Cuemon.Mapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Mapping"/> class.
            </summary>
            <param name="source">The name of the source column/field/item within the data source.</param>
            <param name="destination">The name of the destination column/field/item within the data destination.</param>
        </member>
        <member name="P:Cuemon.Mapping.Source">
            <summary>
            Gets the name of the column/field/item being mapped in the data source.
            </summary>
            <value>The string value of the column/field/item being mapped in the data source.</value>
        </member>
        <member name="P:Cuemon.Mapping.Destination">
            <summary>
            Get the name of the column/field/item being mapped in the data destination.
            </summary>
            <value>The string value of the column/field/item being mapped in the data destination.</value>
        </member>
        <member name="T:Cuemon.Messaging.DynamicCorrelation">
            <summary>
            Provides a factory based way to create and wrap an <see cref="T:Cuemon.Messaging.ICorrelation"/> implementation.
            </summary>
        </member>
        <member name="M:Cuemon.Messaging.DynamicCorrelation.Create(System.Func{System.String})">
            <summary>
            Creates a dynamic implementation of <seealso cref="T:Cuemon.Messaging.ICorrelation"/>.
            </summary>
            <param name="correlationIdProvider">The function delegate which provides a unique identifier of a request or message.</param>
            <returns>A dynamic <see cref="T:Cuemon.Messaging.ICorrelation"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Messaging.DynamicCorrelation.Create(System.String)">
            <summary>
            Creates a dynamic implementation of <seealso cref="T:Cuemon.Messaging.ICorrelation"/>.
            </summary>
            <param name="correlationId">The unique identifier of a request or message.</param>
            <returns>A dynamic <see cref="T:Cuemon.Messaging.ICorrelation"/> implementation.</returns>
        </member>
        <member name="T:Cuemon.Messaging.DynamicRequest">
            <summary>
            Provides a factory based way to create and wrap an <see cref="T:Cuemon.Messaging.IRequest"/> implementation.
            </summary>
        </member>
        <member name="M:Cuemon.Messaging.DynamicRequest.Create(System.Func{System.String})">
            <summary>
            Creates a dynamic implementation of <seealso cref="T:Cuemon.Messaging.IRequest"/>.
            </summary>
            <param name="requestIdProvider">The function delegate which provides a unique identifier of a request or message.</param>
            <returns>A dynamic <see cref="T:Cuemon.Messaging.IRequest"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Messaging.DynamicRequest.Create(System.String)">
            <summary>
            Creates a dynamic implementation of <seealso cref="T:Cuemon.Messaging.IRequest"/>.
            </summary>
            <param name="requestId">The unique identifier of a request or message.</param>
            <returns>A dynamic <see cref="T:Cuemon.Messaging.IRequest"/> implementation.</returns>
        </member>
        <member name="T:Cuemon.Messaging.ICorrelation">
            <summary>
            Provides a Correlation ID (also known as a Request ID) that is a unique identifier which is attached to requests and messages that allow reference to a particular transaction or event chain.
            </summary>
        </member>
        <member name="P:Cuemon.Messaging.ICorrelation.CorrelationId">
            <summary>
            Gets the unique correlation identifier.
            </summary>
            <value>The unique correlation identifier.</value>
        </member>
        <member name="T:Cuemon.Messaging.IRequest">
            <summary>
            Provides a Request ID that is a unique identifier which is attached to requests and messages that allow reference to a particular transaction.
            </summary>
        </member>
        <member name="P:Cuemon.Messaging.IRequest.RequestId">
            <summary>
            Gets the unique request identifier.
            </summary>
            <value>The unique request identifier.</value>
        </member>
        <member name="T:Cuemon.MultipleTable">
            <summary>
            Provides a way to represent a table of prefixes that precedes a unit of measure to indicate a multiple of the unit.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="M:Cuemon.MultipleTable.op_Implicit(Cuemon.MultipleTable)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Cuemon.MultipleTable"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="mt">The <see cref="T:Cuemon.MultipleTable"/> to convert.</param>
            <returns>A <see cref="T:System.Double"/> that is equivalent to <paramref name="mt"/>.</returns>
        </member>
        <member name="M:Cuemon.MultipleTable.#ctor(Cuemon.IPrefixUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.MultipleTable"/> class.
            </summary>
            <param name="unit">The instance of an object that implements the <see cref="T:Cuemon.IPrefixUnit"/> interface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unit"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.MultipleTable.Unit">
            <summary>
            Gets the base unit of this table.
            </summary>
            <value>The base unit of this table.</value>
        </member>
        <member name="M:Cuemon.MultipleTable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents largest metric-multiple prefix of this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents largest metric-multiple prefix of this instance.</returns>
            <remarks>Evaluates the largest metric-multiple prefix that is greater or equal to 1 and returns that as either <see cref="F:Cuemon.UnitPrefix.Binary"/> or <see cref="F:Cuemon.UnitPrefix.Decimal"/> formatted.</remarks>
        </member>
        <member name="M:Cuemon.MultipleTable.Equals(Cuemon.IUnit)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.MultipleTable.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.MultipleTable.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Cuemon.NamingStyle">
            <summary>
            Specifies ways that a string must be represented in terms of naming style.
            </summary>
        </member>
        <member name="F:Cuemon.NamingStyle.Compound">
            <summary>
            Indicates the compound naming style string representation (eg. 1 Gigabyte / 0.93 Gibibyte).
            </summary>
        </member>
        <member name="F:Cuemon.NamingStyle.Symbol">
            <summary>
            Indicates the symbol naming style string representation (eg. 1 GB / 0.93 GiB).
            </summary>
        </member>
        <member name="T:Cuemon.ObjectFormattingOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Text.ParserFactory.FromObject"/> and methods of <see cref="T:Cuemon.ObjectDecoratorExtensions"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ObjectFormattingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ObjectFormattingOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.ObjectFormattingOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.ObjectFormattingOptions.FormatProvider"/></term>
                    <description><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.ObjectFormattingOptions.DescriptorContext"/></term>
                    <description><c>null</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.ObjectFormattingOptions.DescriptorContext">
            <summary>
            Gets or sets the type specific format context.
            </summary>
            <value>The type specific format context.</value>
        </member>
        <member name="P:Cuemon.ObjectFormattingOptions.FormatProvider">
            <summary>
            Gets or sets the culture specific formatting information.
            </summary>
            <value>The culture specific formatting information.</value>
        </member>
        <member name="T:Cuemon.ObjectPortrayalOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Generate.ObjectPortrayal(System.Object,System.Action{Cuemon.ObjectPortrayalOptions})" />.
            </summary>
            <seealso cref="T:Cuemon.FormattingOptions`1"/>
        </member>
        <member name="M:Cuemon.ObjectPortrayalOptions.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Cuemon.ObjectPortrayalOptions"/> class.
             </summary>
             <remarks>
             The following table shows the initial property values for an instance of <see cref="T:Cuemon.ObjectPortrayalOptions"/>.
             <list type="table">
                 <listheader>
                     <term>Property</term>
                     <description>Initial Value</description>
                 </listheader>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.BypassOverrideCheck"/></term>
                     <description><c>false</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.NullValue"/></term>
                     <description><c>&lt;null&gt;</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.NoGetterValue"/></term>
                     <description><c>&lt;no getter&gt;</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.FormattingOptions`1.FormatProvider"/></term>
                     <description><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.Delimiter"/></term>
                     <description><c>,</c></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.PropertyConverter"/></term>
                     <description><code>
            (property, instance, provider) =>
            {
                if (property.CanRead)
                {
                    if (TypeUtility.IsComplex(property.PropertyType))
                    {
                        return string.Format(provider, "{0}={1}", property.Name, ConvertFactory.UseConverter&lt;TypeRepresentationConverter&gt;().ChangeType(property.PropertyType, o => o.FullName = true));
                    }
                    var instanceValue = ReflectionUtility.GetPropertyValue(instance, property);
                    return string.Format(provider, "{0}={1}", property.Name, instanceValue ?? NullValue);
                }
                return string.Format(provider, "{0}={1}", property.Name, NoGetterValue);
            };
             </code></description>
                 </item>
                 <item>
                     <term><see cref="P:Cuemon.ObjectPortrayalOptions.PropertiesPredicate"/></term>
                     <description><c>property => property.PropertyType.IsPublic &amp;&amp; property.GetIndexParameters().Length == 0</c></description>
                 </item>
             </list>
             </remarks>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.NullValue">
            <summary>
            Gets or sets the string representation of a <c>null</c> value.
            </summary>
            <value>The string representation of a <c>null</c> value.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.NoGetterValue">
            <summary>
            Gets or sets the string representation of a missing <c>getter</c> method of a property.
            </summary>
            <value>The string representation of a missing <c>getter</c> method of a property.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.BypassOverrideCheck">
            <summary>
            Gets or sets a value indicating whether an overriden method will return without further processing.
            </summary>
            <value><c>true</c> to bypass the check that evaluates if a ToString() method is overriden; otherwise, <c>false</c>.</value>
            <remarks>If <see cref="M:Cuemon.Generate.ObjectPortrayal(System.Object,System.Action{Cuemon.ObjectPortrayalOptions})"/> is called from within an overriden <see cref="M:System.Object.ToString"/> method, this property should have a value of <c>true</c> to avoid <see cref="T:System.StackOverflowException"/>.</remarks>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.Delimiter">
            <summary>
            Gets or sets the delimiter specification that is used together with <see cref="P:Cuemon.ObjectPortrayalOptions.PropertyConverter"/>.
            </summary>
            <value>The delimiter specification that is used together with <see cref="P:Cuemon.ObjectPortrayalOptions.PropertyConverter"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.PropertyConverter">
            <summary>
            Gets or sets the function delegate that convert a <see cref="T:System.Reflection.PropertyInfo"/> object into a human-readable string.
            </summary>
            <value>The function delegate that convert a <see cref="T:System.Reflection.PropertyInfo"/> object into a human-readable string.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.ObjectPortrayalOptions.PropertiesPredicate">
            <summary>
            Gets or sets the function delegate that defines a set of criteria and determines whether the specified <see cref="T:System.Reflection.PropertyInfo"/> meets those criteria.
            </summary>
            <value>The function delegate that defines a set of criteria and determines whether the specified <see cref="T:System.Reflection.PropertyInfo"/> meets those criteria.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Patterns">
            <summary>
            Provides a generic way to support different types of design patterns and practices with small utility methods.
            </summary>
        </member>
        <member name="P:Cuemon.Patterns.Use">
            <summary>
            Gets the singleton instance of the Patterns functionality allowing for extensions methods like: <c>Patterns.Use.SomeIngeniousMethod()</c>.
            </summary>
            <value>The singleton instance of the Patterns functionality.</value>
        </member>
        <member name="M:Cuemon.Patterns.TryInvoke(System.Action)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <param name="method">The delegate that to invoke.</param>
            <returns><c>true</c> if <paramref name="method"/> was called without raising an exception; otherwise <c>false</c>.</returns>
            <remarks>Actually an anti-pattern in regards to swallowing exception. That said, there are situations where this is a perfectly valid approach.</remarks>
        </member>
        <member name="M:Cuemon.Patterns.TryInvoke``1(System.Func{``0},``0@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="TResult">The type of the return value of the <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that will resolve <paramref name="result"/>.</param>
            <param name="result">When this method returns, contains the value returned from <paramref name="method"/>; otherwise the default value for the type of the <paramref name="result"/> parameter if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
            <remarks>Often referred to as the Try-Parse pattern: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/exceptions-and-performance</remarks>
        </member>
        <member name="M:Cuemon.Patterns.InvokeOrDefault``1(System.Func{``0},``0)">
            <summary>
            Returns an object of <typeparamref name="TResult"/>, or a default value if the specified <paramref name="method"/> throws an exception.
            </summary>
            <typeparam name="TResult">The type of the return value of the <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that will return an instance of <typeparamref name="TResult"/>.</param>
            <param name="fallbackResult">The value to return when the specified <paramref name="method"/> throws an exception. Default is <c>default</c> of <typeparamref name="TResult"/>.</param>
            <returns>An object of <typeparamref name="TResult"/> when the specified <paramref name="method"/> can be invoked without an exception; otherwise <paramref name="fallbackResult"/> is returned.</returns>
        </member>
        <member name="M:Cuemon.Patterns.Configure``1(System.Action{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Returns the default parameter-less constructed instance of <typeparamref name="TOptions"/> configured with <paramref name="setup"/> delegate.
            </summary>
            <typeparam name="TOptions">The type of the configuration options class having a default constructor.</typeparam>
            <param name="setup">The delegate that will configure the public read-write properties of <typeparamref name="TOptions"/>.</param>
            <param name="initializer">The optional delegate that will initialize the default parameter-less constructed instance of <typeparamref name="TOptions"/>. Should only be used with third party libraries or for validation purposes.</param>
            <param name="validator">The optional delegate that will validate the <typeparamref name="TOptions"/> configured by the <paramref name="setup"/> delegate.</param>
            <returns>A default constructed instance of <typeparamref name="TOptions"/> initialized with the options of <paramref name="setup"/>.</returns>
            <remarks>Often referred to as part the Options pattern: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options</remarks>
        </member>
        <member name="M:Cuemon.Patterns.ConfigureExchange``2(System.Action{``0},System.Action{``0,``1})">
            <summary>
            Returns the delegate that will configure the public read-write properties of <typeparamref name="TExchangeOptions"/>.
            </summary>
            <typeparam name="TOptions">The type of the configuration options class having a default constructor.</typeparam>
            <typeparam name="TExchangeOptions">The type of the configuration options class having a default constructor.</typeparam>
            <param name="setup">The delegate that will configure the public read-write properties of <typeparamref name="TOptions"/>.</param>
            <param name="initializer">The delegate that will exchange the parameter of <paramref name="setup"/> from <typeparamref name="TOptions"/> to <typeparamref name="TExchangeOptions"/>.</param>
            <returns>An <see cref="T:System.Action`1"/> otherwise equivalent to <paramref name="setup"/>.</returns>
        </member>
        <member name="M:Cuemon.Patterns.ConfigureRevert``1(``0)">
            <summary>
            Returns the delegate that will configure the public read-write properties of <typeparamref name="TOptions"/>.
            </summary>
            <typeparam name="TOptions">The type of the configuration options class having a default constructor.</typeparam>
            <param name="options">An instance of the configured options.</param>
            <returns>An <see cref="T:System.Action`1"/> otherwise equivalent to <paramref name="options"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``1(System.Func{``0},System.Func{``0,``0},System.Action{System.Exception})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``2(System.Func{``1},System.Func{``1,``0,``1},``0,System.Action{System.Exception,``0})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg">The parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``3(System.Func{``2},System.Func{``2,``0,``1,``2},``0,``1,System.Action{System.Exception,``0,``1})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``4(System.Func{``3},System.Func{``3,``0,``1,``2,``3},``0,``1,``2,System.Action{System.Exception,``0,``1,``2})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``5(System.Func{``4},System.Func{``4,``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Action{System.Exception,``0,``1,``2,``3})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvoke``6(System.Func{``5},System.Func{``5,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Action{System.Exception,``0,``1,``2,``3,``4})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="catcher">The delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>The return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``1(System.Func{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Func{System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``2(System.Func{``1},System.Func{``1,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken,System.Func{System.Exception,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg">The parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``3(System.Func{``2},System.Func{``2,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``0,``1,System.Threading.CancellationToken,System.Func{System.Exception,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``4(System.Func{``3},System.Func{``3,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.Threading.CancellationToken,System.Func{System.Exception,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``5(System.Func{``4},System.Func{``4,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.Threading.CancellationToken,System.Func{System.Exception,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="M:Cuemon.Patterns.SafeInvokeAsync``6(System.Func{``5},System.Func{``5,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Func{System.Exception,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provides a generic way to abide the rule description of CA2000 (Dispose objects before losing scope).
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="initializer"/>.</typeparam>
            <param name="initializer">The function delegate that initializes an object implementing the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="tester">The function delegate that is used to ensure that operations performed on <typeparamref name="TResult"/> abides CA2000.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="tester"/> and delegate <paramref name="catcher"/>.</param>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <param name="catcher">The function delegate that will handle any exceptions might thrown by <paramref name="tester"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate <paramref name="initializer"/> if the operations succeeded; otherwise null if the operation failed.</returns>
        </member>
        <member name="T:Cuemon.PrefixMultiple">
            <summary>
            Represents the base class from which all implementations of unit prefix that can can be expressed as a either a multiple or a submultiple of the unit of measurement should derive.
            Implements the <see cref="T:Cuemon.IPrefixMultiple" />
            </summary>
            <seealso cref="T:Cuemon.IPrefixMultiple" />
        </member>
        <member name="F:Cuemon.PrefixMultiple.None">
            <summary>
            Defines a prefix multiple of none (0).
            </summary>
        </member>
        <member name="M:Cuemon.PrefixMultiple.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.PrefixMultiple"/> struct.
            </summary>
            <param name="name">The name of the binary unit.</param>
            <param name="symbol">The symbol of the the unit prefix.</param>
            <param name="value">The number to be raised to a power.</param>
            <param name="exponent">The number that specifies a power.</param>
        </member>
        <member name="P:Cuemon.PrefixMultiple.Name">
            <summary>
            Gets the name of the unit prefix.
            </summary>
            <value>The name of the unit prefix.</value>
        </member>
        <member name="P:Cuemon.PrefixMultiple.Symbol">
            <summary>
            Gets the symbol of the unit prefix.
            </summary>
            <value>The symbol of the unit prefix.</value>
        </member>
        <member name="P:Cuemon.PrefixMultiple.Multiplier">
            <summary>
            Gets the unit prefix multiplier.
            </summary>
            <value>The unit prefix multiplier.</value>
        </member>
        <member name="M:Cuemon.PrefixMultiple.ToPrefixValue(System.Double)">
            <summary>
            Converts the unit base <paramref name="value"/> to a unit prefix value.
            </summary>
            <param name="value">The value of the base unit.</param>
            <returns>A <see cref="T:System.Double"/> that represents a unit prefix value.</returns>
        </member>
        <member name="M:Cuemon.PrefixMultiple.ToBaseValue(System.Double)">
            <summary>
            Converts the unit <paramref name="prefixValue"/> back to a unit base value.
            </summary>
            <param name="prefixValue">The value of the unit prefix.</param>
            <returns>A <see cref="T:System.Double"/> that represents a unit base value.</returns>
        </member>
        <member name="M:Cuemon.PrefixMultiple.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.PrefixUnit">
            <summary>
            Represents the base class from which all implementations of a unit of measurement should derive.
            Implements the <see cref="T:Cuemon.IPrefixUnit" />
            </summary>
            <seealso cref="T:Cuemon.IPrefixUnit" />
        </member>
        <member name="M:Cuemon.PrefixUnit.#ctor(System.String,System.String,System.Double,Cuemon.IPrefixMultiple,System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ByteUnit"/> struct.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="symbol">The symbol of the unit.</param>
            <param name="value">The value of this unit expressed as bytes.</param>
            <param name="prefix">The prefix to associate with this unit.</param>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> cannot be null -or-
            <paramref name="symbol"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> cannot be empty or consist only of white-space characters -or-
            <paramref name="symbol"/> cannot be empty or consist only of white-space characters.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value" /> is lower than 0.
            </exception>
        </member>
        <member name="P:Cuemon.PrefixUnit.UnitName">
            <summary>
            Gets the name of this unit.
            </summary>
            <value>The name of this unit.</value>
        </member>
        <member name="P:Cuemon.PrefixUnit.UnitSymbol">
            <summary>
            Gets the symbol of this unit.
            </summary>
            <value>The symbol of this unit.</value>
        </member>
        <member name="P:Cuemon.PrefixUnit.UnitValue">
            <summary>
            Gets the value of this unit expressed as bytes.
            </summary>
            <value>The value of this unit.</value>
        </member>
        <member name="P:Cuemon.PrefixUnit.Prefix">
            <summary>
            Gets the prefix multiple to this unit.
            </summary>
            <value>The prefix multiple to this unit.</value>
        </member>
        <member name="P:Cuemon.PrefixUnit.PrefixValue">
            <summary>
            Gets the prefix value of this unit.
            </summary>
            <value>The prefix value of this unit.</value>
        </member>
        <member name="M:Cuemon.PrefixUnit.Equals(Cuemon.IUnit)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.PrefixUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cuemon.PrefixUnit.ToString(System.Action{Cuemon.UnitFormatOptions})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.UnitFormatOptions" /> which may be configured.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Range`1">
            <summary>
            Represents a period of time between two <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the time measurement.</typeparam>
            <seealso cref="T:Cuemon.Range`1" />
        </member>
        <member name="M:Cuemon.Range`1.#ctor(`0,`0,System.Func{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Range`1"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="durationResolver">The duration resolver.</param>
        </member>
        <member name="P:Cuemon.Range`1.Start">
            <summary>
            Gets the point of time where this time range begin.
            </summary>
            <value>A value representing the point of time where this time range begin.</value>
        </member>
        <member name="P:Cuemon.Range`1.End">
            <summary>
            Gets the point of time where this time range end.
            </summary>
            <value>A value representing the point of time where this time range end.</value>
        </member>
        <member name="P:Cuemon.Range`1.Duration">
            <summary>
            Gets the duration between <see cref="P:Cuemon.Range`1.Start"/> and <see cref="P:Cuemon.Range`1.End"/>.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the duration between <see cref="P:Cuemon.Range`1.Start"/> and <see cref="P:Cuemon.Range`1.End"/>.</value>
        </member>
        <member name="M:Cuemon.Range`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">A composite format string for the <typeparamref name="T"/> properties.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cuemon.Range`1.Equals(Cuemon.Range{`0},Cuemon.Range{`0})">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns><see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Cuemon.Range`1.GetHashCode(Cuemon.Range{`0})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Cuemon.RelationalOperator">
            <summary>
            Defines the most common numerical relational operators.
            </summary>
            <remarks>
            For more information please refer to this Wikipedia article: http://en.wikipedia.org/wiki/Relational_operator#Standard_relational_operators.
            </remarks>
        </member>
        <member name="F:Cuemon.RelationalOperator.Equal">
            <summary>
            A comparison for equality (==).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.NotEqual">
            <summary>
            A comparison for inequality (!=).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.GreaterThan">
            <summary>
            A comparison for greater than (&gt;).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.GreaterThanOrEqual">
            <summary>
            A comparison for greater than or equal to (&gt;=).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.LessThan">
            <summary>
            A comparison for less than (&lt;).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.LessThanOrEqual">
            <summary>
            A comparison for less than or equal to (&lt;=).
            </summary>
        </member>
        <member name="T:Cuemon.RoundOffAccuracy">
            <summary>
            The accuracy of a rounding for a computed number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestTenth">
            <summary>
            Specifies a rounding to the nearest tenth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestHundredth">
            <summary>
            Specifies a rounding to the nearest hundredth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestThousandth">
            <summary>
            Specifies a rounding to the nearest thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestTenThousandth">
            <summary>
            Specifies a rounding to the nearest ten thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestHundredThousandth">
            <summary>
            Specifies a rounding to the nearest hundred thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestMillion">
            <summary>
            Specifies a rounding to the nearest million of a number.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.Dependency">
            <summary>
            Represents the base class from which all implementations of dependency relationship to an object should derive.
            </summary>
            <remarks>The implementing class of the <see cref="T:Cuemon.Runtime.Dependency"/> class must monitor the dependency relationships so that when any of them changes, action will automatically be taken.</remarks>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.#ctor(System.Func{System.EventHandler{Cuemon.Runtime.WatcherEventArgs},System.Collections.Generic.IEnumerable{Cuemon.Runtime.IWatcher}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Dependency" /> class.
            </summary>
            <param name="watchersHandler">The function delegate that associates watchers to this dependency.</param>
            <param name="breakTieOnChanged">if set to <c>true</c> all <see cref="T:Cuemon.Runtime.IWatcher"/> instances is disassociated with this dependency after first notification of changed.</param>
        </member>
        <member name="E:Cuemon.Runtime.Dependency.DependencyChanged">
            <summary>
            Occurs when a <see cref="T:Cuemon.Runtime.Dependency"/> has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Runtime.Dependency.BreakTieOnChanged">
            <summary>
            Gets a value indicating whether all <see cref="T:Cuemon.Runtime.IWatcher"/> instances is disassociated with this dependency after first notification of changed.
            </summary>
            <value><c>true</c> if all <see cref="T:Cuemon.Runtime.IWatcher"/> instances is disassociated with this dependency after first notification of changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Runtime.Dependency.UtcLastModified">
            <summary>
            Gets time when the dependency was last changed.
            </summary>
            <value>The time when the dependency was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Runtime.Dependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Runtime.Dependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Runtime.Dependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.SetUtcLastModified(System.DateTime)">
            <summary>
            Marks the time when a dependency last changed.
            </summary>
            <param name="utcLastModified">The time when the dependency last changed.</param>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.OnDependencyChangedRaised(Cuemon.Runtime.DependencyEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Runtime.Dependency.DependencyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Runtime.DependencyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.Start">
            <summary>
            Starts and performs the necessary dependency tasks of this instance.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.StartAsync">
            <summary>
            Starts and performs the necessary dependency tasks of this instance.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Dependency.OnWatcherChanged(System.Object,Cuemon.Runtime.WatcherEventArgs)">
            <summary>
            Called when this object receives a signal from one or more of the associated <see cref="T:Cuemon.Runtime.IWatcher"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:Cuemon.Runtime.WatcherEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Cuemon.Runtime.DependencyEventArgs">
            <summary>
            Provides data for dependency related operations.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.DependencyEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.DependencyEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Runtime.DependencyEventArgs.UtcLastModified">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value from when a <see cref="T:Cuemon.Runtime.Dependency"/> was last changed, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.
            </summary>
            <value>The <see cref="T:System.DateTime"/> value from when a <see cref="T:Cuemon.Runtime.Dependency"/> was last changed, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="F:Cuemon.Runtime.DependencyEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.FileDependency">
            <summary>
            Provides a way to monitor any changes occurred to one or more files while notifying subscribing objects.
            </summary>
            <seealso cref="T:Cuemon.Runtime.Dependency" />
        </member>
        <member name="M:Cuemon.Runtime.FileDependency.#ctor(System.Lazy{Cuemon.Runtime.FileWatcher},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.FileDependency"/> class.
            </summary>
            <param name="lazyFileWatcher">The <see cref="T:Cuemon.Runtime.FileWatcher"/> to associate with this dependency.</param>
            <param name="breakTieOnChanged">if set to <c>true</c> all <see cref="T:Cuemon.Runtime.FileWatcher"/> instances is disassociated with this dependency after first notification of changed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lazyFileWatcher"/> cannot be null.
            </exception>
            <remarks>The <see cref="T:Cuemon.Runtime.FileWatcher"/> initialization is deferred until <see cref="M:Cuemon.Runtime.Dependency.StartAsync"/> is invoked.</remarks>
        </member>
        <member name="M:Cuemon.Runtime.FileDependency.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Cuemon.Runtime.FileWatcher}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.FileDependency"/> class.
            </summary>
            <param name="lazyFileWatchers">The <see cref="T:Cuemon.Runtime.FileWatcher"/> sequence to associate with this dependency.</param>
            <param name="breakTieOnChanged">if set to <c>true</c> all <see cref="T:Cuemon.Runtime.FileWatcher"/> instances is disassociated with this dependency after first notification of changed.</param>
            <remarks>The sequence of <see cref="T:Cuemon.Runtime.FileWatcher"/> initializations is deferred until <see cref="M:Cuemon.Runtime.Dependency.StartAsync"/> is invoked.</remarks>
        </member>
        <member name="T:Cuemon.Runtime.FileWatcher">
            <summary>
            Provides a watcher implementation designed to monitor and signal changes applied to a file by raising the <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event.
            </summary>
            <seealso cref="T:Cuemon.Runtime.Watcher" />
        </member>
        <member name="M:Cuemon.Runtime.FileWatcher.#ctor(System.String,System.Boolean,System.Action{Cuemon.Runtime.WatcherOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.FileWatcher"/> class.
            </summary>
            <param name="path">The file to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="readFile">if set to <c>true</c> the file specified in <paramref name="path"/> will be opened and a checksum will be computed using <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> algorithm.</param>
            <param name="setup">The <see cref="T:Cuemon.Runtime.WatcherOptions" /> which may be configured.</param>
        </member>
        <member name="P:Cuemon.Runtime.FileWatcher.Checksum">
            <summary>
            Gets the checksum that is associated with the file specified in <see cref="P:Cuemon.Runtime.FileWatcher.Path"/>.
            </summary>
            <value>The checksum that is associated with the file specified in <see cref="P:Cuemon.Runtime.FileWatcher.Path"/>.</value>
            <remarks>If <see cref="P:Cuemon.Runtime.FileWatcher.ReadFile"/> is <c>false</c> this property will remain <c>null</c>.</remarks>
        </member>
        <member name="P:Cuemon.Runtime.FileWatcher.UtcCreated">
            <summary>
            Gets the time, in Coordinated Universal Time (UTC), when this instance was created.
            </summary>
            <value>The time, in Coordinated Universal Time (UTC), when this instance was created.</value>
        </member>
        <member name="P:Cuemon.Runtime.FileWatcher.Path">
            <summary>
            Gets the path of the file to watch.
            </summary>
            <value>The path to monitor.</value>
        </member>
        <member name="P:Cuemon.Runtime.FileWatcher.ReadFile">
            <summary>
            Gets a value indicating whether the file specified in <see cref="P:Cuemon.Runtime.FileWatcher.Path"/> will be opened, read and assign the computed value to <see cref="P:Cuemon.Runtime.FileWatcher.Checksum"/>.
            </summary>
            <value><c>true</c> if the file specified in <see cref="P:Cuemon.Runtime.FileWatcher.Path"/> will be opened, read and assign the computed value to <see cref="P:Cuemon.Runtime.FileWatcher.Checksum"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Runtime.FileWatcher.HandleSignalingAsync">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Runtime.FileWatcher" />.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.IDependency">
            <summary>
            Specifies that this object supports a method to control dependency related operations.
            </summary>
        </member>
        <member name="E:Cuemon.Runtime.IDependency.DependencyChanged">
            <summary>
            Occurs when a <see cref="T:Cuemon.Runtime.IDependency"/> object has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Runtime.IDependency.UtcLastModified">
            <summary>
            Gets the time when the dependency was last changed.
            </summary>
            <value>The time when the dependency was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Runtime.IDependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Runtime.IDependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Runtime.IDependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cuemon.Runtime.IDependency.Start">
            <summary>
            Starts and performs the necessary dependency tasks of this instance.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.IDependency.StartAsync">
            <summary>
            Starts and performs the necessary dependency tasks of this instance.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cuemon.Runtime.IWatcher">
            <summary>
            Specifies that this object supports a way to monitor a resource.
            </summary>
        </member>
        <member name="E:Cuemon.Runtime.IWatcher.Changed">
            <summary>
            Occurs when a resource has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Runtime.IWatcher.UtcLastModified">
            <summary>
            Gets the time when the resource being monitored was last changed.
            </summary>
            <value>The time when the resource being monitored was last changed.</value>
        </member>
        <member name="M:Cuemon.Runtime.IWatcher.StartMonitoring">
            <summary>
            Starts the monitoring of this <see cref="T:Cuemon.Runtime.IWatcher"/> implementation.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.Serialization.Formatters.Formatter`1">
            <summary>
            An abstract class that supports serialization and deserialization of an object, in a given format.
            </summary>
            <typeparam name="TFormat">The type of format which serialization and deserialization is invoked.</typeparam>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.Formatters.Formatter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Serialization.Formatters.Formatter`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.Formatters.Formatter`1.Serialize(System.Object)">
            <summary>
            Serializes the specified <paramref name="source"/> to an object of <typeparamref name="TFormat" />.
            </summary>
            <param name="source">The object to serialize to a given format.</param>
            <returns>An object of the serialized <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.Formatters.Formatter`1.Serialize(System.Object,System.Type)">
            <summary>
            Serializes the object of this instance to an object of <typeparamref name="TFormat" />.
            </summary>
            <param name="source">The object to serialize to a given format.</param>
            <param name="objectType">The type of the object to serialize.</param>
            <returns>An object of the serialized <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.Formatters.Formatter`1.Deserialize``1(`0)">
            <summary>
            Deserializes the specified <paramref name="value"/> of <typeparamref name="TFormat"/> into an object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="value">The object from which to deserialize the object graph.</param>
            <returns>An object of <typeparamref name="T" />.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.Formatters.Formatter`1.Deserialize(`0,System.Type)">
            <summary>
            Deserializes the specified <paramref name="value"/> of <typeparamref name="TFormat"/> into an object of <paramref name="objectType"/>.
            </summary>
            <param name="value">The object from which to deserialize the object graph.</param>
            <param name="objectType">The type of the deserialized object.</param>
            <returns>An object of <paramref name="objectType"/>.</returns>
        </member>
        <member name="T:Cuemon.Runtime.Serialization.HierarchySerializer">
            <summary>
            Provides a way to serialize objects to nodes of <see cref="T:Cuemon.IHierarchy`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.HierarchySerializer.#ctor(System.Object,System.Action{Cuemon.Reflection.ObjectHierarchyOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Serialization.HierarchySerializer"/> class.
            </summary>
            <param name="source">The object to convert to nodes of <see cref="T:Cuemon.IHierarchy`1"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Reflection.ObjectHierarchyOptions"/> which need to be configured.</param>
        </member>
        <member name="P:Cuemon.Runtime.Serialization.HierarchySerializer.Nodes">
            <summary>
            Gets the result of the <see cref="T:Cuemon.IHierarchy`1"/>.
            </summary>
            <value>The converted nodes of the the by constructor defined source object.</value>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.HierarchySerializer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Runtime.Watcher">
            <summary>
            Represents the base class from which all implementations of resource monitoring should derive.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.#ctor(System.Action{Cuemon.Runtime.WatcherOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Watcher" /> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Runtime.WatcherOptions" /> which needs to be configured.</param>
        </member>
        <member name="E:Cuemon.Runtime.Watcher.Changed">
            <summary>
            Occurs when a resource has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Runtime.Watcher.UtcLastModified">
            <summary>
            Gets the time when the resource being monitored was last changed.
            </summary>
            <value>The time when the resource being monitored was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Runtime.Watcher.UtcLastSignaled">
            <summary>
            Gets the time when the last signaling occurred.
            </summary>
            <value>The time when the last signaling occurred.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Runtime.Watcher.DueTime">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.Watcher"/> starts signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.Watcher"/> starts signaling.</value>
        </member>
        <member name="P:Cuemon.Runtime.Watcher.Period">
            <summary>
            Gets the time interval between periodic signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the time interval between periodic signaling.</value>
        </member>
        <member name="P:Cuemon.Runtime.Watcher.DueTimeOnChanged">
            <summary>
            Gets the amount of time to postpone a <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.StartMonitoring">
            <summary>
            Starts the timer that will monitor this <see cref="T:Cuemon.Runtime.Watcher"/> implementation.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.ChangeSignaling(System.TimeSpan)">
            <summary>
            Changes the signaling timer of the <see cref="T:Cuemon.Runtime.Watcher"/>.
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.Watcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            If <paramref name="dueTime"/> is zero (0), the signaling is started immediately. If <paramref name="dueTime"/> is negative one (-1) milliseconds, the signaling is never started; and the underlying timer is disabled, but can be re-enabled by specifying a positive value for <paramref name="dueTime"/>.
        </member>
        <member name="M:Cuemon.Runtime.Watcher.ChangeSignaling(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the signaling timer of the <see cref="T:Cuemon.Runtime.Watcher"/>.
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.Watcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="period">The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <remarks>If <paramref name="dueTime" /> is zero (0), the signaling is started immediately. If <paramref name="dueTime" /> is negative one (-1) milliseconds, the signaling is never started; and the underlying timer is disabled, but can be re-enabled by specifying a positive value for <paramref name="dueTime" />.
            If <paramref name="period" /> is zero (0) or negative one (-1) milliseconds, and <paramref name="dueTime" /> is positive, the signaling is done once; the periodic behavior of the underlying timer is disabled, but can be re-enabled by specifying a value greater than zero for <paramref name="period" />.</remarks>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.OnDisposeManagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> having <c>disposing</c> set to <c>true</c> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.OnDisposeUnmanagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.SetUtcLastModified(System.DateTime)">
            <summary>
            Marks the time when a resource being monitored was last changed.
            </summary>
            <param name="utcLastModified">The time when a resource being monitored was last changed.</param>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.HandleSignaling">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Runtime.Watcher"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.HandleSignalingAsync">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Runtime.Watcher"/>.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.OnChangedRaised">
            <summary>
            Raises the <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event.
            </summary>
            <remarks>This method raises the <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event with <see cref="P:Cuemon.Runtime.Watcher.UtcLastModified"/> and <see cref="P:Cuemon.Runtime.Watcher.DueTimeOnChanged"/> passed to a new instance of <see cref="T:Cuemon.Runtime.WatcherEventArgs"/>.</remarks>
        </member>
        <member name="M:Cuemon.Runtime.Watcher.OnChangedRaised(Cuemon.Runtime.WatcherEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Runtime.WatcherEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Cuemon.Runtime.WatcherEventArgs">
            <summary>
            Provides data for watcher related operations.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.WatcherEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.WatcherEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.WatcherEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.WatcherEventArgs"/> class.
            </summary>
            <param name="utcLastModified">The time when a <see cref="T:Cuemon.Runtime.Watcher"/> last detected changes to a resource.</param>
        </member>
        <member name="M:Cuemon.Runtime.WatcherEventArgs.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.WatcherEventArgs"/> class.
            </summary>
            <param name="utcLastModified">The time when a <see cref="T:Cuemon.Runtime.Watcher"/> last detected changes to a resource.</param>
            <param name="delayed">The time a <see cref="T:Cuemon.Runtime.Watcher"/> was intentionally delayed before signaling changes to a resource.</param>
        </member>
        <member name="P:Cuemon.Runtime.WatcherEventArgs.UtcLastModified">
            <summary>
            Gets the time when a watcher last detected changes to a resource, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.
            </summary>
            <value>The time when a watcher last detected changes to a resource, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Runtime.WatcherEventArgs.Delayed">
            <summary>
            Gets the time a <see cref="T:Cuemon.Runtime.Watcher"/> was intentionally delayed before signaling changes to a resource.
            </summary>
        </member>
        <member name="F:Cuemon.Runtime.WatcherEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.WatcherOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Runtime.IWatcher"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.WatcherOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.WatcherOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Runtime.WatcherOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Runtime.WatcherOptions.DueTime"/></term>
                    <description><c>TimeSpan.Zero</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Runtime.WatcherOptions.DueTimeOnChanged"/></term>
                    <description><c>TimeSpan.Zero</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Runtime.WatcherOptions.Period"/></term>
                    <description><c>TimeSpan.FromMinutes(2)</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Runtime.WatcherOptions.DueTime">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.IWatcher"/> starts signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Runtime.IWatcher"/> starts signaling.</value>
            <remarks>Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</remarks>
        </member>
        <member name="P:Cuemon.Runtime.WatcherOptions.DueTimeOnChanged">
            <summary>
            Gets or sets the amount of time to postpone a <see cref="E:Cuemon.Runtime.IWatcher.Changed"/> event.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the amount of time to postpone a <see cref="E:Cuemon.Runtime.IWatcher.Changed"/> event.</value>
            <remarks>Specify zero (0) to disable postponing.</remarks>
        </member>
        <member name="P:Cuemon.Runtime.WatcherOptions.Period">
            <summary>
            Gets or sets the time interval between periodic signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the time interval between periodic signaling.</value>
            <remarks>Specify negative one (-1) milliseconds to disable periodic signaling.</remarks>
        </member>
        <member name="T:Cuemon.Security.CyclicRedundancyCheck">
            <summary>
            Represents the base class from which all implementations of the CRC (Cyclic Redundancy Check) checksum algorithm must derive.
            </summary>
            <remarks>Help and inspiration was gathered @ http://www.ross.net/crc/download/crc_v3.txt</remarks>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Action{Cuemon.Security.CyclicRedundancyCheckOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.CyclicRedundancyCheck"/> class.
            </summary>
            <param name="polynomial">This is a binary value that should be specified as a hexadecimal number.</param>
            <param name="initialValue">This parameter specifies the initial value of the register when the algorithm starts.</param>
            <param name="finalXor">This is an W-bit value that should be specified as a hexadecimal number.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions"/> which need to be configured.</param>
        </member>
        <member name="P:Cuemon.Security.CyclicRedundancyCheck.LookupTable">
            <summary>
            Gets the lookup table containing the pre-computed polynomial values.
            </summary>
            <value>The lookup table containing the pre-computed polynomial values.</value>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck.PolynomialIndexInitializer(System.Byte)">
            <summary>
            Returns the initial value for the specified <paramref name="index"/> of the polynomial <see cref="P:Cuemon.Security.CyclicRedundancyCheck.LookupTable"/>.
            </summary>
            <param name="index">The index of the array of polynomial values ranging from 0 to 255.</param>
            <returns>The initial value for the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck.PolynomialSlotCalculator(System.UInt64@,System.UInt64)">
            <summary>
            Computes the polynomial <paramref name="checksum"/> value in steps of 8 (0-7) x 256 (0-255) giving a total of 2048 times.
            </summary>
            <param name="checksum">The checksum that is iterated 8 times (0-7) in 256 steps (0-255).</param>
            <param name="polynomial">The polynomial value.</param>
        </member>
        <member name="P:Cuemon.Security.CyclicRedundancyCheck.InitialValue">
            <summary>
            Gets the CRC initial value of the register.
            </summary>
            <value>The CRC initial value of the register.</value>
        </member>
        <member name="P:Cuemon.Security.CyclicRedundancyCheck.FinalXor">
            <summary>
            Gets the CRC final value that is XORed to the final register value.
            </summary>
            <value>The CRC final value that is XORed to the final register value.</value>
        </member>
        <member name="T:Cuemon.Security.CyclicRedundancyCheck32">
            <summary>
            Provides a CRC-32 implementation of the CRC (Cyclic Redundancy Check) checksum algorithm for 32-bit hash values. This class cannot be inherited.
            </summary>
            Implements the <see cref="T:Cuemon.Security.CyclicRedundancyCheck" />
            <seealso cref="T:Cuemon.Security.CyclicRedundancyCheck"/>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck32.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Action{Cuemon.Security.CyclicRedundancyCheckOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> class.
            </summary>
            <param name="polynomial">This is a binary value that should be specified as a hexadecimal number. Default is <c>0x4C11DB7</c>.</param>
            <param name="initialValue">This parameter specifies the initial value of the register when the algorithm starts. Default is <c>0xFFFFFFFF</c>.</param>
            <param name="finalXor">This is an W-bit value that should be specified as a hexadecimal number. Default is <c>0xFFFFFFFF</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions" /> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck32.PolynomialSlotCalculator(System.UInt64@,System.UInt64)">
            <summary>
            Computes the polynomial <paramref name="checksum" /> value in steps of 8 (0-7) x 256 (0-255) giving a total of 2048 times.
            </summary>
            <param name="checksum">The checksum that is iterated 8 times (0-7) in 256 steps (0-255).</param>
            <param name="polynomial">The polynomial value.</param>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck32.PolynomialIndexInitializer(System.Byte)">
            <summary>
            Returns the initial value for the specified <paramref name="index" /> of the polynomial <see cref="P:Cuemon.Security.CyclicRedundancyCheck.LookupTable" />.
            </summary>
            <param name="index">The index of the array of polynomial values ranging from 0 to 255.</param>
            <returns>The initial value for the specified <paramref name="index" />.</returns>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck32.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:byte[]" />.
            </summary>
            <param name="input">The <see cref="T:byte[]" /> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult" /> containing the computed hash code of the specified <paramref name="input" />.</returns>
            <remarks>Inspiration and praises goes to http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html</remarks>
        </member>
        <member name="T:Cuemon.Security.CyclicRedundancyCheck64">
            <summary>
            Provides a CRC-64 implementation of the CRC (Cyclic Redundancy Check) checksum algorithm for 64-bit hash values. This class cannot be inherited.
            </summary>
            Implements the <see cref="T:Cuemon.Security.CyclicRedundancyCheck" />
            <seealso cref="T:Cuemon.Security.CyclicRedundancyCheck"/>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck64.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Action{Cuemon.Security.CyclicRedundancyCheckOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> class.
            </summary>
            <param name="polynomial">This is a binary value that should be specified as a hexadecimal number. Default is <c>0x42F0E1EBA9EA3693</c>.</param>
            <param name="initialValue">This parameter specifies the initial value of the register when the algorithm starts. Default is <c>0x0000000000000000</c>.</param>
            <param name="finalXor">This is an W-bit value that should be specified as a hexadecimal number. Default is <c>0x0000000000000000</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions" /> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck64.PolynomialIndexInitializer(System.Byte)">
            <summary>
            Returns the initial value for the specified <paramref name="index" /> of the polynomial <see cref="P:Cuemon.Security.CyclicRedundancyCheck.LookupTable" />.
            </summary>
            <param name="index">The index of the array of polynomial values ranging from 0 to 255.</param>
            <returns>The initial value for the specified <paramref name="index" />.</returns>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck64.PolynomialSlotCalculator(System.UInt64@,System.UInt64)">
            <summary>
            Computes the polynomial <paramref name="checksum" /> value in steps of 8 (0-7) x 256 (0-255) giving a total of 2048 times.
            </summary>
            <param name="checksum">The checksum that is iterated 8 times (0-7) in 256 steps (0-255).</param>
            <param name="polynomial">The polynomial value.</param>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheck64.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:byte[]" />.
            </summary>
            <param name="input">The <see cref="T:byte[]" /> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult" /> containing the computed hash code of the specified <paramref name="input" />.</returns>
            <remarks>Inspiration and praises goes to http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html</remarks>
        </member>
        <member name="T:Cuemon.Security.CyclicRedundancyCheckAlgorithm">
            <summary>
            Different models of the CRC algorithm family.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32">
            <summary>
            CRC-32; also known as CRC-32/ISO-HDLC, CRC-32/ADCCP, CRC-32/V-42, CRC-32/XZ, PKZIP.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Autosar">
            <summary>
            CRC-32/AUTOSAR.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Bzip2">
            <summary>
            CRC-32/BZIP2; also known as CRC-32/AAL5, CRC-32/DECT-B, B-CRC-32.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32C">
            <summary>
            CRC32-C; also known as CRC-32/ISCSI, CRC-32/BASE91-C, CRC-32/CASTAGNOLI, CRC-32/INTERLAKEN.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32CdRomEdc">
            <summary>
            CRC-32/CD-ROM-EDC.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32D">
            <summary>
            CRC-32D; also known as BASE91-D.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Mpeg2">
            <summary>
            CRC-32/MPEG-2.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Posix">
            <summary>
            CRC-32/POSIX; also known as CRC-32/CKSUM, CKSUM.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Q">
            <summary>
            CRC-32Q; also known as CRC-32/AIXM.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Jamcrc">
            <summary>
            CRC-32/JAMCRC.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Xfer">
            <summary>
            CRC-32/XFER.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64">
            <summary>
            CRC-64; also known as CRC-64/ECMA-182.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64GoIso">
            <summary>
            CRC-64/GO-ISO.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64We">
            <summary>
            CRC-64/WE.
            </summary>
        </member>
        <member name="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64Xz">
            <summary>
            CRC-64/XZ; also, mistakenly, known as: CRC-64/GO-ECMA.
            </summary>
        </member>
        <member name="T:Cuemon.Security.CyclicRedundancyCheckOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Security.CyclicRedundancyCheck"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Security.CyclicRedundancyCheckOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.EndianOptions.ByteOrder"/></term>
                    <description><see cref="F:Cuemon.Endianness.BigEndian"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Security.CyclicRedundancyCheckOptions.ReflectOutput"/></term>
                    <description><c>false</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Security.CyclicRedundancyCheckOptions.ReflectInput"/></term>
                    <description><c>false</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Security.CyclicRedundancyCheckOptions.ReflectInput">
            <summary>
            Gets or sets a value indicating whether each byte is reflected before being processed.
            </summary>
            <value><c>true</c> if each byte is reflected before being processed; otherwise, <c>false</c>.</value>
            <remarks>More information can be found @ http://www.ross.net/crc/download/crc_v3.txt</remarks>
        </member>
        <member name="P:Cuemon.Security.CyclicRedundancyCheckOptions.ReflectOutput">
            <summary>
            Gets or sets a value indicating whether the final register value is reflected first.
            </summary>
            <value><c>true</c> if the final register value is reflected first; otherwise, <c>false</c>.</value>
            <remarks>More information can be found @ http://www.ross.net/crc/download/crc_v3.txt</remarks>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo1024">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 1024-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo1024.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo1024"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo128">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 128-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo128.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo128"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo256">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 256-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo256.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo256"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo32">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 32-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo32.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo32"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo512">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 512-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo512.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo512"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVo64">
            <summary>
            Provides an implementation of the FVN (Fowler–Noll–Vo) non-cryptographic hashing algorithm for 64-bit hash values. This class cannot be inherited.
            Implements the <see cref="T:Cuemon.Security.FowlerNollVoHash" />
            </summary>
            <seealso cref="T:Cuemon.Security.FowlerNollVoHash" />
        </member>
        <member name="M:Cuemon.Security.FowlerNollVo64.#ctor(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVo64"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVoAlgorithm">
            <summary>
            Defines the algorithms of the Fowler-Noll-Vo hash function.
            </summary>
        </member>
        <member name="F:Cuemon.Security.FowlerNollVoAlgorithm.Fnv1">
            <summary>
            The FNV-1 hash.
            </summary>
        </member>
        <member name="F:Cuemon.Security.FowlerNollVoAlgorithm.Fnv1a">
            <summary>
            The FNV-1a hash. Recommended.
            </summary>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVoHash">
            <summary>
            Represents the base class from which all implementations of the Fowler–Noll–Vo non-cryptographic hashing algorithm must derive.
            </summary>
        </member>
        <member name="M:Cuemon.Security.FowlerNollVoHash.#ctor(System.Int16,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVoHash"/> class.
            </summary>
            <param name="bits">The size in bits.</param>
            <param name="prime">The prime number of the algorithm.</param>
            <param name="offsetBasis">The initial value of the hash.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions"/> which need to be configured.</param>
        </member>
        <member name="P:Cuemon.Security.FowlerNollVoHash.Prime">
            <summary>
            Gets the prime number of the algorithm.
            </summary>
            <value>The prime number of the algorithm.</value>
        </member>
        <member name="P:Cuemon.Security.FowlerNollVoHash.OffsetBasis">
            <summary>
            Gets the offset basis used as the initial value of the hash.
            </summary>
            <value>The offset basis used as the initial value of the hash.</value>
        </member>
        <member name="P:Cuemon.Security.FowlerNollVoHash.Bits">
            <summary>
            Gets the size of the implementation in bits.
            </summary>
            <value>The size of the implementation in bits.</value>
        </member>
        <member name="M:Cuemon.Security.FowlerNollVoHash.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:byte[]" />.
            </summary>
            <param name="input">The <see cref="T:byte[]" /> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult" /> containing the computed hash code of the specified <paramref name="input" />.</returns>
        </member>
        <member name="T:Cuemon.Security.FowlerNollVoOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Security.FowlerNollVoHash"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Security.FowlerNollVoOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.FowlerNollVoOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Security.FowlerNollVoOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.EndianOptions.ByteOrder"/></term>
                    <description><see cref="F:Cuemon.Endianness.BigEndian"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Security.FowlerNollVoOptions.Algorithm"/></term>
                    <description><see cref="F:Cuemon.Security.FowlerNollVoAlgorithm.Fnv1a"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Security.FowlerNollVoOptions.Algorithm">
            <summary>
            Gets or sets the algorithm of the Fowler-Noll-Vo hash function.
            </summary>
            <value>The algorithm of the Fowler-Noll-Vo hash function.</value>
        </member>
        <member name="T:Cuemon.Security.Hash`1">
            <summary>
            Represents the base class from which all implementations of hash algorithms and checksums should derive.
            </summary>
            <typeparam name="TOptions">The type of the configured options.</typeparam>
            <seealso cref="T:Cuemon.ConvertibleOptions"/>
            <seealso cref="T:Cuemon.Configuration.IConfigurable`1" />
            <seealso cref="T:Cuemon.Security.IHash" />
        </member>
        <member name="M:Cuemon.Security.Hash`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Hash`1"/> class.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
        </member>
        <member name="P:Cuemon.Security.Hash`1.Options">
            <summary>
            Gets the configured options of this instance.
            </summary>
            <value>The configured options of this instance.</value>
        </member>
        <member name="M:Cuemon.Security.Hash`1.EndianInitializer(Cuemon.EndianOptions)">
            <summary>
            The endian-initializer of this instance.
            </summary>
            <param name="options">An instance of the configured options.</param>
        </member>
        <member name="T:Cuemon.Security.Hash">
            <summary>
            Represents the base class that defines the public facing structure to expose.
            </summary>
            <seealso cref="T:Cuemon.Security.IHash" />
        </member>
        <member name="M:Cuemon.Security.Hash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Hash"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Boolean)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Boolean"/>.
            </summary>
            <param name="input">The <see cref="T:System.Boolean"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Byte)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Byte"/>.
            </summary>
            <param name="input">The <see cref="T:System.Byte"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Char)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Char"/>.
            </summary>
            <param name="input">The <see cref="T:System.Char"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.DateTime)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.DateTime"/>.
            </summary>
            <param name="input">The <see cref="T:System.DateTime"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.DBNull)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.DBNull"/>.
            </summary>
            <param name="input">The <see cref="T:System.DBNull"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Decimal)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Decimal"/>.
            </summary>
            <param name="input">The <see cref="T:System.Decimal"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Double)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Double"/>.
            </summary>
            <param name="input">The <see cref="T:System.Double"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Int16)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Int16"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int16"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Int32)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Int32"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int32"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Int64)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Int64"/>.
            </summary>
            <param name="input">The <see cref="T:System.Int64"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.SByte)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.SByte"/>.
            </summary>
            <param name="input">The <see cref="T:System.SByte"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Single)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Single"/>.
            </summary>
            <param name="input">The <see cref="T:System.Single"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.UInt16)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.UInt16"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt16"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.UInt32)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.UInt32"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt32"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.UInt64)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.UInt64"/>.
            </summary>
            <param name="input">The <see cref="T:System.UInt64"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.String,System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Computes the hash value for the specified <see cref="T:System.String"/>.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to compute the hash code for.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Enum)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.Enum"/>.
            </summary>
            <param name="input">The <see cref="T:System.Enum"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.IConvertible[])">
            <summary>
            Computes the hash value for the specified <see cref="T:IConvertible[]"/>.
            </summary>
            <param name="input">The <see cref="T:IConvertible[]"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Collections.Generic.IEnumerable{System.IConvertible})">
            <summary>
            Computes the hash value for the specified sequence of <see cref="T:System.IConvertible"/>.
            </summary>
            <param name="input">The sequence of <see cref="T:System.IConvertible"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="input">The <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Hash.EndianInitializer(Cuemon.EndianOptions)">
            <summary>
            Defines the initializer that <see cref="T:Cuemon.Security.Hash`1"/> must implement.
            </summary>
            <param name="options">An instance of the configured options.</param>
        </member>
        <member name="T:Cuemon.Security.HashFactory">
            <summary>
            Provides access to factory methods for creating and configuring <see cref="T:Cuemon.Security.Hash"/> instances.
            </summary>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv(Cuemon.Security.NonCryptoAlgorithm,System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of a non-cryptographic implementation that derives from <see cref="T:Cuemon.Security.FowlerNollVoHash"/> with the specified <paramref name="algorithm"/>. Default is <see cref="T:Cuemon.Security.FowlerNollVo32"/> using <see cref="F:Cuemon.Security.FowlerNollVoAlgorithm.Fnv1a"/>.
            </summary>
            <param name="algorithm">The <see cref="T:Cuemon.Security.NonCryptoAlgorithm"/> that defines the non-cryptographic implementation. Default is <see cref="F:Cuemon.Security.NonCryptoAlgorithm.Fnv32"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.FowlerNollVoOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of the by parameter specified <paramref name="algorithm"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv32(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo32"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv64(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo64"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo64"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv128(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo128"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo128"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv256(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo256"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo256"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv512(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo512"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo512"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateFnv1024(System.Action{Cuemon.Security.FowlerNollVoOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.FowlerNollVo1024"/>.
            </summary>
            <param name="setup">The <see cref="T:Cuemon.ConvertibleOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.FowlerNollVo1024"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc(Cuemon.Security.CyclicRedundancyCheckAlgorithm)">
            <summary>
            Creates an instance of a cyclic redundancy check implementation that derives from <see cref="T:Cuemon.Security.CyclicRedundancyCheck"/> with the specified <paramref name="algorithm"/>. Default is <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32"/>.
            </summary>
            <param name="algorithm">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckAlgorithm"/> that defines the cyclic redundancy check implementation. Default is <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32"/>.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of the by parameter specified <paramref name="algorithm"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32(System.UInt32,System.UInt32,System.UInt32,System.Action{Cuemon.Security.CyclicRedundancyCheckOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> from the specified arguments.
            </summary>
            <param name="polynomial">This is a binary value that should be specified as a hexadecimal number.</param>
            <param name="initialValue">This parameter specifies the initial value of the register when the algorithm starts.</param>
            <param name="finalXor">This is an W-bit value that should be specified as a hexadecimal number.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Autosar">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Autosar"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Bzip2">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Bzip2"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32C">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32C"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32CdRomEdc">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32CdRomEdc"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32D">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32D"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Jamcrc">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Jamcrc"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Mpeg2">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Mpeg2"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Posix">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Posix"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Q">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Q"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc32Xfer">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc32Xfer"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck32"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc64(System.UInt64,System.UInt64,System.UInt64,System.Action{Cuemon.Security.CyclicRedundancyCheckOptions})">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> from the specified arguments.
            </summary>
            <param name="polynomial">This is a binary value that should be specified as a hexadecimal number.</param>
            <param name="initialValue">This parameter specifies the initial value of the register when the algorithm starts.</param>
            <param name="finalXor">This is an W-bit value that should be specified as a hexadecimal number.</param>
            <param name="setup">The <see cref="T:Cuemon.Security.CyclicRedundancyCheckOptions" /> which may be configured.</param>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc64">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc64GoIso">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64GoIso"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc64We">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64We"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashFactory.CreateCrc64Xz">
            <summary>
            Creates an instance of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/> using <see cref="F:Cuemon.Security.CyclicRedundancyCheckAlgorithm.Crc64Xz"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Security.Hash"/> implementation of <see cref="T:Cuemon.Security.CyclicRedundancyCheck64"/>.</returns>
        </member>
        <member name="T:Cuemon.Security.HashResult">
            <summary>
            Represents the result of a computed checksum operation.
            </summary>
        </member>
        <member name="M:Cuemon.Security.HashResult.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.HashResult"/> class.
            </summary>
            <param name="input">The computed checksum represented as a <see cref="T:byte[]"/>.</param>
        </member>
        <member name="P:Cuemon.Security.HashResult.HasValue">
            <summary>
            Gets a value indicating whether this instance has a checksum representation that consist of at least one byte.
            </summary>
            <value><c>true</c> if this instance has a checksum representation that consist of at least one byte; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Security.HashResult.GetBytes">
            <summary>
            Creates a copy of the original value that reflects a computed operation.
            </summary>
            <value>The copy of the original value that reflects a computed operation.</value>
        </member>
        <member name="M:Cuemon.Security.HashResult.ToHexadecimalString">
            <summary>
            Converts the underlying value of this instance to its equivalent hexadecimal representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representation, in hexadecimal, of the contents of the underlying value of this instance.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.ToBase64String">
            <summary>
            Converts the underlying value of this instance to its equivalent string representation that is encoded with base-64 digits.
            </summary>
            <returns>A <see cref="T:System.String"/> representation, in base 64, of the contents of the underlying value of this instance.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.ToUrlEncodedBase64String">
            <summary>
            Converts the underlying value of this instance to its equivalent string representation that is encoded with base-64 digits, which is usable for transmission on the URL.
            </summary>
            <returns>A <see cref="T:System.String"/> representation, in base 64 which is usable for transmission on the URL, of the contents of the underlying value of this instance.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.ToBinaryString">
            <summary>
            Converts the underlying value of this instance to its equivalent binary representation.
            </summary>
            <returns>A <see cref="T:System.String"/> representation, in binary, of the contents of the underlying value of this instance.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.Equals(Cuemon.Security.HashResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cuemon.Security.HashResult.To``1(System.Func{System.Byte[],``0})">
            <summary>
            Provides a generic converter of a <see cref="T:byte[]"/>.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="converter">The function delegate that takes the underlying value of this instance and converts it into <typeparamref name="T"/>.</param>
            <returns>An instance or value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Cuemon.Security.IHash">
            <summary>
            Defines the bare minimum of both non-cryptographic and cryptographic transformations.
            </summary>
        </member>
        <member name="M:Cuemon.Security.IHash.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.IHash.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="input">The <see cref="T:System.IO.Stream"/> to compute the hash code for.</param>
            <returns>A <see cref="T:Cuemon.Security.HashResult"/> containing the computed hash code of the specified <paramref name="input"/>.</returns>
        </member>
        <member name="T:Cuemon.Security.NonCryptoAlgorithm">
            <summary>
            Specifies the different implementations of a non-cryptographic hashing algorithm.
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv32">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (32 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv64">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (64 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv128">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (128 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv256">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (256 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv512">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (512 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.NonCryptoAlgorithm.Fnv1024">
            <summary>
            The Fowler–Noll–Vo (FNV-1/FNV-1A) algorithm (1024 bits).
            </summary>
        </member>
        <member name="T:Cuemon.SortOrder">
            <summary>
            Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Cuemon.SortOrder.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Cuemon.SortOrder.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="F:Cuemon.SortOrder.Unspecified">
            <summary>
            No sort order is specified, meaning the default sorting is used.
            </summary>
        </member>
        <member name="T:Cuemon.StorageCapacity">
            <summary>
            Provides a way to represent a table of both binary and metric prefixes that precedes a unit of measure optimized for storage capacity measurement standards.
            </summary>
            <seealso cref="T:Cuemon.MultipleTable" />
        </member>
        <member name="M:Cuemon.StorageCapacity.#ctor(Cuemon.IPrefixUnit,System.Action{Cuemon.StorageCapacityOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.StorageCapacity"/> class.
            </summary>
            <param name="unit">The instance of an object that implements the <see cref="T:Cuemon.IPrefixUnit"/> interface.</param>
            <param name="setup">The <see cref="T:Cuemon.StorageCapacityOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unit"/> cannot be null.
            </exception>
        </member>
        <member name="P:Cuemon.StorageCapacity.Kibi">
            <summary>
            Gets the binary-multiple prefix kibi (Ki).
            </summary>
            <value>The binary-multiple prefix kibi (Ki).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Mebi">
            <summary>
            Gets the binary-multiple prefix mebi (Mi).
            </summary>
            <value>The binary-multiple prefix mebi (Mi).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Gibi">
            <summary>
            Gets the binary-multiple prefix gibi (Gi).
            </summary>
            <value>The binary-multiple prefix gibi (Gi).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Tebi">
            <summary>
            Gets the binary-multiple prefix tebi (Ti).
            </summary>
            <value>The binary-multiple prefix tebi (Ti).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Pebi">
            <summary>
            Gets the binary-multiple prefix pebi (Pi).
            </summary>
            <value>The binary-multiple prefix pebi (Pi).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Kilo">
            <summary>
            Gets the metric-multiple prefix kilo (k).
            </summary>
            <value>The metric-multiple prefix kilo (k).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Mega">
            <summary>
            Gets the metric-multiple prefix mega (M).
            </summary>
            <value>The metric-multiple prefix mega (M).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Giga">
            <summary>
            Gets the metric-multiple prefix giga (G).
            </summary>
            <value>The metric-multiple prefix giga (G).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Tera">
            <summary>
            Gets the metric-multiple prefix tera (T).
            </summary>
            <value>The metric-multiple prefix tera (T).</value>
        </member>
        <member name="P:Cuemon.StorageCapacity.Peta">
            <summary>
            Gets the metric-multiple prefix peta (P).
            </summary>
            <value>The metric-multiple prefix peta (P).</value>
        </member>
        <member name="M:Cuemon.StorageCapacity.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents largest metric-multiple prefix of this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents largest metric-multiple prefix of this instance.</returns>
            <remarks>Evaluates the largest metric-multiple prefix that is greater or equal to 1 and returns that as either <see cref="F:Cuemon.UnitPrefix.Binary"/> or <see cref="F:Cuemon.UnitPrefix.Decimal"/> formatted.</remarks>
        </member>
        <member name="M:Cuemon.StorageCapacity.ToAggregateString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an aggregated <see cref="T:System.String" /> of all multiple prefix of this instance.
            </summary>
            <param name="includePowerOfTwoGroup">if set to <c>true</c> all binary-multiple prefix is included in the aggregate.</param>
            <param name="includePowerOfTenGroup">if set to <c>true</c> all metric-multiple prefix is included in the aggregate.</param>
            <param name="includeUnit">if set to <c>true</c> the base unit is included in the aggregate.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Cuemon.StorageCapacityOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.StorageCapacity"/>.
            </summary>
            <seealso cref="T:Cuemon.BitStorageCapacity"/>
            <seealso cref="T:Cuemon.ByteStorageCapacity"/>
        </member>
        <member name="M:Cuemon.StorageCapacityOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.StorageCapacityOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.StorageCapacityOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.StorageCapacityOptions.Style"/></term>
                    <description><see cref="F:Cuemon.NamingStyle.Symbol"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.StorageCapacityOptions.NumberFormat"/></term>
                    <description><c>#,##0.##</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.FormattingOptions`1.FormatProvider"/></term>
                    <description><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.StorageCapacityOptions.Prefix"/></term>
                    <description><see cref="F:Cuemon.UnitPrefix.Binary"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.StorageCapacityOptions.Style">
            <summary>
            Gets or sets the desired naming style.
            </summary>
            <value>The desired naming style.</value>
        </member>
        <member name="P:Cuemon.StorageCapacityOptions.NumberFormat">
            <summary>
            Gets or sets the desired number format when using ToString().
            </summary>
            <value>The desired number format when using ToString().</value>
        </member>
        <member name="P:Cuemon.StorageCapacityOptions.Prefix">
            <summary>
            Gets or sets the proffered <see cref="T:Cuemon.UnitPrefix"/> when calling ToString().
            </summary>
            <value>The proffered <see cref="T:Cuemon.UnitPrefix"/> when calling ToString().</value>
        </member>
        <member name="T:Cuemon.StringFactory">
            <summary>
            Provides access to factory methods for creating and configuring encoded <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:Cuemon.StringFactory.CreateHexadecimal(System.Byte[])">
            <summary>
            Creates a hexadecimal string representation from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:byte[]"/> to convert.</param>
            <returns>A hexadecimal string representation that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.StringFactory.CreateHexadecimal(System.String,System.Action{Cuemon.Text.EncodingOptions})">
            <summary>
            Creates a hexadecimal string representation from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.EncodingOptions"/> which may be configured.</param>
            <returns>A hexadecimal string representation that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="setup"/> was initialized with an invalid <see cref="T:Cuemon.Text.PreambleSequence"/>.
            </exception>
        </member>
        <member name="M:Cuemon.StringFactory.CreateBinaryDigits(System.Byte[])">
            <summary>
            Creates a binary digits string representation from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:byte[]"/> to convert.</param>
            <returns>A binary digits string representation that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.StringFactory.CreateUrlEncodedBase64(System.Byte[])">
            <summary>
            Creates a base64 string representation, in URL-safe characters, from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:byte[]"/> to convert.</param>
            <returns>A base64 string representation, in URL-safe characters, that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <remarks>Source: http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08#appendix-C</remarks>
        </member>
        <member name="M:Cuemon.StringFactory.CreateProtocolRelativeUrl(System.Uri,System.Action{Cuemon.Text.ProtocolRelativeUriStringOptions})">
            <summary>
            Creates a protocol-relative URL string representation from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> to convert.</param>
            <param name="setup">The <see cref="T:Cuemon.Text.ProtocolRelativeUriStringOptions"/> which may be configured.</param>
            <returns>A protocol-relative URL string representation that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be an absolute URI.
            </exception>
        </member>
        <member name="M:Cuemon.StringFactory.CreateUriScheme(Cuemon.UriScheme)">
            <summary>
            Creates an URI scheme string representation from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:Cuemon.UriScheme"/> to convert.</param>
            <returns>An URI scheme string representation that is equivalent to <paramref name="value"/>.</returns>
        </member>
        <member name="T:Cuemon.StringReplacePair">
            <summary>
            Defines a oldValue/newValue pair that can be set or retrieved for string replace operations.
            </summary>
        </member>
        <member name="M:Cuemon.StringReplacePair.ReplaceAll(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurrences of <paramref name="oldValue"/> in <paramref name="value"/>, with <paramref name="newValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the replacement on.</param>
            <param name="oldValue">The <see cref="T:System.String"/> value to be replaced.</param>
            <param name="newValue">The <see cref="T:System.String"/> value to replace all occurrences of <paramref name="oldValue"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison. Default is <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</param>
            <returns>A <see cref="T:System.String"/> equivalent to <paramref name="value"/> but with all instances of <paramref name="oldValue"/> replaced with <paramref name="newValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null -or-
            <paramref name="oldValue"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringReplacePair.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{Cuemon.StringReplacePair},System.StringComparison)">
            <summary>
            Replaces all occurrences of the <see cref="P:Cuemon.StringReplacePair.OldValue"/> with <see cref="P:Cuemon.StringReplacePair.NewValue"/> of the <paramref name="replacePairs"/> sequence in <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the replacement on.</param>
            <param name="replacePairs">A sequence of <see cref="T:Cuemon.StringReplacePair"/> values.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison. Default is <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</param>
            <returns>A <see cref="T:System.String"/> equivalent to <paramref name="value"/> but with all instances of <see cref="P:Cuemon.StringReplacePair.OldValue"/> replaced with <see cref="P:Cuemon.StringReplacePair.NewValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null -or-
            <paramref name="replacePairs"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringReplacePair.RemoveAll(System.String,System.String[])">
            <summary>
            Returns a new string in which all the specified <paramref name="fragments"/> has been removed from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the sweep on.</param>
            <param name="fragments">The fragments containing the characters and/or words to delete.</param>
            <returns>A new string that is equivalent to <paramref name="value"/> except for the removed characters and/or words.</returns>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringReplacePair.RemoveAll(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns a new string in which all the specified <paramref name="fragments"/> has been deleted from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the sweep on.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="fragments">The fragments containing the characters and/or words to delete.</param>
            <returns>A new string that is equivalent to <paramref name="value"/> except for the removed characters and/or words.</returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.RemoveAll(System.String,System.Char[])">
            <summary>
            Returns a new string in which all the specified <paramref name="fragments"/> has been deleted from the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the sweep on.</param>
            <param name="fragments">The fragments containing the characters and/or words to delete.</param>
            <returns>A new string that is equivalent to <paramref name="value"/> except for the removed characters.</returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.RemoveAll(System.String[],System.String[])">
            <summary>
            Returns a new string array in which all the specified <paramref name="fragments"/> has been deleted from the specified <paramref name="source"/> array.
            </summary>
            <param name="source">The <see cref="T:string[]"/> value to perform the sweep on.</param>
            <param name="fragments">The fragments containing the characters and/or words to delete.</param>
            <returns>A new string array that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringReplacePair.RemoveAll(System.String[],System.StringComparison,System.String[])">
            <summary>
            Returns a new string array in which all the specified <paramref name="fragments"/> has been deleted from the specified <paramref name="source"/> array.
            </summary>
            <param name="source">The <see cref="T:string[]"/> value to perform the sweep on.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="fragments">The fragments containing the characters and/or words to delete.</param>
            <returns>A new string array that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.StringReplacePair"/> struct.
            </summary>
            <param name="oldValue">The <see cref="T:System.String"/> value to be replaced.</param>
            <param name="newValue">The <see cref="T:System.String"/> value to replace all occurrences of <paramref name="oldValue"/>.</param>
        </member>
        <member name="P:Cuemon.StringReplacePair.OldValue">
            <summary>
            Gets the <see cref="T:System.String"/> value to be replaced.
            </summary>
            <value>The <see cref="T:System.String"/> value to be replaced.</value>
        </member>
        <member name="P:Cuemon.StringReplacePair.NewValue">
            <summary>
            Gets the <see cref="T:System.String"/> value to replace all occurrences of <see cref="P:Cuemon.StringReplacePair.OldValue"/>.
            </summary>
            <value>The <see cref="T:System.String"/> value to replace all occurrences of <see cref="P:Cuemon.StringReplacePair.OldValue"/>.</value>
        </member>
        <member name="M:Cuemon.StringReplacePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.Equals(Cuemon.StringReplacePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.op_Equality(Cuemon.StringReplacePair,Cuemon.StringReplacePair)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.StringReplacePair"/> instances are equal.
            </summary>
            <param name="replacePair1">The first date interval to compare.</param>
            <param name="replacePair2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="replacePair1"/> and <paramref name="replacePair2"/> are equal; otherwise, false. </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.op_Inequality(Cuemon.StringReplacePair,Cuemon.StringReplacePair)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are not equal.
            </summary>
            <param name="replacePair1">The first date interval to compare.</param>
            <param name="replacePair2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="replacePair1"/> and <paramref name="replacePair2"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Cuemon.StringReplacePair"/>, using the string representations of the oldValue and newValue.
            </summary>
            <returns>A string representation of the <see cref="T:Cuemon.StringReplacePair"/>, which includes the string representations of the oldValue and newValue.</returns>
            <remarks>The string representation consists of the string representations of the oldValue and newValue, separated by a comma and a space, and enclosed in square brackets. For example, the ToString method for a <see cref="T:Cuemon.StringReplacePair"/> structure with the string OldValue "Test1" and the string NewValue "Test2" returns the string "[Test1, Test2]".</remarks>
        </member>
        <member name="T:Cuemon.SystemSnapshots">
            <summary>
            Specifies the system states to capture runtime.
            </summary>
        </member>
        <member name="F:Cuemon.SystemSnapshots.None">
            <summary>
            Captures nothing.
            </summary>
        </member>
        <member name="F:Cuemon.SystemSnapshots.CaptureThreadInfo">
            <summary>
            Captures thread information about a system.
            </summary>
        </member>
        <member name="F:Cuemon.SystemSnapshots.CaptureProcessInfo">
            <summary>
            Captures process information about a system.
            </summary>
        </member>
        <member name="F:Cuemon.SystemSnapshots.CaptureEnvironmentInfo">
            <summary>
            Captures environment information about a system.
            </summary>
        </member>
        <member name="F:Cuemon.SystemSnapshots.CaptureAll">
            <summary>
            Captures all available information about a system. Includes <see cref="F:Cuemon.SystemSnapshots.CaptureThreadInfo"/>, <see cref="F:Cuemon.SystemSnapshots.CaptureProcessInfo"/> and <see cref="F:Cuemon.SystemSnapshots.CaptureEnvironmentInfo"/>
            </summary>
        </member>
        <member name="T:Cuemon.TaskActionFactory">
            <summary>
            Provides access to factory methods for creating <see cref="T:Cuemon.TaskActionFactory`1"/> instances that encapsulate a <see cref="T:System.Threading.Tasks.Task"/> based function delegate with a variable amount of generic arguments.
            </summary>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/>.
            </summary>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and one generic argument.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and one generic argument.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``2(System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and two generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and two generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``3(System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and three generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and three generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``4(System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and four generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and four generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``5(System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and five generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and five generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``6(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and six generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and six generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and seven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and seven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and eight generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and eight generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and nine generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and nine generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and ten generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and ten generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and eleven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and eleven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and twelfth generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and twelfth generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and thirteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and thirteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and fourteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and fourteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskActionFactory.Create``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskActionFactory`1"/> instance encapsulating the specified <paramref name="method"/> and fifteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskActionFactory`1"/> object initialized with the specified <paramref name="method"/> and fifteen generic arguments.</returns>
        </member>
        <member name="T:Cuemon.TaskActionFactory`1">
            <summary>
            Provides an easy way of invoking an <see cref="T:System.Action" /> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
        </member>
        <member name="M:Cuemon.TaskActionFactory`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TaskActionFactory"/> class.
            </summary>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.TaskActionFactory`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task},`0,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TaskActionFactory`1"/> class.
            </summary>
            <param name="method">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="originalDelegate">The original delegate wrapped by <paramref name="method"/>.</param>
        </member>
        <member name="P:Cuemon.TaskActionFactory`1.Method">
            <summary>
            Gets the delegate to invoke.
            </summary>
            <value>The delegate to invoke.</value>
        </member>
        <member name="M:Cuemon.TaskActionFactory`1.ExecuteMethodAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the delegate associated with this instance.
            </summary>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            No delegate was specified on the factory.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The <paramref name="ct"/> was canceled.
            </exception>
        </member>
        <member name="M:Cuemon.TaskActionFactory`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.TaskActionFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.TaskActionFactory`1"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.TaskFuncFactory">
            <summary>
            Provides access to factory methods for creating <see cref="T:Cuemon.TaskFuncFactory`2"/> instances that encapsulate a <see cref="T:System.Threading.Tasks.Task`1"/> based function delegate with a variable amount of generic arguments.
            </summary>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/>.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and one generic argument.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg">The parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and one generic argument.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``3(System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``0,``1)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and two generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and two generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``4(System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and three generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and three generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``5(System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and four generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and four generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``6(System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and five generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and five generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and six generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and six generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and seven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and seven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.CancellationToken,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and eight generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and eight generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.CancellationToken,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and nine generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and nine generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.CancellationToken,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and ten generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and ten generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.CancellationToken,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and eleven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and eleven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.CancellationToken,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and twelfth generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and twelfth generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.CancellationToken,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and thirteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and thirteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.CancellationToken,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and fourteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and fourteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TaskFuncFactory.Create``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.CancellationToken,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new <see cref="T:Cuemon.TaskFuncFactory`2"/> instance encapsulating the specified <paramref name="method"/> and fifteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TaskFuncFactory`2"/> object initialized with the specified <paramref name="method"/> and fifteen generic arguments.</returns>
        </member>
        <member name="T:Cuemon.TaskFuncFactory`2">
            <summary>
            Provides an easy way of invoking an <see cref="T:System.Func`1" /> function delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.TaskFuncFactory`2.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.TaskFuncFactory`2.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TaskFuncFactory`2"/> class.
            </summary>
            <param name="method">The function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.TaskFuncFactory`2.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}},`0,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TaskFuncFactory`2"/> class.
            </summary>
            <param name="method">The function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="originalDelegate">The original delegate wrapped by <paramref name="method"/>.</param>
        </member>
        <member name="P:Cuemon.TaskFuncFactory`2.Method">
            <summary>
            Gets the function delegate to invoke.
            </summary>
            <value>The function delegate to invoke.</value>
        </member>
        <member name="M:Cuemon.TaskFuncFactory`2.ExecuteMethodAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the function delegate associated with this instance.
            </summary>
            <param name="ct">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the return value of the function delegate associated with this instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            No delegate was specified on the factory.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The <paramref name="ct"/> was canceled.
            </exception>
        </member>
        <member name="M:Cuemon.TaskFuncFactory`2.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.TaskFuncFactory`2"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.TaskFuncFactory`2"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with an empty value.
            </summary>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template.CreateZero">
            <summary>
            Creates a new 0-tuple, or empty tuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <returns>A 0-tuple (empty) with no value.</returns>
        </member>
        <member name="M:Cuemon.Template.CreateOne``1(``0)">
            <summary>
            Creates a new 1-tuple, or single, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T">The type of the only parameter of the tuple.</typeparam>
            <param name="arg">The value of the only parameter of the tuple.</param>
            <returns>A 1-tuple (single) whose value is (arg1).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateTwo``2(``0,``1)">
            <summary>
            Creates a new 2-tuple, or double, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <returns>A 2-tuple (double) whose value is (arg1, arg2).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateThree``3(``0,``1,``2)">
            <summary>
            Creates a new 3-tuple, or triple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <returns>A 3-tuple (triple) whose value is (arg1, arg2, arg3).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateFour``4(``0,``1,``2,``3)">
            <summary>
            Creates a new 4-tuple, or quadruple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <returns>A 4-tuple (quadruple) whose value is (arg1, arg2, arg3, arg4).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateFive``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a new 5-tuple, or quintuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <returns>A 5-tuple (quintuple) whose value is (arg1, arg2, arg3, arg4, arg5).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateSix``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new 6-tuple, or septuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <returns>A 6-tuple (sextuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateSeven``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new 7-tuple, or septuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <returns>An 7-tuple (septuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateEight``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new 8-tuple, or octuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <returns>An 8-tuple (octuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateNine``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new 9-tuple, or nonuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <returns>A 9-tuple (nonuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateTen``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new 10-tuple, or decuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <returns>A 10-tuple (decuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateEleven``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new 11-tuple, or undecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <returns>A 11-tuple (undecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateTwelve``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new 12-tuple, or duodecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <returns>A 12-tuple (duodecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateThirteen``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new 13-tuple, or tredecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <returns>A 13-tuple (tredecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateFourteen``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new 14-tuple, or quattuordecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <returns>A 14-tuple (quattuordecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateFifteen``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new 15-tuple, or quindecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <returns>A 15-tuple (quindecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateSixteen``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Creates a new 16-tuple, or sexdecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <param name="arg16">The value of the sixteenth parameter of the tuple.</param>
            <returns>A 16-tuple (sexdecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateSeventeen``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
            Creates a new 17-tuple, or septendecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tuple.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <param name="arg16">The value of the sixteenth parameter of the tuple.</param>
            <param name="arg17">The value of the seventeenth parameter of the tuple.</param>
            <returns>A 17-tuple (septendecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateEighteen``18(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17)">
            <summary>
            Creates a new 18-tuple, or octodecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tuple.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the tuple.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <param name="arg16">The value of the sixteenth parameter of the tuple.</param>
            <param name="arg17">The value of the seventeenth parameter of the tuple.</param>
            <param name="arg18">The value of the eighteenth parameter of the tuple.</param>
            <returns>An 18-tuple (octodecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateNineteen``19(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18)">
            <summary>
            Creates a new 19-tuple, or novemdecuple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tuple.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the tuple.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the tuple.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <param name="arg16">The value of the sixteenth parameter of the tuple.</param>
            <param name="arg17">The value of the seventeenth parameter of the tuple.</param>
            <param name="arg18">The value of the eighteenth parameter of the tuple.</param>
            <param name="arg19">The value of the nineteenth parameter of the tuple.</param>
            <returns>A 19-tuple (novemdecuple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19).</returns>
        </member>
        <member name="M:Cuemon.Template.CreateTwenty``20(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19)">
            <summary>
            Creates a new 20-tuple, or viguple, representation of a <see cref="T:Cuemon.Template"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tuple.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tuple.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tuple.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tuple.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tuple.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tuple.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tuple.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tuple.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tuple.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tuple.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the tuple.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the tuple.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the tuple.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the tuple.</typeparam>
            <param name="arg1">The value of the first parameter of the tuple.</param>
            <param name="arg2">The value of the second parameter of the tuple.</param>
            <param name="arg3">The value of the third parameter of the tuple.</param>
            <param name="arg4">The value of the fourth parameter of the tuple.</param>
            <param name="arg5">The value of the fifth parameter of the tuple.</param>
            <param name="arg6">The value of the sixth parameter of the tuple.</param>
            <param name="arg7">The value of the seventh parameter of the tuple.</param>
            <param name="arg8">The value of the eighth parameter of the tuple.</param>
            <param name="arg9">The value of the ninth parameter of the tuple.</param>
            <param name="arg10">The value of the tenth parameter of the tuple.</param>
            <param name="arg11">The value of the eleventh parameter of the tuple.</param>
            <param name="arg12">The value of the twelfth parameter of the tuple.</param>
            <param name="arg13">The value of the thirteenth parameter of the tuple.</param>
            <param name="arg14">The value of the fourteenth parameter of the tuple.</param>
            <param name="arg15">The value of the fifteenth parameter of the tuple.</param>
            <param name="arg16">The value of the sixteenth parameter of the tuple.</param>
            <param name="arg17">The value of the seventeenth parameter of the tuple.</param>
            <param name="arg18">The value of the eighteenth parameter of the tuple.</param>
            <param name="arg19">The value of the nineteenth parameter of the tuple.</param>
            <param name="arg20">The value of the twentieth parameter of the tuple.</param>
            <returns>A 20-tuple (viguple) whose value is (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20).</returns>
        </member>
        <member name="M:Cuemon.Template.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template.ToArray(System.Object[])">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance concatenated with the specified <paramref name="additionalArgs"/>.
            </summary>
            <param name="additionalArgs">The additional arguments to concatenate with the objects that represent the arguments passed to this instance.</param>
            <returns>An array of objects that represent the arguments passed to this instance concatenated with the specified <paramref name="additionalArgs"/>.</returns>
        </member>
        <member name="P:Cuemon.Template.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Template"/> is empty.
            </summary>
            <value><c>true</c> if this <see cref="T:Cuemon.Template"/> is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Template.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cuemon.Template.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`1">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with a single generic value.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`1"/> class.
            </summary>
            <param name="arg1">The value of the parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`1.Arg1">
            <summary>
            Gets or sets the first parameter of this instance.
            </summary>
            <value>The first parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`1.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="P:Cuemon.Template`1.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Template" /> is empty.
            </summary>
            <value><c>true</c> if this <see cref="T:Cuemon.Template" /> is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Template`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`2">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with two generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`2"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`2.Arg2">
            <summary>
            Gets or sets the second parameter of this instance.
            </summary>
            <value>The second parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`2.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`2.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`3">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with three generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`3"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`3.Arg3">
            <summary>
            Gets or sets the third parameter of this instance.
            </summary>
            <value>The third parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`3.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`3.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`4">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with four generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`4"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`4.Arg4">
            <summary>
            Gets or sets the fourth parameter of this instance.
            </summary>
            <value>The fourth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`4.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`4.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`5">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with five generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`5"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`5.Arg5">
            <summary>
            Gets or sets the fifth parameter of this instance.
            </summary>
            <value>The fifth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`5.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`5.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`6">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with six generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`6"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`6.Arg6">
            <summary>
            Gets or sets the sixth parameter of this instance.
            </summary>
            <value>The sixth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`6.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`6.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`7">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with seven generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`7"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`7.Arg7">
            <summary>
            Gets or sets the seventh parameter of this instance.
            </summary>
            <value>The seventh parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`7.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`7.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`8">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with eight generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`8"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`8.Arg8">
            <summary>
            Gets or sets the eighth parameter of this instance.
            </summary>
            <value>The eighth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`8.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`8.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`9">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with nine generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`9"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`9.Arg9">
            <summary>
            Gets or sets the ninth parameter of this instance.
            </summary>
            <value>The ninth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`9.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`9.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`10">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with ten generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`10"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`10.Arg10">
            <summary>
            Gets or sets the tenth parameter of this instance.
            </summary>
            <value>The tenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`10.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`10.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`11">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with eleven generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`11"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`11.Arg11">
            <summary>
            Gets or sets the eleventh parameter of this instance.
            </summary>
            <value>The eleventh parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`11.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`11.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`12">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with twelve generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`12"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`12.Arg12">
            <summary>
            Gets or sets the twelfth parameter of this instance.
            </summary>
            <value>The twelfth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`12.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`12.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`13">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with thirteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`13"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`13.Arg13">
            <summary>
            Gets or sets the thirteenth parameter of this instance.
            </summary>
            <value>The thirteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`13.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`13.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`14">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with fourteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`14"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`14.Arg14">
            <summary>
            Gets or sets the fourteenth parameter of this instance.
            </summary>
            <value>The fourteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`14.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`14.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`15">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with fifteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`15"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`15.Arg15">
            <summary>
            Gets or sets the fifteenth parameter of this instance.
            </summary>
            <value>The fifteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`15.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`15.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`16">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with sixteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`16.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`16"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg16">The value of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`16.Arg16">
            <summary>
            Gets or sets the sixteenth parameter of this instance.
            </summary>
            <value>The sixteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`16.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`16.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`17">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with seventeen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`17.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`17"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg16">The value of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg17">The value of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`17.Arg17">
            <summary>
            Gets or sets the seventeenth parameter of this instance.
            </summary>
            <value>The seventeenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`17.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`17.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`18">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with eighteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`18.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`18"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg16">The value of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg17">The value of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg18">The value of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`18.Arg18">
            <summary>
            Gets or sets the eighteenth parameter of this instance.
            </summary>
            <value>The eighteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`18.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`18.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`19">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with nineteen generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`19.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`19"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg16">The value of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg17">The value of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg18">The value of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg19">The value of the nineteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`19.Arg19">
            <summary>
            Gets or sets the nineteenth parameter of this instance.
            </summary>
            <value>The nineteenth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`19.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`19.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Template`20">
            <summary>
            Represents a <see cref="T:Cuemon.Template"/> with twenty generic values.
            </summary>
            <typeparam name="T1">The type of the first parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of this <see cref="T:Cuemon.Template"/>.</typeparam>
            <remarks>
            Inspired by Tuple objects, Template, was chosen because of the naming conflict in newer version of the .NET Framework. 
            The name, Template, was inspired by the Variadic Template in C++.
            </remarks>
        </member>
        <member name="M:Cuemon.Template`20.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Template`20"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg2">The value of the second parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg3">The value of the third parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg4">The value of the fourth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg5">The value of the fifth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg6">The value of the sixth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg7">The value of the seventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg8">The value of the eighth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg9">The value of the ninth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg10">The value of the tenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg11">The value of the eleventh parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg12">The value of the twelfth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg13">The value of the thirteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg14">The value of the fourteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg15">The value of the fifteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg16">The value of the sixteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg17">The value of the seventeenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg18">The value of the eighteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg19">The value of the nineteenth parameter of this <see cref="T:Cuemon.Template"/>.</param>
            <param name="arg20">The value of the twentieth parameter of this <see cref="T:Cuemon.Template"/>.</param>
        </member>
        <member name="P:Cuemon.Template`20.Arg20">
            <summary>
            Gets or sets the twentieth parameter of this instance.
            </summary>
            <value>The twentieth parameter of this instance.</value>
        </member>
        <member name="M:Cuemon.Template`20.ToArray">
            <summary>
            Returns an array of objects that represent the arguments passed to this instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.Template`20.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Template" /> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Template" /> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.TemplateFactory`1">
            <summary>
            Provides a base-class for delegate based factories.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
        </member>
        <member name="M:Cuemon.TemplateFactory`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TemplateFactory`1"/> class.
            </summary>
            <param name="tuple">Then-tuple representation of a <see cref="T:Cuemon.Template"/>.</param>
            <param name="hasDelegate"><c>true</c> if this instance has a valid delegate; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:Cuemon.TemplateFactory`1.GenericArguments">
            <summary>
            Gets a n-tuple representation of a <see cref="T:Cuemon.Template"/> that represents the generic arguments passed to this instance.
            </summary>
            <value>The n-tuple representation of a <see cref="T:Cuemon.Template"/> that represents the generic arguments passed to this instance.</value>
        </member>
        <member name="P:Cuemon.TemplateFactory`1.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate.
            </summary>
            <value><c>true</c> if this instance an assigned delegate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.TemplateFactory`1.DelegateInfo">
            <summary>
            Gets the method represented by the delegate.
            </summary>
            <value>A <see cref="T:System.Reflection.MethodInfo"/> describing the method represented by the delegate. </value>
        </member>
        <member name="M:Cuemon.TemplateFactory`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cuemon.TemplateFactory`1.ThrowIfNoValidDelegate(System.Boolean)">
            <summary>
            Validates and throws an <see cref="T:System.InvalidOperationException"/> if this instance has no valid delegate.
            </summary>
            <param name="delegateIsNull">The value of a condition that can be either <c>true</c> or <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            No delegate was specified on the factory.
            </exception>
        </member>
        <member name="M:Cuemon.TemplateFactory`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.TemplateFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.TemplateFactory`1"/> implementation that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.TesterFunc`2">
            <summary>
            Encapsulates a method and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`3">
            <summary>
            Encapsulates a method that has one parameter and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`4">
            <summary>
            Encapsulates a method that has two parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`5">
            <summary>
            Encapsulates a method that has three parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`6">
            <summary>
            Encapsulates a method that has four parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`7">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`8">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`9">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`10">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`11">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`12">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`13">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`14">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`15">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`16">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`17">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFunc`18">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="result">The result of the method that this function delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this function delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterFuncFactory">
            <summary>
            Provides access to factory methods for creating <see cref="T:Cuemon.TesterFuncFactory`3"/> instances that encapsulate a tester function delegate with a variable amount of generic arguments.
            </summary>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``2(Cuemon.TesterFunc{``0,``1})">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/>.
            </summary>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``3(Cuemon.TesterFunc{``0,``1,``2},``0)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and one generic argument.
            </summary>
            <typeparam name="T">The type of the parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg">The parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and one generic argument.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``4(Cuemon.TesterFunc{``0,``1,``2,``3},``0,``1)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and two generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and two generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``5(Cuemon.TesterFunc{``0,``1,``2,``3,``4},``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and three generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and three generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``6(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and four generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and four generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``7(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and five generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and five generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``8(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and six generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and six generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``9(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and seven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and seven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``10(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and eight generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and eight generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``11(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and nine generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and nine generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``12(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and ten generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and ten generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``13(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and eleven generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and eleven generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``14(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and twelfth generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and twelfth generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``15(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and thirteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and thirteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``16(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and fourteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and fourteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``17(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and fifteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and fifteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Create``18(Cuemon.TesterFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Creates a new <see cref="T:Cuemon.TesterFuncFactory`3"/> instance encapsulating the specified <paramref name="method"/> and sixteen generic arguments.
            </summary>
            <typeparam name="T1">The type of the first parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the tester function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="arg1">The first parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the tester function delegate <paramref name="method"/>.</param>
            <returns>An instance of <see cref="T:Cuemon.TesterFuncFactory`3"/> object initialized with the specified <paramref name="method"/> and sixteen generic arguments.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory.Invoke``3(Cuemon.TesterFunc{``0,``1,``2},``0,``1@)">
            <summary>
            Invokes the specified delegate <paramref name="method"/> with a n-<paramref name="tuple"/> argument.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate  <paramref name="method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="result">The out result value of the tester function delegate.</param>
            <returns>The return value that indicates success of the tester function delegate <paramref name="method"/>.</returns>
        </member>
        <member name="T:Cuemon.TesterFuncFactory`3">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.TesterFunc`2" /> function delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TTuple">The type of the n-tuple representation of a <see cref="T:Cuemon.Template"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the tester function delegate <see cref="P:Cuemon.TesterFuncFactory`3.Method"/>.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the tester function delegate <see cref="P:Cuemon.TesterFuncFactory`3.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.TesterFuncFactory`3.#ctor(Cuemon.TesterFunc{`0,`1,`2},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TesterFuncFactory`3"/> class.
            </summary>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.TesterFuncFactory`3.#ctor(Cuemon.TesterFunc{`0,`1,`2},`0,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TesterFuncFactory`3"/> class.
            </summary>
            <param name="method">The tester function delegate to invoke.</param>
            <param name="tuple">The n-tuple argument of <paramref name="method"/>.</param>
            <param name="originalDelegate">The original delegate wrapped by <paramref name="method"/>.</param>
        </member>
        <member name="P:Cuemon.TesterFuncFactory`3.Method">
            <summary>
            Gets the tester function delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.TesterFunc`2"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.TesterFuncFactory`3.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned tester function delegate.
            </summary>
            <value><c>true</c> if this instance an assigned tester function delegate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.TesterFuncFactory`3.DelegateInfo">
            <summary>
            Gets the method represented by the tester function delegate.
            </summary>
            <value>A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the tester function delegate.</value>
        </member>
        <member name="M:Cuemon.TesterFuncFactory`3.ExecuteMethod(`1@)">
            <summary>
            Executes the tester function delegate associated with this instance.
            </summary>
            <param name="result">The out result value of the tester function delegate.</param>
            <returns>The return value that indicates success of the tester function delegate associated with this instance.</returns>
        </member>
        <member name="M:Cuemon.TesterFuncFactory`3.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.TesterFuncFactory`3"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.TesterFuncFactory`3"/> that is a copy of this instance.</returns>
            <remarks>When thread safety is required this is the method to invoke.</remarks>
        </member>
        <member name="T:Cuemon.Text.AsyncEncodingOptions">
            <summary>
            Specifies options that is related to the <see cref="T:System.Text.Encoding"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Text.AsyncEncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.EncodingOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.EncodingOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.AsyncEncodingOptions.CancellationToken"/></term>
                    <description><c>default</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.AsyncEncodingOptions.CancellationToken">
            <summary>
            Gets or sets the cancellation token of an asynchronous operations.
            </summary>
            <value>The cancellation token of an asynchronous operations.</value>
        </member>
        <member name="T:Cuemon.Text.ByteOrderMark">
            <summary>
            Provides a set of static methods for Unicode related operations.
            </summary>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.Decode(System.Byte[])">
            <summary>
            Decodes a BOM-preamble of the specified <paramref name="bytes"/> to its equivalent <see cref="T:System.Text.Encoding"/> representation.
            </summary>
            <param name="bytes">The <see cref="T:byte[]"/> to be converted into an <see cref="T:System.Text.Encoding"/>.</param>
            <returns>An <see cref="T:System.Text.Encoding"/> that is equivalent to the BOM-preamble of <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="bytes"/> was without byte order mark information (BOM).
            </exception>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.DetectEncodingOrDefault(System.Byte[],System.Text.Encoding)">
            <summary>
            Tries to detect an <see cref="T:System.Text.Encoding"/> object from the specified <paramref name="input"/>.
            If unsuccessful, the <paramref name="fallbackEncoding"/> value is returned. Default is <see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/>.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to parse for an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="fallbackEncoding">The <see cref="T:System.Text.Encoding"/> to use when conversion is unsuccessful.</param>
            <returns>Either the detected encoding of <paramref name="input"/>  or the <paramref name="fallbackEncoding"/> encoding.</returns>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.DetectEncodingOrDefault(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Tries to detect an <see cref="T:System.Text.Encoding"/> object from the specified <paramref name="value"/>.
            If unsuccessful, the <paramref name="fallbackEncoding"/> value is returned.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to parse for an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="fallbackEncoding">The <see cref="T:System.Text.Encoding"/> to use when conversion is unsuccessful.</param>
            <returns>Either the detected encoding of <paramref name="value"/>  or the <paramref name="fallbackEncoding"/> encoding.</returns>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.TryDetectEncoding(System.Byte[],System.Text.Encoding@)">
            <summary>
            Tries to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from the specified <see cref="T:byte[]"/>.
            </summary>
            <param name="input">The <see cref="T:byte[]"/> to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from.</param>
            <param name="result">When this method returns, it contains the Unicode <see cref="T:System.Text.Encoding"/> value equivalent to the encoding contained in <paramref name="input"/>, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the <paramref name="input"/> parameter is null, or does not contain a Unicode representation of an <see cref="T:System.Text.Encoding"/>.</param>
            <returns><c>true</c> if the <paramref name="input"/> parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.TryDetectEncoding(System.IO.Stream,System.Text.Encoding@)">
            <summary>
            Tries to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from the specified <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from.</param>
            <param name="result">When this method returns, it contains the Unicode <see cref="T:System.Text.Encoding"/> value equivalent to the encoding contained in <paramref name="value"/>, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the <paramref name="value"/> parameter is null, or does not contain a Unicode representation of an <see cref="T:System.Text.Encoding"/>.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.Remove(System.IO.Stream,System.Text.Encoding,System.Action{Cuemon.DisposableOptions})">
            <summary>
            Removes the preamble information (if present) from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to process.</param>
            <param name="encoding">The encoding to use when determining the preamble to remove.</param>
            <param name="setup">The <see cref="T:Cuemon.DisposableOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.IO.Stream"/> without preamble information.</returns>
        </member>
        <member name="M:Cuemon.Text.ByteOrderMark.Remove(System.Byte[],System.Text.Encoding)">
            <summary>
            Removes the preamble information (if present) from the specified <see cref="T:byte[]"/>.
            </summary>
            <param name="bytes">The bytes <see cref="T:byte[]"/>  to process.</param>
            <param name="encoding">The encoding to use when determining the preamble to remove.</param>
            <returns>A <see cref="T:System.Byte"/> array without preamble information.</returns>
        </member>
        <member name="T:Cuemon.Text.EncodingOptions">
            <summary>
            Specifies options that is related to the <see cref="T:System.Text.Encoding"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence">
            <summary>
            Gets or sets the default preamble action of <see cref="T:Cuemon.Text.EncodingOptions"/>. Default is <see cref="F:Cuemon.Text.PreambleSequence.Remove"/>.
            </summary>
            <value>The default preamble action to use in <see cref="T:System.Text.Encoding"/> related operations.</value>
            <remarks>Warning: changing this value should be thought through carefully as it can change the behavior you have come to expect. Consider using local adjustment instead.</remarks>
        </member>
        <member name="P:Cuemon.Text.EncodingOptions.DefaultEncoding">
            <summary>
            Gets or sets the default encoding of <see cref="T:Cuemon.Text.EncodingOptions"/>. Default is <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <value>The default encoding to use in <see cref="T:System.Text.Encoding"/> related operations.</value>
            <remarks>Warning: changing this value should be thought through carefully as it can change the behavior you have come to expect. Consider using local adjustment instead.</remarks>
        </member>
        <member name="M:Cuemon.Text.EncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.EncodingOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.EncodingOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.EncodingOptions.Preamble"/></term>
                    <description><see cref="P:Cuemon.Text.EncodingOptions.DefaultPreambleSequence"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Text.EncodingOptions.Encoding"/></term>
                    <description><see cref="P:Cuemon.Text.EncodingOptions.DefaultEncoding"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.EncodingOptions.Preamble">
            <summary>
            Gets or sets the action to take in regards to encoding related preamble sequences.
            </summary>
            <value>A value that indicates whether to preserve or remove preamble sequences.</value>
        </member>
        <member name="P:Cuemon.Text.EncodingOptions.Encoding">
            <summary>
            Gets or sets the encoding for the operation.
            </summary>
            <value>The encoding for the operation.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Text.EnumStringOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Text.ParserFactory.FromEnum"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Text.EnumStringOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.EnumStringOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.EnumStringOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.EnumStringOptions.IgnoreCase"/></term>
                    <description><c>true</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.EnumStringOptions.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore or regard the case of the string being parsed.
            </summary>
            <value><c>true</c> to ignore the case of the string being parsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.Text.FallbackEncodingOptions">
            <summary>
            Configuration options related to <see cref="T:System.Text.Encoding"/>.
            </summary>
            <seealso cref="T:Cuemon.Text.EncodingOptions" />
        </member>
        <member name="M:Cuemon.Text.FallbackEncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.FallbackEncodingOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.FallbackEncodingOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.FallbackEncodingOptions.EncoderFallback"/></term>
                    <description><c>EncoderFallback.ExceptionFallback</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Text.FallbackEncodingOptions.DecoderFallback"/></term>
                    <description><c>DecoderFallback.ExceptionFallback</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.FallbackEncodingOptions.EncoderFallback">
            <summary>
            Gets or sets the object that provides an error-handling procedure when a character cannot be encoded.
            </summary>
            <value>The object that provides an error-handling procedure when a character cannot be encoded.</value>
        </member>
        <member name="P:Cuemon.Text.FallbackEncodingOptions.DecoderFallback">
            <summary>
            Gets or sets the object that provides an error-handling procedure when a byte sequence cannot be decoded.
            </summary>
            <value>The object that provides an error-handling procedure when a byte sequence cannot be decoded.</value>
        </member>
        <member name="P:Cuemon.Text.FallbackEncodingOptions.TargetEncoding">
            <summary>
            Gets or sets the target encoding for the operation.
            </summary>
            <value>The target encoding for the operation.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Text.GuidStringOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Text.ParserFactory.FromGuid"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Text.GuidStringOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.GuidStringOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.GuidStringOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.GuidStringOptions.Formats"/></term>
                    <description><c>GuidFormats.BraceFormat | GuidFormats.DigitFormat | GuidFormats.ParenthesisFormat</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.GuidStringOptions.Formats">
            <summary>
            Gets or sets the allowed GUID formats.
            </summary>
            <value>The allowed GUID formats.</value>
        </member>
        <member name="T:Cuemon.Text.IConfigurableParser`1">
            <summary>
            Defines methods that converts a <see cref="T:System.String"/> to an <see cref="T:System.Object"/> of a particular type.
            </summary>
            <typeparam name="TOptions">The type of the delegate setup.</typeparam>
            <seealso cref="T:Cuemon.Text.IParser" />
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`1.Parse``1(System.String,System.Action{`0})">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="input">The string to convert.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns>An object of <typeparamref name="T"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`1.Parse(System.String,System.Type,System.Action{`0})">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <paramref name="targetType"/>.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="targetType">The type of the object to return.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns>An object of <paramref name="targetType"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`1.TryParse``1(System.String,``0@,System.Action{`0})">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <typeparamref name="T"/>. A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="input">The string to convert.</param>
            <param name="result">When this method returns, contains the object of <typeparamref name="T"/> equivalent to <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`1.TryParse(System.String,System.Type,System.Object@,System.Action{`0})">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <paramref name="targetType"/>. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="targetType">The type of the object to return.</param>
            <param name="result">When this method returns, contains the object of <paramref name="targetType"/> equivalent to <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Text.IConfigurableParser`2">
            <summary>
            Defines methods that converts a <see cref="T:System.String"/> to a generic object of <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the converted result.</typeparam>
            <typeparam name="TOptions">The type of the delegate setup.</typeparam>
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`2.Parse(System.String,System.Action{`1})">
            <summary>
            Converts the <paramref name="input"/> to its <typeparamref name="TResult"/> equivalent.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns>A <typeparamref name="TResult"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IConfigurableParser`2.TryParse(System.String,`0@,System.Action{`1})">
            <summary>
            Converts the <paramref name="input"/> to its <typeparamref name="TResult"/> equivalent. A return input indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> equivalent of the <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <param name="setup">The <typeparamref name="TOptions"/> which may be configured.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Text.IEncodingOptions">
            <summary>
            Defines options that is related to <see cref="T:System.Text.Encoding"/> operations.
            </summary>
        </member>
        <member name="P:Cuemon.Text.IEncodingOptions.Preamble">
            <summary>
            Gets or sets the action to take in regards to encoding related preamble sequences.
            </summary>
            <value>A value that indicates whether to preserve or remove preamble sequences.</value>
        </member>
        <member name="P:Cuemon.Text.IEncodingOptions.Encoding">
            <summary>
            Gets or sets the character encoding to use for the operation.
            </summary>
            <value>The character encoding to use for the operation.</value>
        </member>
        <member name="T:Cuemon.Text.IParser">
            <summary>
            Defines methods that converts a <see cref="T:System.String"/> to an <see cref="T:System.Object"/> of a particular type.
            </summary>
        </member>
        <member name="M:Cuemon.Text.IParser.Parse``1(System.String)">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="input">The string to convert.</param>
            <returns>An object of <typeparamref name="T"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IParser.Parse(System.String,System.Type)">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <paramref name="targetType"/>.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="targetType">The type of the object to return.</param>
            <returns>An object of <paramref name="targetType"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IParser.TryParse``1(System.String,``0@)">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <typeparamref name="T"/>. A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="input">The string to convert.</param>
            <param name="result">When this method returns, contains the object of <typeparamref name="T"/> equivalent to <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Text.IParser.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            Converts the specified <paramref name="input"/> to an object of <paramref name="targetType"/>. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="targetType">The type of the object to return.</param>
            <param name="result">When this method returns, contains the object of <paramref name="targetType"/> equivalent to <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Text.IParser`1">
            <summary>
            Defines methods that converts a <see cref="T:System.String"/> to a generic object of <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the converted result.</typeparam>
        </member>
        <member name="M:Cuemon.Text.IParser`1.Parse(System.String)">
            <summary>
            Converts the <paramref name="input"/> to its <typeparamref name="TResult"/> equivalent.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A <typeparamref name="TResult"/> equivalent to <paramref name="input"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.IParser`1.TryParse(System.String,`0@)">
            <summary>
            Converts the <paramref name="input"/> to its <typeparamref name="TResult"/> equivalent. A return input indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> equivalent of the <paramref name="input"/>, if the conversion succeeded, or <c>default</c> if the conversion failed.</param>
            <returns><c>true</c> if <paramref name="input"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Text.ParserFactory">
            <summary>
            Provides access to factory methods that are tailored for parsing operations adhering <see cref="T:Cuemon.Text.IParser"/> and <see cref="T:Cuemon.Text.IConfigurableParser`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.CreateParser(System.Func{System.String,System.Type,System.Object})">
            <summary>
            Creates an <see cref="T:Cuemon.Text.IParser"/> implementation from the specified <paramref name="parser"/>.
            </summary>
            <param name="parser">The function delegate that does the actual parsing of a <see cref="T:System.String"/>.</param>
            <returns>An <see cref="T:Cuemon.Text.IParser"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.CreateParser``1(System.Func{System.String,``0})">
            <summary>
            Creates an <see cref="T:Cuemon.Text.IParser`1"/> implementation from the specified <paramref name="parser"/>.
            </summary>
            <typeparam name="TResult">The type of the converted result.</typeparam>
            <param name="parser">The function delegate that does the actual parsing of a <see cref="T:System.String"/>.</param>
            <returns>An <see cref="T:Cuemon.Text.IParser`1"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.CreateConfigurableParser``1(System.Func{System.String,System.Type,System.Action{``0},System.Object})">
            <summary>
            Creates an <see cref="T:Cuemon.Text.IConfigurableParser`1"/> implementation from the specified <paramref name="parser"/>.
            </summary>
            <typeparam name="TOptions">The type of the delegate setup.</typeparam>
            <param name="parser">The function delegate that does the actual parsing of a <see cref="T:System.String"/>.</param>
            <returns>An <see cref="T:Cuemon.Text.IConfigurableParser`1"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.CreateConfigurableParser``2(System.Func{System.String,System.Action{``1},``0})">
            <summary>
            Creates an <see cref="T:Cuemon.Text.IConfigurableParser`2"/> implementation from the specified <paramref name="parser"/>.
            </summary>
            <typeparam name="TResult">The type of the converted result.</typeparam>
            <typeparam name="TOptions">The type of the delegate setup.</typeparam>
            <param name="parser">The function delegate that does the actual parsing of a <see cref="T:System.String"/>.</param>
            <returns>An <see cref="T:Cuemon.Text.IConfigurableParser`2"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromBase64">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented in base-64 digits, to its equivalent <see cref="T:byte[]"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{byte[]}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="T:System.String"/> consist of illegal base-64 digits.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromBinaryDigits">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented in binary digits, to its equivalent <see cref="T:byte[]"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{byte[]}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="T:System.String"/> must consist only of binary digits.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromGuid">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/> to its equivalent <see cref="T:System.Guid"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{Guid,GuidStringOptions}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="T:System.String"/> was not recognized to be a GUID.
            </exception>
            <seealso cref="M:System.Guid.Parse(System.String)"/>
            <seealso cref="M:System.Guid.ParseExact(System.String,System.String)"/>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromHexadecimal">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented in hexadecimal digits, to its equivalent <see cref="T:byte[]"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{byte[]}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> must be hexadecimal.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromUriScheme">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented as an URI scheme, to its equivalent <see cref="T:Cuemon.UriScheme"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{UriScheme}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromUrlEncodedBase64">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented in URL-safe base-64 digits, to its equivalent <see cref="T:byte[]"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{byte[]}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="T:System.String"/> consist of illegal base-64 digits.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromValueType">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented as a simple input type, to its equivalent <see cref="T:System.Boolean"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.Single"/>, <see cref="T:System.DateTime"/> or <see cref="T:System.Guid"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{object,FormattingOptions{CultureInfo}}"/> implementation.</returns>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromUri">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented as an URL, to its equivalent <see cref="T:System.Uri"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{Uri,UriStringOptions}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromProtocolRelativeUri">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/>, represented as a protocol relative URL, to its equivalent <see cref="T:System.Uri"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{Uri,UriStringOptions}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromObject">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/> to an <see cref="T:System.Object"/> of a particular type.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{ObjectFormattingOptions}"/> implementation.</returns>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:System.String"/> cannot be converted to the specified <see cref="T:System.Type"/>.
            </exception>
            <remarks>If the underlying <see cref="T:System.IFormatProvider"/> of <see cref="P:Cuemon.ObjectFormattingOptions.FormatProvider"/> is a <see cref="T:System.Globalization.CultureInfo"/>, then this will be used in the conversion.</remarks>
        </member>
        <member name="M:Cuemon.Text.ParserFactory.FromEnum">
            <summary>
            Creates a parser that converts a <see cref="T:System.String"/> to its equivalent <see cref="T:System.Enum"/>.
            </summary>
            <returns>An <see cref="T:IConfigurableParser{EnumStringOptions}"/> implementation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <see cref="T:System.String"/> cannot be null -or-
            <see cref="T:System.Type"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <see cref="T:System.String"/> cannot be empty or consist only of white-space characters -or-
            <see cref="T:System.Type"/> does not represents an enumeration.
            </exception>
            <exception cref="T:System.OverflowException">
            <see cref="T:System.String"/> is outside the range of the underlying type of <see cref="T:System.Type"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <see cref="T:System.String"/> is not type SByte, Int16, Int32, Int64, Byte, UInt16, UInt32, or UInt64, or String.
            </exception>
        </member>
        <member name="T:Cuemon.Text.PreambleSequence">
            <summary>
            Specifies what action to take in regards to encoding preamble sequences.
            </summary>
        </member>
        <member name="F:Cuemon.Text.PreambleSequence.Keep">
            <summary>
            Any encoding preamble sequences will be preserved.
            </summary>
        </member>
        <member name="F:Cuemon.Text.PreambleSequence.Remove">
            <summary>
            Any encoding preamble sequences will be removed.
            </summary>
        </member>
        <member name="T:Cuemon.Text.ProtocolRelativeUriStringOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Text.ParserFactory.FromProtocolRelativeUri"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Text.ProtocolRelativeUriStringOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.ProtocolRelativeUriStringOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.ProtocolRelativeUriStringOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.ProtocolRelativeUriStringOptions.Protocol"/></term>
                    <description><see cref="F:Cuemon.UriScheme.Https"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Text.ProtocolRelativeUriStringOptions.RelativeReference"/></term>
                    <description><see cref="F:Cuemon.Alphanumeric.NetworkPathReference"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.ProtocolRelativeUriStringOptions.Protocol">
            <summary>
            Gets or sets the protocol to replace the relative reference.
            </summary>
            <value>The protocol to replace the relative reference.</value>
        </member>
        <member name="P:Cuemon.Text.ProtocolRelativeUriStringOptions.RelativeReference">
            <summary>
            Gets or sets the protocol relative reference that needs to be replaced.
            </summary>
            <value>The protocol relative reference that needs to be replaced.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="T:Cuemon.Text.Stem">
            <summary>
            Provides a way to support assigning a stem to a value.
            </summary>
        </member>
        <member name="M:Cuemon.Text.Stem.op_Implicit(System.String)~Cuemon.Text.Stem">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Cuemon.Text.Stem"/>.
            </summary>
            <param name="stem">The <see cref="T:System.String"/> to convert.</param>
            <returns>A <see cref="T:Cuemon.Text.Stem"/> that is equivalent to <paramref name="stem"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.Stem.op_Implicit(Cuemon.Text.Stem)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Cuemon.Text.Stem"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="stem">The <see cref="T:Cuemon.Text.Stem"/> to convert.</param>
            <returns>A <see cref="T:System.String"/> that is equivalent to <paramref name="stem"/>.</returns>
        </member>
        <member name="M:Cuemon.Text.Stem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.Stem"/> class.
            </summary>
            <param name="value">The stem to apply affixes.</param>
        </member>
        <member name="P:Cuemon.Text.Stem.Value">
            <summary>
            Gets the value of this instance.
            </summary>
            <value>The value of this instance.</value>
        </member>
        <member name="M:Cuemon.Text.Stem.AttachSuffix(System.String)">
            <summary>
            Attaches the specified <paramref name="suffix"/> to the stem of this instance.
            </summary>
            <param name="suffix">The affix that must appear after the stem of this instance.</param>
            <returns>A string where the specified <paramref name="suffix"/> appears after the stem of this instance.</returns>
            <remarks>This method attaches the <paramref name="suffix"/> to the stem only if not already part of the ending.</remarks>
        </member>
        <member name="M:Cuemon.Text.Stem.AttachSuffix(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Attaches the specified <paramref name="suffix"/> to the stem of this instance.
            </summary>
            <param name="suffix">The affix that must appear after the stem of this instance.</param>
            <param name="condition">The function delegate that provides a condition for when to attach the <paramref name="suffix"/> to the stem.</param>
            <returns>A string where the specified <paramref name="suffix"/> appears after the stem of this instance.</returns>
        </member>
        <member name="M:Cuemon.Text.Stem.AttachPrefix(System.String)">
            <summary>
            Attaches the specified <paramref name="prefix"/> to the stem of this instance.
            </summary>
            <param name="prefix">The affix that must appear before the stem of this instance.</param>
            <returns>A string where the specified <paramref name="prefix"/> appears before the stem of this instance.</returns>
            <remarks>This method attaches the <paramref name="prefix"/> to the stem only if not already part of the beginning.</remarks>
        </member>
        <member name="M:Cuemon.Text.Stem.AttachPrefix(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Attaches the specified <paramref name="prefix"/> to the stem of this instance.
            </summary>
            <param name="prefix">The affix that must appear before the stem of this instance.</param>
            <param name="condition">The function delegate that provides a condition for when to attach the <paramref name="prefix"/> to the stem.</param>
            <returns>A string where the specified <paramref name="prefix"/> appears before the stem of this instance.</returns>
        </member>
        <member name="M:Cuemon.Text.Stem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cuemon.Text.UriStringOptions">
            <summary>
            Configuration options for <see cref="M:Cuemon.Text.ParserFactory.FromUri"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Text.UriStringOptions.AllUriSchemes">
            <summary>
            Gets all supported URI schemes.
            </summary>
            <returns>A sequence of all supported URI schemes.</returns>
        </member>
        <member name="M:Cuemon.Text.UriStringOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.UriStringOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Text.UriStringOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Text.UriStringOptions.Kind"/></term>
                    <description><see cref="F:System.UriKind.Absolute"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Text.UriStringOptions.Schemes"/></term>
                    <description><see cref="P:Cuemon.Text.UriStringOptions.AllUriSchemes"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Text.UriStringOptions.Kind">
            <summary>
            Gets or sets the kind of the URI.
            </summary>
            <value>The kind of the URI.</value>
        </member>
        <member name="P:Cuemon.Text.UriStringOptions.Schemes">
            <summary>
            Gets a collection of <see cref="T:Cuemon.UriScheme"/> values that determines the outcome when parsing a URI.
            </summary>
            <value>The <see cref="T:Cuemon.UriScheme"/> values that determines the outcome when parsing a URI.</value>
        </member>
        <member name="T:Cuemon.Threading.AsyncOptions">
            <summary>
            Specifies options that is related to asynchronous operations.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Threading.AsyncOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Threading.AsyncOptions.CancellationToken"/></term>
                    <description><c>default</c></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Threading.AsyncOptions.CancellationToken">
            <summary>
            Gets or sets the cancellation token of an asynchronous operations.
            </summary>
            <value>The cancellation token of an asynchronous operations.</value>
        </member>
        <member name="T:Cuemon.Threading.IAsyncOptions">
            <summary>
            Defines options that is related to asynchronous operations.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.IAsyncOptions.CancellationToken">
            <summary>
            Gets or sets the cancellation token of an asynchronous operations.
            </summary>
            <value>The cancellation token of an asynchronous operations.</value>
        </member>
        <member name="T:Cuemon.Threading.TimerFactory">
            <summary>
            Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Timer"/> instances.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.TimerFactory.CreateNonCapturingTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Timer"/> class that suppress capturing the ExecutionContext.
            </summary>
            <param name="callback">A delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or <c>null</c>.</param>
            <param name="dueTime">The amount of time to delay before the callback is invoked. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to prevent the timer from starting. Specify <see cref="F:System.TimeSpan.Zero"/> to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable periodic signaling.</param>
            <returns>A new <see cref="T:System.Threading.Timer"/> instance that suppress capturing the ExecutionContext.</returns>
            <remarks>Used by Microsoft internally in various scenarios: https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/Extensions/NonCapturingTimer/NonCapturingTimer.cs</remarks>
        </member>
        <member name="T:Cuemon.TimeRange">
            <summary>
            Represents a period of time between two <see cref="T:System.TimeSpan"/> values.
            </summary>
        </member>
        <member name="M:Cuemon.TimeRange.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TimeRange"/> struct.
            </summary>
            <param name="start">The start of a time range.</param>
            <param name="end">The end of a time range.</param>
        </member>
        <member name="M:Cuemon.TimeRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.TimeUnit">
            <summary>
            Specifies the unit of time - typically used with a <see cref="T:System.TimeSpan" />.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Days">
            <summary>
            Indicates a time unit of Days.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Hours">
            <summary>
            Indicates a time unit of Hours.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Minutes">
            <summary>
            Indicates a time unit of Minutes.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Seconds">
            <summary>
            Indicates a time unit of Seconds.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Milliseconds">
            <summary>
            Indicates a time unit of Milliseconds.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Ticks">
            <summary>
            Indicates a time unit of Ticks, where one Tick is equal to 100 nanoseconds.
            </summary>
        </member>
        <member name="T:Cuemon.Tweaker">
            <summary>
            Provides a way to change any instance of the same generic type.
            </summary>
        </member>
        <member name="M:Cuemon.Tweaker.Adjust``1(``0,System.Func{``0,``0})">
            <summary>
            Adjust the specified <paramref name="value"/> with the function delegate <paramref name="tweaker"/>.
            </summary>
            <typeparam name="T">The type of the value to adjust.</typeparam>
            <param name="value">The value to adjust.</param>
            <param name="tweaker">The function delegate that will adjust the specified <paramref name="value"/>.</param>
            <returns>The <paramref name="value"/> in its original or adjusted form.</returns>
        </member>
        <member name="T:Cuemon.TypeArgumentException">
            <summary>
            The exception that is thrown when one of the type arguments provided to a method is not valid.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Cuemon.TypeArgumentOutOfRangeException">
            <summary>
            The exception that is thrown when the value of an type argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Cuemon.UnitFormatOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.BitUnit" /> and <see cref="T:Cuemon.ByteUnit" />.
            Implements the <see cref="T:Cuemon.FormattingOptions`1" />
            </summary>
            <seealso cref="T:Cuemon.FormattingOptions`1" />
            <seealso cref="T:Cuemon.IPrefixMultiple"/>
            <seealso cref="T:Cuemon.BinaryPrefix"/>
            <seealso cref="T:Cuemon.DecimalPrefix"/>
            <seealso cref="T:Cuemon.NamingStyle"/>
        </member>
        <member name="M:Cuemon.UnitFormatOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.UnitFormatOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.UnitFormatOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.UnitFormatOptions.Style"/></term>
                    <description><see cref="F:Cuemon.NamingStyle.Symbol"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.UnitFormatOptions.NumberFormat"/></term>
                    <description><c>#,##0.##</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.FormattingOptions`1.FormatProvider"/></term>
                    <description><see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.UnitFormatOptions.Style">
            <summary>
            Gets or sets the desired naming style.
            </summary>
            <value>The desired naming style.</value>
        </member>
        <member name="P:Cuemon.UnitFormatOptions.NumberFormat">
            <summary>
            Gets or sets the desired number format.
            </summary>
            <value>The desired number format.</value>
        </member>
        <member name="T:Cuemon.UnitPrefix">
            <summary>
            Specifies the two standards for binary multiples and decimal multiples.
            </summary>
        </member>
        <member name="F:Cuemon.UnitPrefix.Binary">
            <summary>
            Defines the IEEE 1541 standard for binary prefix that refers strictly to powers of 2 (eg. one kibibit represents 1024 bits and not 1000 bits).
            </summary>
        </member>
        <member name="F:Cuemon.UnitPrefix.Decimal">
            <summary>
            Defines the International System of Units (SI) standard for metric prefixes that refers strictly to powers of 10 (eg. one kilobit represents 1000 bits and not 1024 bits).
            </summary>
        </member>
        <member name="T:Cuemon.UnitPrefixFormatter">
            <summary>
            Defines the string formatting of objects having an implementation of either <see cref="T:Cuemon.IPrefixUnit"/> or <see cref="T:Cuemon.IUnit"/>.
            Implements the <see cref="T:System.IFormatProvider" />
            Implements the <see cref="T:System.ICustomFormatter" />
            </summary>
            <seealso cref="T:System.IFormatProvider" />
            <seealso cref="T:System.ICustomFormatter" />
            <seealso cref="T:Cuemon.IUnit"/>
            <seealso cref="T:Cuemon.IPrefixUnit"/>
        </member>
        <member name="M:Cuemon.UnitPrefixFormatter.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>An instance of the object specified by <paramref name="formatType"/>, if the <see cref="T:System.IFormatProvider"/> implementation can supply that type of object; otherwise, null.</returns>
        </member>
        <member name="M:Cuemon.UnitPrefixFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified <paramref name="arg"/> to an equivalent string representation using specified <paramref name="format"/> and culture-specific format <paramref name="formatProvider"/>.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object that implements either interface <see cref="T:Cuemon.IPrefixUnit"/>, <see cref="T:Cuemon.IUnit"/> or both.</param>
            <param name="formatProvider">An object that supplies format information about <paramref name="arg"/>.</param>
            <returns>The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
        </member>
        <member name="T:Cuemon.UriScheme">
            <summary>
            Defines the schemes available for a <see cref="T:System.Uri"/> class.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Undefined">
            <summary>
            Specifies an undefined scheme.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.File">
            <summary>
            Specifies that the URI is a pointer to a file.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Ftp">
            <summary>
            Specifies that the URI is accessed through the File Transfer Protocol (FTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Gopher">
            <summary>
            Specifies that the URI is accessed through the Gopher protocol.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Http">
            <summary>
            Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Https">
            <summary>
            Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Mailto">
            <summary>
            Specifies that the URI is an e-mail address and is accessed through the Simple Mail Transport Protocol (SMTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.NetPipe">
            <summary>
            Specifies that the URI is accessed through the NetPipe scheme of the "Indigo" system.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.NetTcp">
            <summary>
            Specifies that the URI is accessed through the NetTcp scheme of the "Indigo" system.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.News">
            <summary>
            Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Nntp">
            <summary>
            Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Sftp">
            <summary>
            Specifies that the URI is accessed through the Secure File Transfer Protocol (SFTP).
            </summary>
        </member>
        <member name="T:Cuemon.Validator">
            <summary>
            Provides a generic way to validate different types of arguments passed to members.
            </summary>
        </member>
        <member name="P:Cuemon.Validator.ThrowIf">
            <summary>
            Gets the singleton instance of the Validator functionality allowing for extensions methods like: <c>Validator.ThrowIf.InvalidJsonDocument()</c>.
            </summary>
            <value>The singleton instance of the Validator functionality.</value>
        </member>
        <member name="M:Cuemon.Validator.CheckParameter``1(``0,System.Action)">
            <summary>
            Provides a convenient way to validate a parameter while returning the specified <paramref name="value"/> unaltered.
            </summary>
            <typeparam name="T">The type of the object to evaluate.</typeparam>
            <param name="value">The value to be evaluated.</param>
            <param name="validator">The delegate that must throw an <see cref="T:System.Exception"/> if the specified <paramref name="value"/> is not valid.</param>
            <returns>The specified <paramref name="value"/> unaltered.</returns>
        </member>
        <member name="M:Cuemon.Validator.CheckParameter``2(``0,System.Action,System.Func{``0,``1})">
            <summary>
            Provides a convenient way to validate a parameter while returning a value from the specified <paramref name="instance"/>.
            </summary>
            <typeparam name="T">The type of the object to evaluate.</typeparam>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="instance">The value to be evaluated.</param>
            <param name="validator">The delegate that must throw an <see cref="T:System.Exception"/> if the specified <paramref name="instance"/> is not valid.</param>
            <param name="valueSelector">The function delegate that is in charge of selecting the value to return.</param>
            <returns>The value provided by <paramref name="valueSelector"/>.</returns>
        </member>
        <member name="M:Cuemon.Validator.ThrowWhenCondition(System.Action{Cuemon.ExceptionCondition{System.ArgumentException}})">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> (or a derived counterpart) from the specified delegate <paramref name="condition"/>.
            </summary>
            <param name="condition">The delegate that evaluates, creates and ultimately throws an <see cref="T:System.ArgumentException"/> (or a derived counterpart) from within a given scenario.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNumber(System.String,System.String,System.Globalization.NumberStyles)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNumber(System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNumber(System.String,System.String,System.String,System.Globalization.NumberStyles)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNumber(System.String,System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotNumber(System.String,System.String,System.Globalization.NumberStyles)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is not a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotNumber(System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is not a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotNumber(System.String,System.String,System.String,System.Globalization.NumberStyles)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is not a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotNumber(System.String,System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is not a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="styles">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a number.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNull``1(``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentNullException"/> if the specified <paramref name="value"/> is null.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfFalse(System.Func{System.Boolean},System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException" /> if the specified <paramref name="predicate" /> returns <c>false</c>.
            </summary>
            <param name="predicate">The function delegate that determines if an <see cref="T:System.ArgumentException"/> is thrown.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="predicate" /> returned <c>false</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfFalse(System.Boolean,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException" /> if the specified <paramref name="value" /> is <c>false</c>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value" /> must be <c>true</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfTrue(System.Func{System.Boolean},System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException" /> if the specified <paramref name="predicate" /> returns <c>true</c>.
            </summary>
            <param name="predicate">The function delegate that determines if an <see cref="T:System.ArgumentException"/> is thrown.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="predicate" /> returned <c>true</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfTrue(System.Boolean,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException" /> if the specified <paramref name="value" /> is <c>true</c>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value" /> must be <c>false</c>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfSequenceEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has no elements.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> contains no elements.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfSequenceNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Validates and throws either an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is respectively null or has no elements.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> contains no elements.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEmpty(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is empty.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> consist only of white-space characters.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Validates and throws either an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is respectively null or empty.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Validates and throws either an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is respectively null or empty.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Validates and throws either an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is respectively null, empty or consist only of white-space characters.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
            Validates and throws either an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is respectively null, empty or consist only of white-space characters.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be empty or consist only of white-space characters.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfSame``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are of the same instance as the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are of the same instance.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfSame``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are of the same instance as the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are of the same instance.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotSame``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not of the same instance as the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not of the same instance.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotSame``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not of the same instance as the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not of the same instance.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEqual``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEqual``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> object are not equal to the <paramref name="y" /> object.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing <paramref name="x"/> and <paramref name="y"/>.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> and <paramref name="y"/> are not equal to one another.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGreaterThan``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is greater than <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is greater than <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is greater than <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is greater than <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGreaterThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is greater than or equal to <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is greater than or equal to <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGreaterThanOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is greater than or equal to <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is greater than or equal to <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfLowerThan``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is lower than <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is lower than <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfLowerThan``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is lower than <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is lower than <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfLowerThanOrEqual``1(``0,``0,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is lower than or equal to <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is lower than or equal to <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfLowerThanOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="x" /> is lower than or equal to <paramref name="y" />.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="x" /> is lower than or equal to <paramref name="y"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfHex(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is hexadecimal.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be hexadecimal.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotHex(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> is not hexadecimal.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be hexadecimal.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEmailAddress(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has the format of an email address.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be an email address.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEmailAddress(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not have the format of an email address.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be an email address.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGuid(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has the format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a <see cref="T:System.Guid"/>.
            </exception>
            <remarks>
            This implementation only evaluates for GUID formats of: <see cref="F:Cuemon.GuidFormats.D"/> | <see cref="F:Cuemon.GuidFormats.B"/> | <see cref="F:Cuemon.GuidFormats.P"/>, eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses.<br/>
            The reason not to include <see cref="F:Cuemon.GuidFormats.N"/>, eg. 32 digits is the possible unintended GUID result of a MD5 string representation.
            </remarks>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfGuid(System.String,Cuemon.GuidFormats,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has the format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="format">A bitmask comprised of one or more <see cref="T:Cuemon.GuidFormats"/> that specify how the GUID parsing is conducted.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a <see cref="T:System.Guid"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotGuid(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not have the format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a <see cref="T:System.Guid"/>.
            </exception>
            <remarks>
            This implementation only evaluates for GUID formats of: <see cref="F:Cuemon.GuidFormats.D"/> | <see cref="F:Cuemon.GuidFormats.B"/> | <see cref="F:Cuemon.GuidFormats.P"/>, eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses.<br/>
            The reason not to include <see cref="F:Cuemon.GuidFormats.N"/>, eg. 32 digits is the possible unintended GUID result of a MD5 string representation.
            </remarks>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotGuid(System.String,Cuemon.GuidFormats,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not have the format of a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="format">A bitmask comprised of one or more <see cref="T:Cuemon.GuidFormats"/> that specify how the GUID parsing is conducted.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a <see cref="T:System.Guid"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfUri(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has the format of a <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a <see cref="T:System.Uri"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfUri(System.String,System.UriKind,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> has the format of a <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="uriKind">The type of the URI.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> cannot be a <see cref="T:System.Uri"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotUri(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not have the format of a <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a <see cref="T:System.Uri"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotUri(System.String,System.UriKind,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not have the format of a <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="uriKind">The type of the URI.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> must be a <see cref="T:System.Uri"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsInterface(System.Type,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsInterface(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsInterface``1(System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsInterface``1(System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsInterface``1(System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsInterface``1(System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsInterface(System.Type,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsInterface(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments (that must be an interface) to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="types"/> does not satisfy the condition of being an interface.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType(System.Object,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType(System.Object,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType(System.Type,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType``1(System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfContainsType``1(System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType(System.Type,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType(System.Object,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType(System.Object,System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="types"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType``1(System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotContainsType``1(System.String,System.String,System.Type[])">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentOutOfRangeException"/> if the specified <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="types">A variable number of <see cref="T:System.Type"/> arguments to match with the type of <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> is null.
            </exception>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="T"/> is not contained within at least one of the specified <paramref name="types"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEnum``1(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEnum``1(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value to be evaluated.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to regard case.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEnum``1(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> does not represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEnum``1(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="value">The value to be evaluated.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to regard case.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> does not represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEnumType(System.Type,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> represents an enumeration.
            </summary>
            <param name="value">The type to check is an enumeration.</param>
            <param name="paramName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfEnumType``1(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentException"/> if the specified <typeparamref name="TEnum"/> represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type to check is an enumeration.</typeparam>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="TEnum"/> represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEnumType``1(System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:Cuemon.TypeArgumentException"/> if the specified <typeparamref name="TEnum"/> does not represents an enumeration.
            </summary>
            <typeparam name="TEnum">The type to check is not an enumeration.</typeparam>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:Cuemon.TypeArgumentException">
            <typeparamref name="TEnum"/> does not represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotEnumType(System.Type,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentException"/> if the specified <paramref name="value"/> does not represents an enumeration.
            </summary>
            <param name="value">The type to check is not an enumeration.</param>
            <param name="paramName">The name of the type parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> does not represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotBinaryDigits(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> consist of anything besides binary digits.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> must consist only of binary digits.
            </exception>
        </member>
        <member name="M:Cuemon.Validator.ThrowIfNotBase64String(System.String,System.String,System.String)">
            <summary>
            Validates and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified <paramref name="value"/> consist of anything besides a base-64 structure.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> must consist only of base-64 digits.
            </exception>
        </member>
        <member name="T:Cuemon.VerticalDirection">
            <summary>
            Specifies a set of values defining a vertical direction.
            </summary>
        </member>
        <member name="F:Cuemon.VerticalDirection.Down">
            <summary>
            Indicates a vertical direction of Down.
            </summary>
        </member>
        <member name="F:Cuemon.VerticalDirection.Up">
            <summary>
            Indicates a vertical direction of Up.
            </summary>
        </member>
        <member name="T:Cuemon.Wrapper">
            <summary>
            Provides helper method for a <see cref="T:Cuemon.Wrapper`1"/> object.
            </summary>
        </member>
        <member name="M:Cuemon.Wrapper.ParseInstance``1(Cuemon.IWrapper{``0})">
            <summary>
            Parses the encapsulated instance of the specified <paramref name="wrapper"/> for a human-readable string value.
            </summary>
            <typeparam name="T">The type of the encapsulated instance of <paramref name="wrapper"/>.</typeparam>
            <param name="wrapper">The wrapper object to parse the instance.</param>
            <returns>A human-readable <see cref="T:System.String"/> representation of the wrapped instance in the <see cref="T:Cuemon.Wrapper`1"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="wrapper"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.Wrapper`1">
            <summary>
            Provides a way to wrap an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:Cuemon.Wrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Wrapper`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Wrapper`1.#ctor(`0,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Wrapper`1"/> class.
            </summary>
            <param name="instance">The instance that this wrapper object represents.</param>
            <param name="memberReference">The member from where <paramref name="instance"/> was referenced.</param>
        </member>
        <member name="P:Cuemon.Wrapper`1.Instance">
            <summary>
            Gets the object that this wrapper represents.
            </summary>
            <value>The object that this wrapper represents.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.InstanceType">
            <summary>
            Gets the type of the object that this wrapper represents.
            </summary>
            <value>The type of the that this wrapper represents.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.MemberReference">
            <summary>
            Gets the member from where <see cref="P:Cuemon.Wrapper`1.Instance"/> was referenced.
            </summary>
            <value>The member from where <see cref="P:Cuemon.Wrapper`1.Instance"/> was referenced.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.HasMemberReference">
            <summary>
            Gets a value indicating whether this instance has a member reference.
            </summary>
            <value><c>true</c> if this instance has a member reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about this wrapper object.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface and contains a collection of user-defined key/value pairs.</value>
        </member>
        <member name="M:Cuemon.Wrapper`1.InstanceAs``1">
            <summary>
            Returns a value that is equivalent to the instance of the object that this wrapper represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <returns>A value that is equivalent to the instance of the object that this wrapper represents.</returns>
            <exception cref="T:System.InvalidCastException">
            The conversion is not supported - or - <see cref="P:Cuemon.Wrapper`1.Instance"/> does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> is not in a format for <typeparamref name="T"/> recognized by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> represents a number that is out of the range of <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Wrapper`1.InstanceAs``1(System.IFormatProvider)">
            <summary>
            Returns a value that is equivalent to the instance of the object that this wrapper represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A value that is equivalent to the instance of the object that this wrapper represents.</returns>
            <exception cref="T:System.InvalidCastException">
            The conversion is not supported - or - <see cref="P:Cuemon.Wrapper`1.Instance"/> does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> is not in a format for <typeparamref name="T"/> recognized by <paramref name="provider"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> represents a number that is out of the range of <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Wrapper`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
    </members>
</doc>
