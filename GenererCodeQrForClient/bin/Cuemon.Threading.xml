<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cuemon.Threading</name>
    </assembly>
    <members>
        <member name="T:Cuemon.Threading.AdvancedParallelFactory">
            <summary>
            Provides a factory based way to work with advanced scenarios that encapsulate and re-use existing code while adding support for typically long-running parallel loops and regions.
            </summary>
            <seealso cref="T:Cuemon.Threading.ParallelFactory"/>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.Iterator``1(``0,Cuemon.AssignmentOperator,``0)">
            <summary>
            Provides a default implementation of a for-iterator callback method.
            </summary>
            <typeparam name="T">The type of the counter in a for-loop.</typeparam>
            <param name="current">The current value of the counter in a for-loop.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply as the assignment operator for left-hand operand <paramref name="current"/> and right-hand operand <paramref name="step"/>.</param>
            <param name="step">The value to assign to <paramref name="current"/> according to the rule specified by <paramref name="assignment"/>.</param>
            <returns>The computed result of <paramref name="current"/> having the <paramref name="assignment"/> of <paramref name="step"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.Condition``1(``0,Cuemon.RelationalOperator,``0)">
            <summary>
            Provides a default implementation of a for-condition callback method.
            </summary>
            <typeparam name="T">The type of the counter in a for-loop.</typeparam>
            <param name="current">The current value of the counter in a for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply as the relational operator for left-hand operand <paramref name="current"/> and right-hand operand <paramref name="repeats"/>.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <returns><c>true</c> if <paramref name="current"/> does not meet the condition of <paramref name="relational"/> and <paramref name="repeats"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``1(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``2(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0,``1},``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``3(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0,``1,``2},``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``4(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0,``1,``2,``3},``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``5(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0,``1,``2,``3,``4},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.For``6(Cuemon.Threading.ForLoopRuleset{``0},System.Action{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``1(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``2(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``3(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``4(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``5(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForAsync``6(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The <see cref="T:System.Threading.Tasks.Task"/> based function delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``2(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``3(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2},``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``4(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3},``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``5(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4},``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``6(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResult``7(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,``5,``6},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``2(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``3(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``4(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``5(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``6(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.ForResultAsync``7(Cuemon.Threading.ForLoopRuleset{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task{``6}},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop that offers control of the loop control variable and loop sections where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="rules">The rules of a for-loop control flow statement.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rules"/> cannot be null -or-
            <paramref name="worker"/> cannot be null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``2(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition" /> evaluates <c>true</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions" /> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``3(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1,``2},``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``4(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1,``2,``3},``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``5(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1,``2,``3,``4},``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``6(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1,``2,``3,``4,``5},``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.While``7(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Action{``1,``2,``3,``4,``5,``6},``2,``3,``4,``5,``6,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``2(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition" /> evaluates <c>true</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions" /> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``3(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``4(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``5(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``6(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task},``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileAsync``7(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken,System.Threading.Tasks.Task},``2,``3,``4,``5,``6,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``3(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition" /> evaluates <c>true</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions" /> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``4(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2,``3},``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``5(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2,``3,``4},``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``6(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5},``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``7(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,``6},``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResult``8(``0,System.Func{System.Boolean},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,``6,``7},``2,``3,``4,``5,``6,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``3(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition" /> evaluates <c>true</c>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions" /> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``4(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``5(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``6(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``7(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task{``6}},``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AdvancedParallelFactory.WhileResultAsync``8(``0,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,``1},System.Func{``1,``2,``3,``4,``5,``6,System.Threading.CancellationToken,System.Threading.Tasks.Task{``7}},``2,``3,``4,``5,``6,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel while loop where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.
            </summary>
            <typeparam name="TReader">The type of the <paramref name="reader"/> that provides forward-only access to data.</typeparam>
            <typeparam name="TElement">The type of the result provided by <paramref name="reader"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="reader">The reader that provides forward-only access to data.</param>
            <param name="condition">The function delegate that is responsible for the while loop condition.</param>
            <param name="provider">The function delegate that provides data from the specified <paramref name="reader"/>.</param>
            <param name="worker">The delegate that will perform work while <paramref name="condition"/> evaluates <c>true</c>.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same order as the while loop evaluates <c>true</c>.</returns>
        </member>
        <member name="T:Cuemon.Threading.AsyncTaskFactoryOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Threading.ParallelFactory"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncTaskFactoryOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Threading.AsyncWorkloadOptions.PartitionSize"/></term>
                    <description>2 x <see cref="P:System.Environment.ProcessorCount"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Threading.AsyncTaskFactoryOptions.Scheduler"/></term>
                    <description><see cref="P:System.Threading.Tasks.TaskScheduler.Current"/></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Threading.AsyncTaskFactoryOptions.CreationOptions"/></term>
                    <description><see cref="F:System.Threading.Tasks.TaskCreationOptions.LongRunning"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Threading.AsyncTaskFactoryOptions.CreationOptions">
            <summary>
            Gets or sets the <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to create the task.
            </summary>
            <value>The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to create the task.</value>
        </member>
        <member name="P:Cuemon.Threading.AsyncTaskFactoryOptions.Scheduler">
            <summary>
            Gets or sets the <see cref="T:System.Threading.Tasks.TaskScheduler"/> that is used to schedule the task.
            </summary>
            <value>The <see cref="T:System.Threading.Tasks.TaskScheduler"/> that is used to schedule the task.</value>
        </member>
        <member name="T:Cuemon.Threading.AsyncWorkloadOptions">
            <summary>
            Configuration options for <see cref="T:Cuemon.Threading.ParallelFactory"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncWorkloadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> class.
            </summary>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Threading.AsyncWorkloadOptions.PartitionSize"/></term>
                    <description>2 x <see cref="P:System.Environment.ProcessorCount"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Cuemon.Threading.AsyncWorkloadOptions.PartitionSize">
            <summary>
            Gets or sets the size of the partition to allocate work to a set of tasks.
            </summary>
            <value>The size of the partition to allocate work to a set of tasks.</value>
        </member>
        <member name="T:Cuemon.Threading.ForLoopRuleset`1">
            <summary>
            Specifies the rules of a for-loop control flow statement.
            </summary>
            <typeparam name="TOperand">The type of the number used with the loop control variable.</typeparam>
        </member>
        <member name="M:Cuemon.Threading.ForLoopRuleset`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.ForLoopRuleset`1"/> class.
            </summary>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="TOperand"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ForLoopRuleset`1.#ctor(`0,`0,`0,Cuemon.RelationalOperator,Cuemon.AssignmentOperator,System.Func{`0,Cuemon.RelationalOperator,`0,System.Boolean},System.Func{`0,Cuemon.AssignmentOperator,`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.ForLoopRuleset`1"/> class.
            </summary>
            <param name="from">The rules of a for-loop control flow statement.</param>
            <param name="to">The conditional value of the loop control variable.</param>
            <param name="step">The value to assign the loop control variable.</param>
            <param name="relation">The relation between the loop control variable <paramref name="from"/> and <paramref name="to"/>.</param>
            <param name="assignment">The assignment statement of the loop control variable using <paramref name="step"/>.</param>
            <param name="condition">The function delegate that represents the condition section of the for loop. Default value is <see cref="M:Cuemon.Threading.AdvancedParallelFactory.Condition``1(``0,Cuemon.RelationalOperator,``0)"/>.</param>
            <param name="iterator">The function delegate that represents the iterator section of the for loop. Default value is <see cref="M:Cuemon.Threading.AdvancedParallelFactory.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.</param>
            <exception cref="T:Cuemon.TypeArgumentOutOfRangeException">
            <typeparamref name="TOperand"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.From">
            <summary>
            Gets or sets the initial value of the loop control variable.
            </summary>
            <value>The initial value of the loop control variable.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.Relation">
            <summary>
            Gets or sets the relation between the loop control variable <see cref="P:Cuemon.Threading.ForLoopRuleset`1.From"/> and <see cref="P:Cuemon.Threading.ForLoopRuleset`1.To"/>.
            </summary>
            <value>The relation between the loop control variable.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.To">
            <summary>
            Gets or sets the conditional value of the loop control variable.
            </summary>
            <value>The conditional value of the loop control variable.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.Assignment">
            <summary>
            Gets or sets the assignment statement of the loop control variable using <see cref="P:Cuemon.Threading.ForLoopRuleset`1.Step"/>.
            </summary>
            <value>The assignment statement of the loop control variable.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.Step">
            <summary>
            Gets or sets the number to assign the loop control variable.
            </summary>
            <value>The number to assign the loop control variable.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.Condition">
            <summary>
            Gets or sets the function delegate of a for-condition.
            </summary>
            <value>The function delegate of a for-condition.</value>
        </member>
        <member name="P:Cuemon.Threading.ForLoopRuleset`1.Iterator">
            <summary>
            Gets or sets the function delegate of a for-iterator.
            </summary>
            <value>The function delegate of a for-iterator.</value>
        </member>
        <member name="T:Cuemon.Threading.ParallelFactory">
            <summary>
            Provides a factory based way to encapsulate and re-use existing code while adding support for typically long-running parallel loops and regions.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For(System.Int32,System.Int32,System.Action{System.Int32},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``1(System.Int32,System.Int32,System.Action{System.Int32,``0},``0,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``2(System.Int32,System.Int32,System.Action{System.Int32,``0,``1},``0,``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``3(System.Int32,System.Int32,System.Action{System.Int32,``0,``1,``2},``0,``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``4(System.Int32,System.Int32,System.Action{System.Int32,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``5(System.Int32,System.Int32,System.Action{System.Int32,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For(System.Int64,System.Int64,System.Action{System.Int64},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``1(System.Int64,System.Int64,System.Action{System.Int64,``0},``0,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``2(System.Int64,System.Int64,System.Action{System.Int64,``0,``1},``0,``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``3(System.Int64,System.Int64,System.Action{System.Int64,``0,``1,``2},``0,``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``4(System.Int64,System.Int64,System.Action{System.Int64,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.For``5(System.Int64,System.Int64,System.Action{System.Int64,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync(System.Int32,System.Int32,System.Func{System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``1(System.Int32,System.Int32,System.Func{System.Int32,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``2(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``3(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``4(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``5(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync(System.Int64,System.Int64,System.Func{System.Int64,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``1(System.Int64,System.Int64,System.Func{System.Int64,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``2(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``3(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``4(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForAsync``5(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``3(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2},``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``4(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3},``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``5(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEach``6(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachAsync``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="worker" />.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2},``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3},``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4},``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResult``7(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5,``6},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel foreach loop    
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions" /> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForEachResultAsync``7(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.CancellationToken,System.Threading.Tasks.Task{``6}},``1,``2,``3,``4,``5,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel foreach loop    
            </summary>
            <typeparam name="TSource">The type of the data in the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="source">The sequence to iterate over parallel.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions" /> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as <paramref name="source" />.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``2(System.Int32,System.Int32,System.Func{System.Int32,``0,``1},``0,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``3(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2},``0,``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``4(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3},``0,``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``5(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``6(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``1(System.Int64,System.Int64,System.Func{System.Int64,``0},System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``2(System.Int64,System.Int64,System.Func{System.Int64,``0,``1},``0,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``3(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2},``0,``1,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``4(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3},``0,``1,``2,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``5(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResult``6(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncTaskFactoryOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncTaskFactoryOptions"/> which may be configured.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``1(System.Int32,System.Int32,System.Func{System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``2(System.Int32,System.Int32,System.Func{System.Int32,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``3(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``0,``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``4(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``5(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``6(System.Int32,System.Int32,System.Func{System.Int32,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``1(System.Int64,System.Int64,System.Func{System.Int64,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``2(System.Int64,System.Int64,System.Func{System.Int64,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``3(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``2}},``0,``1,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``4(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,System.Threading.CancellationToken,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``5(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,System.Threading.CancellationToken,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
        <member name="M:Cuemon.Threading.ParallelFactory.ForResultAsync``6(System.Int64,System.Int64,System.Func{System.Int64,``0,``1,``2,``3,``4,System.Threading.CancellationToken,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,System.Action{Cuemon.Threading.AsyncWorkloadOptions})">
            <summary>
            Executes a parallel for loop where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="worker" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="worker"/>.</typeparam>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="worker">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="worker" />.</param>
            <param name="setup">The <see cref="T:Cuemon.Threading.AsyncWorkloadOptions"/> which may be configured.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.
            The task result contains an <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> where the return value of the function delegate <paramref name="worker" /> is stored in the same sequential order as the for loop.</returns>
        </member>
    </members>
</doc>
